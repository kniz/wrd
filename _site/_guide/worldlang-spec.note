
    blablabla
# Worldlang Specification Noted

# 수정내역

| #    | 버전 | 내용                                                  | 날짜        |
| ---- | ---- | ----------------------------------------------------- | ----------- |
| 1    | 0.1  | 초안                                                  | 21 Jun 2019 |
| 2    | 0.2  | 문법 경량화<br />구현내용까지 포함한 단일 문서로 작성 | 21 Aug 2019 |
|      |      |                                                       |             |

# 개요
* World 프로그래밍 언어의 철학, 개념, 문법과 알고리즘을 모두 서술한다.
* 개발 과정에 있었던 고민과 메모, 지금과 같은 결론에 이르기까지 있었던 제안들과 그것들이 왜 실패했는지도 모조리 기록한다.



# 순서




# 목적

## 게임을 하듯, 취미로 하는 프로그래밍

## 디버깅에 시간을 줄이자

## 간결한 문법, 보다 적은 키워드

# 철학
##  빠른 개발은 빠른 디버깅이다.






# 특징
## 프로토타이핑 기반

* origin 객체의 생성은 프로그램 시작시 끝난다.
* 생성자가 호출되면 origin객체를 현재의 복제한 뒤, 생성자 함수는 생성된 멤버변수의 조작만 하는 일종의 이벤트 + 객체복제의 신호 로써 취급한다.
  * 기반 클래스인 Object의 생성자에서:는 객체를 가상 복제하는 코드가 들어있게 된다.
* origin 객체는 기본적으로 런타임에 수정이 가능하다.

## 타입 유추 기반

3. **객체 정의 구현 알고리즘**

   1. 컴파일을 시작한다.

   2. scope에서 origin 객체를 찾아, 없으면 ManagedObject를 생성해 scope에 넣는다.

   3. Origin 객체로부터 상속 구조를 만들어낸다. 그리고 메소드 / 멤버변수를 복제&추가한다.(Mouse1 -> Part)

        1. Unique한 멤버변수들은 origin에 바로 담고, sharing 할 것들은 origin이 binder로 가리키는 shared에 담는다.

        ```cpp
        uniques = parent.uniques.clone()
        if C-REPL
            shared = new Chain()
            shared->chain(*parent.shared)
        else // optimization
            shared = new Array()
            *shared = parent.shared->clone()
        ```

        2. 초기화 수식은 실행하지 않는다. 각 멤버변수들은 default 상태로 구성된다. 멤버변수는 절대로 삭제되거나, 여기서 추가되지 않는다. 이를 OriginShell이라 하자.

   4. origin shell을 바탕으로 컴파일 validation을 진행한다.

   5. 프로그램 시작 도중, static변수 초기화처럼 origin객체들을 모두 생성한다.

   6. 각 origin 객체 마다

      1. scope에서 찾아, 초기화가 되었는지 state 질의해, 안되어있으면 init 한다.

         1. **origin_shell.assign(expr) 한다.**

            1. **반환한 객체가 null이면 에러.**

               **origin_shell 기준으로 assign이므로 expr의 객체가 origin 객체 scope을 초과한 멤버변수/메소드가 있다면 자연스럽게 무시된다.**

         2. 멤버변수의 초기화식을 수행한다.

         3. origin객체의 완성. 확정짓는다.

      2. 있으면 scope에서 바로 반환한다. 초기화 중이건 상관하지 않는다.

   7. 사용자가 생성자를 호출하면, origin객체를 가상 복제한다.

   8. 가상 복제한 객체에 생성자를 수행한다.

   9. 생성자 체인 내부에서는 이미 생성된 멤버변수들에 대해 조작만 가한다.

``` cpp
def Part
    Part(str newname=""/*default*/): name = new_name

    _name = "unknown"
    void say(): null
    #year = foo(lambda, complex_msg) // year is const

def Body = Part
    void say(): c.out("Body")

def Button = Part("button") // prototyped from Part has text "button" of its name.
def Mouse = Part("mouse")
    Mouse(): super("overwrite this")
    Mouse(int a) // do nothing

def app
    void main()
        c.out(Mouse().name) // "overwrite this"
        c.out(Mouse(1).name) // "mouse"

    parts = [Part null]
    tuple = Part:str null
    maps = [Part:str null]
```





## 간결한 문법

## 정적 타입

## C-REPL









# 문법과 알고리즘
# Hello World

```cpp
import console // import로 모듈을 가져옴

/*모든 프로그램은 진입점을 위한 app이라는 객체 정의가 필요*/
def app
	int main(): console.out("hello world!\n")

// 결과: hello world
```



# 변수

기본 제공 타입은 기본자료형(primitive data type)과 선정의 타입 (pretype) 2종류로 나뉘어집니다.

기본 자료형은 총 7 종류이며, pretype은 밑에서 얘기하겠습니다.

| 타입명 | 종류         | 표현 범위 | 크기  | 기본값 | casting 우선순위(낮은쪽 -> 높은쪽) |
| ------ | ------------ | --------- | ----- | ------ | ---------------------------------- |
| int    | 정수         | signed    | 32bit | 0      | 4                                  |
| float  | 실수         | signed    | 32bit | 0.0    | 5                                  |
| str    | 문자열       | .         | .     | ""     | 6                                  |
| bool   | true / false | .         | .     | false  | 2                                  |
| char   | 정수         | unsigned  | 16bit | 0      | 3                                  |
| byte   | 정수         | signed    | 8bit  | 0      | 3                                  |
| res    | 결과         | .         | .     | rok    | 1                                  |

```cpp
import console

def app // 객체 app
	age = 0 // app의 변수, age.
    void   main   (   )  // whitespace 무시
        age=0 // 지역변수 age와 member변수와 이름 중복 허용
        ++age++ *= 2 // age == 4
        // 연산자 우선순위 존재함.
        // 다음 연산자 지원 : += -= /= %= <= < > >= = == != --

        pow = age^2 // => age*age == 16
        console.out("hello world!"[-9999999~4] + "boy aged " + pow) // str은 UTF-16 인코딩
        // Sequence: x~y 로 표현하며 [x, y)의 범위를 가짐.
        // str[-9999]는 0으로 예외처리.
        // str[99999999]는 str의 length-1로 예외처리.
        // int + str시, implicit 캐스팅 우선순위(3vs5)에 따라, int->str casting


// 결과: hellboy aged 16
```

## [x] num, str만 사용하자?

* int, float을 num이라는 걸로 대체하고 char str은 str로 대체해서 사용하자는 아이디어.
* 여러 샘플앱을 만들어본 결과,
    * 실수를 사용하면 == 5 같은 부분에서 부정확하고
    * char를 표현해야만 하는 경우가 있으며
    * H/W 기반 앱이나 과학분야나 특정 분야에서 애로사항이 많을 것으로 보인다.
    * interoperability를 지원할때 문제가 많이 발생한다.
* 지원하지 않기로 한다.

## 식별자-정의시-파이썬처럼-타입을-적지않으면 auto로 인식되게 할 수 있을까?*

- int a = 5를, a = 5로 바꿀 수 있을까?
- [v] 시나리오 검토
  - *[x] 시나리오1 - 함수 정의 : 함수는 이름이 가운데 오고, 클로저와 혼란이 있을 수 있기에 함수명은 원래 생략이 안된다.*
  - [v]시나리오2 - delegator 정의시
    - foo = void(void)
      - ...
- [v] 해결안
  - 핵심은 컴파일러가 모호성 오류를 내보낼 수 있다는 것이다. 이게 식별자 정의인지, 단순히 할당연산인지 구분이 안가니까.
  - *[x] 1안 식별자가 scope에서 처음 등장하면...?*
    - 만약 이름 중복된 식별자를 정의한다면, 이게 할당연산인지 아닌지 구분이 안간다.
    - 예) class A
      - age = 5
      - void foo()
        - age = 23 // 실제로 하고 싶었던 거는 age라는 지역변수를 만들어서 23으로 초기화 하는 거였다....
  - *[v] 2안 1안을 적용하고, 이름 중복은 허용하지 않는다고 한다면.*
  - *[x] 3안 파이썬처럼 전역변수 참조시에 특수한 prefix를 붙이게 한다* -> 최악이라고 본다.
    - 파이썬의 예)
      - my_value = 4 *// 전역*
      - def increase_my_value(step=1):
        - global my_value *// 전역변수를 참조한다는 뜻이다. global이 없으면 지역변수 정의가 된다.*
        - my_value += step
      - print(my_value)
      - *# 4*



## [v] 이름 중복을 허용할 것인가?

* 변수명과 메소드명은, 같은 scope가 아니라면 이름이 중복되는 걸 허용할 것인가?

* 현재 상황에서는 다음과 같은 문제가 있다.

* ```java
  def A
      void say()
          foo = B()
          foo.act()

  def B = A
      void act()

  // 이때 전역변수 foo = A()를 넣게 되면, foo.act()는 에러가 된다.
  ```

  * 물론 효율적인 빌드를 돌리는게 어렵다는 문제도 있다.
  * 그러나 가장 큰 문제는 분명히 사용자가 올바른 의도를 가지고 올바르게 작성한 구문이, 자칫 다른 의미로 오해석 될 가능성이 있다는 것이다.
  * 위에서는 에러가 나오니 그나마 낫다. 만약 에러가 나오지 않고 잘못된 의도대로 프로그램이 돌아갔다면 더 심각한 상황이 된다.

### 고찰

* 가장 큰 문제는 이미 작성된 문법이 오해석 될 여지가 있다는 부분으로, 이는 A = B가 정의와 동시에 할당으로도 해석될 수 있기 때문이다.
* 월드는 타입이 엄연히 존재하는 정적타입 언어이기 때문에 이 둘의 구분이 반드시 필요하다.
* 앞뒤 문맥이나 코드가 위치한 부분으로부터 둘을 구분하려는 시도는 복잡도를 만들 수 있다.
* 이름 중복을 허용하지 않으면 위의 오해석 문제를 해결 할 수 있다. 그러나 개발자는 모든 곳에서 이름을 적을 때 항상 겹치지 않도록 주의해야만 한다.

### [x] 1안 이름 중복을 허용하지 말자.

```java
def A
    void say()
say = 5 // A.say 와 say 이므로 괜찮을 것 같지만, say() 메소드 안쪽에서 say라고 이름을 호출 할 수 있으므로 이것또한 에러다.
```

```java
def A
    void say()
    void foo()
        say = foo // 지역변수 say를 만들려고 했겠지만 실제로는 메소드 say에 대한 할당으로 판단되기 때문에 에러로 간주한다.
```

* 메소드의 경우 할당이 될 수 없다고 한다. 할당되는 자리에 메소드가 온 경우에는 메소드 이외의 다른 변수를 찾는다.
  * 보다 정확히 하면 메소드는 const. 그러니 const에 대해 할당이 오면 const 이외의 다른 이름을 찾는다.
* 전역변수는 반드시 앞을 대문자로 한다.

#### [x] Q1. 이렇게 해도 여전히 오해석 문제는 나오게 된다. --> 해결못함ㅋㅋ

```java
def A
    void say()
    def _Inner // 중첩클래스는 반드시 private 이다.

    Myball = 33 // static == class scope에 있는 전역변수. 전역이므로 앞을 대문자로.
        void say()
            a = Inner()
    void foo()

// def Myball을 하는 순간 Myball = 33은 Myball이란 static 변수를 정의하는 것에서, 전역변수 Myball에 대한 할당으로 의미가 변한다. 그리고 물론 def Myball이 int였을 경우, 어떠한 에러도 나오지 않게 된다.
```

### [v] 2안 작은 문법을 추가한다.

#### [v] Q1. def A 대신 A 라고 표현 해야하나?

#### [x] 1안 := obj

```java
A
    void say()
    _Inner

    Myball := 33 // class scope 전역 변수의 정의.
        void get(): val
// def Myball 하는 순간, 에러를 표시할 수 있다.

A
    age := 22

A := obj
    age := 22
```

### [v] 2안 def도 추가

```java
def A // def는 뒤에 새로운 interface가 나온다는 뜻.
    age := 22 // 그냥 := 이면 변수의 정의

    void say()
        age = 33 // =는 변수의 할당.
```

### [v] Q2. 이름 중복은?

* 이름 중복을 허용해도 문제는 생기지 않는다.
* 일단은 다른 언어들도 지원하는 것처럼 우리도 지원하는 쪽으로 가닥을 잡고, 안하고 싶다면 안되는 이유와 그 장점을 찾아야 한다.

### 다른 언어는?
* C, Swift, C#, python : 허용
* Java : 고의적으로 불허
* JS : 어쩔 수 없이 불허

### [x] 1안 지원하지 않는다
* 허용하지 않아도 충분히 언어로써 기능은 수행할 수 있음. (다른 언어를 보라. 선례가 있다.)
* 중요한 것은 개발자가 이게 무슨 scope의 변수인지 확실히 인지 할 수있거나, 인지할 수 있는 실패의 경험을 최대한 빨리 줄 수 있냐는 것이다. 설사 코드가 돌아가더라도, 개발자가 그것이 실수였음을 인지 하지 못하게끔 되어있다면 문제가 있는 것이다.
* 또한 허용할 경우, 다른 scope의 변수를 참조할 수 있는 방안또한 마련을 해줘야 한다.


### [v] 2안 지원해야 한다.
```java
def A
	def B := A
		void say()
		void foo()
			say() // A.B.say()와 A.say()가 충돌하고 있다.

	void say()
```
1. 위와 같은 예제는 충분히 나올 수 있는 예제이건만, 이름 충돌을 지원하지 않으면 위는 invalid 하게 된다. 반드시 지원해야 한다.
2. 이름 충돌의 보편적인 해결법은 local scope을 우선하는 것이다. local scope이란 즉, 해당 메소드가 정의된 클래스를 우선하는 것으로, 해당 클래스를 작성중일 개발자가 그러한 클래스나 메소드가 있다는걸 가장 잘 알고있다. 그러니, 대부분의 의도또한 local scope에 있는걸 사용하려는 것일 것이다.

#### [v] Q1. 그럼 전역변수를 참조할 수 있는 문법은?
#### [x] 1안 그런거 없다.

#### [x] 2안 :abc
#### [v] 3안 .abc
문법으로 검증해보니 되긴 하더라.



## Node

* 가장 기반이 되는 클래스.
* Node이면 member를 가질 수 있다.
	* member는 메소드 혹은 변수다.
* accessor 를 구현한다.
* hierarchy를 구현한다.
* this를 점거하지 않는다.



## 여러개의 변수를 동시에 정의 가능?

```cpp
[?]1: a = 1, b = 2

[?]2:
arr = [a = 1
    print()
        c.out("I'm a")
,b = 2
    print()
        c.out("I'm b")
]
a.print()
b.print()
```



















# 연산자

```cpp
def app
    int main()
        age = 21
        sum = 0
        // 블록문 생략:
        // 블록문은 구문의 집합이며, 중괄호와{} 들여쓰기Indentation로 표현한다.
        // 여기서 중요한 것은 들여쓰기이며, 중괄호는 모호한 케이스를 없애기 위해
		// 표현하는 것이다.
		// 모든 중괄호는 생략될 수 있으며, 들여쓰기만 제대로 되어있으면 문제는 없다.
		// 다만 몇몇 케이스에서는 중괄호 생략이 문제가 될 수 있다는 걸 알아야 한다.
		//
		// 중괄호 생략시 문제케이스 #1:
		// world의 핵심 특징은 모든 구문stmt을 표현식expression으로 대체한 것에 있다.
		// 이는 정의와 사용을 동시에 할 수 있게 하는데, 중괄호가 없을 경우 모호한
		// 상황이 필연적으로 발생한다.
		// e.g.	void print()
		// 			console.out("hello")
		//		() // 이것은 print()인가 아니면 빈 Tuple인가?
		// 		중괄호를 넣으면 직관적으로 변한다.
		// 		void print() {
		//			console.out("hello")
		// 		} // 이 뒤에 ()를 붙이면 클로저의 호출이 된다.
		// 		() // 빈 tuple이다.
		//
		// 중괄호는 가급적 표현하지 않는 것을 권장한다.

        if age > 20 { // 블록문시 {, }를 사용가능 하지만,
            if age > 20 & age < 20 // 생략을 권장.
                console.out("can't reach here")

            sum = 0 // 허용된 중복 정의
            for n in 1~5 // ~는 1부터 5까지를 의미함. [1, 5)
                sum += n

            console.out("sum=" + sum) // "sum=10"
        } else if age == 20 // 블록문 뒤에 다음 stmt 가능.
            sum = 0
        if ! (age == 21) | sum // |는 or연산. sum이 0이 아니면 true로 판단
            console.out("sum=" + sum)
        elif ! sum // elif == else if
            console.out("can't reach here")
            return -1 // 함수 종료. 반환

        bit = 2
        console.out(bit || 4) // "6"
        // ||, &&, ~~ 비트 연산자
        return 0


import console // 외부 scope 이면, 어느 위치에든 선언 가능.


/* 결과:
sum=10
sum=10
6
*/
```


## 연산자 우선순위

위에 있을 수록, 우선된다. 크게 5가지로 다음과 같이 분류하며, 단항 -> 이항 순으로 나온다. 동일한 우선순위라면 왼쪽에서 오른쪽으로 평가된다.

1. 접근
2. 단항
3. 이항 산술
4. 비트연산
5. 비교

| 연산자operator                          | 설명                                            | 예제                    |
| --------------------------------------- | ------------------------------------------------| ----------------------- |
| ()                                      | 괄호                                            | (void func(int val) {}) |
| ( <인자리스트> )                        | 함수호출                                        | func(35)                |
| []                                      | 원소접근                                        | arr[5]                  |
| ++, --, **                              | 후위 단항unary postfix                          | a++                     |
| ++, --, **                              | 전위 단항                                       | **a // a*a              |
| _                                       | 보호 속성 단항protected                         | str _val {}             |
| $, #                                    | 상수 / 정적 속성 단항                           | #str $#_val {}          |
| +                                       | 확장 속성 단항                                  | #str +#$_val {}         |
| -                                       | 음수 단항<br />양수 단항unary plus 연산자는 없다 | a = -a                 |
| !                                       | 부정logical not                                  | !++a                   |
| ~~                                      | 비트연산 부정                                    | ~~a                    |
| *, /, %, ^                              | 이항 곱, 나눗셈, 나머지 연산                    | a % b                   |
| +, -                                    | 이항 덧셈, 뺄셈                                  | a - b                  |
| <<, >>                                  | 비트 SHIFT 연산                                  | a << 3                 |
| &&                                      | 비트 AND 연산                                    | a && 0x01              |
| %%                                      | 비트 XOR 연산                                    | a %% 0x01              |
| \|\|                                    | 비트 OR 연산                                    | 0x02 \|\| 0x01          |
| ~                                       | 범위 연산                                        | 0 ~ b                  |
| <=, <, >, >=, ==, !=, --                | 비교 연산                                        | a > b                  |
| &, \|                                   | 논리 연산                                        | if a & b               |
| =, *=, /=, %=, +=, -=, &&=, \|\|=, ^^=, | 할당 연산                                        | a &&= 0x02             |


### 비교연산자와 참조자 비교 연산자
```namu
a1 := My()
a2 := My()

a1 == a2 // true
a1 === a2 // false
a2 = a1 // now a2 reference to what a1 is pointing.
a1 === a2 // true
```

```


## 캐스팅

### Casting의 기본

- Casting은 3가지를 요구사항이 있다.

  - \1. 월드의 형변환은 1가지 문법으로 100% 대체가 가능한데, to() 함수다. to 함수는 다음과 같은 순서로 우선순위를 갖는다.
    - \1. 사용자가 정의한 캐스팅코드
    - \2. 거기에 없으면 클래스 계층상 구체클래스타입을 원하는 경우(= RTTI)
    - \3. 거기에 없으면 주체자(= This)의 생성자를 통한 호환
    - \4. 거기에도 없으면 실패. 끝.
  - 1번을 제외한 2-3번은 모두 WorldFrx 안에 탑재되어있어야 한다.
  - \2. 월드Frx의 실체는 Native에 있기에 형변환을 실질적으로 수행하는 코드는 Native여야 한다. 따라서 Node를 binding하는 Refer가 반환형이기 때문에, Node에 정의된 virtual Refer to(Class&) 함수가 실질적인 형변환을 수행한다.
  - \3. Native환경에서는 타입이 구체적으로 나와야 편하기 때문에 TRefer<T> to<T>()를 제공한다.

- 추가적으로 지역변수에다가 to를 사용한 경우에는 #로컬바인딩 을 가능하게 함으로써 해결되었다.

- 고찰내용

  - 요구사항

    - **1. 월드에서는 형변환을 지원하는 1가지의 유일하진 않지만 강력한 방법을 통해 다른 사람이 이것만 사용하도록 하고 싶다.**
      - c++에서는 형변환은 여러 방법이 있다.
        - Integer.parseString()
        - (T)
        - atoi(int)
        - stringbuffer << int
        - String(int)
      - World에서는 한가지 문법으로 사용자가 사용하도록 했으면 좋겠다.
    - \2. 또한 월드Frx의 실체는 Native에 있기 때문에 형변환을 위한 함수가 있다면 모두 Native에서 먼저 사용가능한 상태가 되어야 한다. 이는 반환형을 깊이 생각해야 할 것이다.
    - \3. Managed와 달리 Native는 타입이 구체적이어야 사용이 편하다. 형변환 결과가 구체타입으로 바로 나올 수있는 방법을 마련해야 한다.

  - x 1안 형변환은 대상자의 생성자와 자신의 생성자 중에서 호환되는 걸 선택하는 것이다. extend로 이를 해결한다.

    extend는 위험하다. private를 사용해야 하는 경우도 있으므로 friend를 필요로 한다.

    - int 와 string 관계에서 int->string은 string(int)가, string->int는 int(string)이 대신할 수 있지 않겠냐는 것이다.
      - 그러나 int가 먼저 생긴 클래스이므로 int(string)은 extend로 들어가야 한다. 이는 상대방의 private를 다 알고있어야만 하므로 extend는 피하고 싶다.

  - v 2안 형변환은 대상자의 **생성자**와 **to()** 중에서 호환되는 걸 선택하는 것이다.

    - int->string은 string(int)가, string->int는 [string.to](http://string.to/)(int)가 대신하도록 한다면?
      - 생성자는 visible하게 할 수있을 것으로 보인다
      - to함수가 native에 노출되어야 한다. 따라서 (T)보다는 to자체를 managed에서도 사용하게 한는게 좋을 것이다.
      - 먼저 to()를 시도하고 나서, 안되면 대상자 생성자로 처리하는 편이 좋을 것이다. 대상자 생성자를 바인딩하는 알고리즘은 주어진 타입cls에 대한 근접치 정도(== getProximity)로 판단해야 할 것이다.
      - 문제
        - \#로컬바인딩 문제를 해결해야만 한다. --> 해결함.
        - 반환형을 뭐로 할것인가?
          - Refer로 해야 한다. 그래야 Object가 나올수는 없다. *this가 나올수도 있어야 하기 때문이다.
          - Refer는 Class를 들고 있는다.
          - 구체클래스 타입으로 to를 한 경우에는 반환할 Refer에서 Class만 구체클래스의 것으로만 바꿔줘서 넘겨주면 된다.
          - Native의 편의를 위해서는 TRefer를 사용하면 된다.



### to함수의 signature.

- to함수는 World에 visible해야 하므로 반환형은 Bind가 될 수없다. Refer다. Refer는 Strong을 기본으로 하고 있다.
- Strong로 나간걸 Weak로 받을 수 있다. 따라서 to함수로 Strong인채로 나가야만 한다. (weak로만 나가면 to함수 안에서 새로 객체를 생성해서 내보낼 수가 없게 된다는 얘기다. 선택권은 호출자(caller)에게 줘야하므로 Strong으로만 내보내야 한다)



### C 타입 캐스팅을 어떻게 지원할까?

- C++ native 타입들 (주로, ptr이 선언된)들에 대한 casting은 어떻게 되야 할까?  이게 필요한 이유는 mashalling을 지원하기 위해서다.
- NativeWrapperMetaClass를 만든다. 그 안에서는 ctor을 하나 만들어서 자동으로 넣어둔다. 그리고 이걸 가지고 casting (WorldObject -> C++NativeType)으로 가면 된다.
- 예)
  - (this->*_fptr)(msg[0].to<TClass<my_char_struct*>(), msg[1].to<Type2>());



### 명시적캐스팅

- 요약 : 명시적 캐스팅 = #묵시적캐스팅(=다운캐스팅 + pretype캐스팅) + 사용자 커스텀 캐스팅
- to()로 호출한다.  반환값은 Refer이며, to<T>()도 지원한다.
- to<const T>()를 적으면 Refer<const T>가 반환되며, 그것의 isConst()는 true가 된다.
- 임의의 클래스 A. const A& a = ...; 일때 [a.to](http://a.to/)(참고 -> #명시적캐스트에서_다운캐스팅으로_반환된경우만_isConst함수가_영향력을_발휘한다.







### Worldlang-개발자가-to에다가-캐스팅을-추가하려면 어떻게 해야 할까?

- 고찰을 통해 알아낸 방법

  - 이와 비슷한 케이스들이 많이 있을 수 있다는 걸 알아냈다.
    - class A
      - A operator+(C c)
      - A operator+(B b)
    - class B : A
      - B operator+(C c)
      - B oeprator+(D d)
    - A& a = new B()
    - B b;
    - a + b // c++은 에러. 메소드 hided.
  - 비슷해 보이지만 좀 다른게, +는 모든 타입마다 지원하는 게 아니다. 그러므로 c++처럼 +를 사용하고 싶다면 구체타입으로 캐스팅 하라! 라고 가이드를 주면 된다.
  - 하지만 캐스팅 함수는 아니다.

- 고찰을 통한 요구사항 도출

  - \1. 사용자 관점에서 편해야 한다. managed와 native 모두 동일한 경험을 제공해야 한다.
    - 배열은 잊어버려라. Native 이든 Managed 배열을 만들게 해서는 안되며, Native 한쪽만 배열을 만들도록 해서도 안된다.
  - \2. 먼저 Native 관점에서 생각해야 한다.
    - 1번에 나온 것으로, 경험이 동일해야 하기 때문에 더 제약이 많은 Native 관점에서 먼저 생각해야한다.
  - \3. 멀티메소드는 사용할 수 없다. 다운캐스팅도 안된다.
    - 모두 컴파일에러를 잡을 수 없기 때문이다.
  - \4. 가능하다면 사용자는 일반 함수를 작성하는 것처럼 만들면 알아서 캐스팅 함수에서 redirection되도록 해야한다.
  - \5. 최적화가 가능해야 한다. 속도가 빨라야 한다.

- x 1안 worldlang은 to를 오버라이드하도록 한다
  사용자의 경험상, 올바르지 않다. if-else가 반복되게된다.

- x 2안 멀티메소드를 지원한다.

  폐기

  - 멀티메소드란 추상타입에 담긴 구체타입으로 자동 다운캐스팅을 지원하여, 그쪽으로 디스패치되도록 하는 것이다.
    - 예) class A
      - void #print(Node n)
        - Console.out(n)
      - void #print(String n)
        - Console.out("msg = " + n)
    - node msg = string("hello world")
    - A.print(msg) // "msg = hello world"
  - C++은 디자인 불가능의 이유로, 멀티메소드를 거절했다.
    - Straight from the horse's mouth:
      - "I rejected multi-methods with regret, because I liked the idea, but couldn't find an acceptable form under which to accept it."
    - Bjarne Stroustrup, The Design and Evolution of C++ (p297)
    - And later:
      - "Multi-methods is one of the interesting what-ifs of C++. Could I have designed and implemented them well enough at the time? [...] What other work might have been left undone to provide the time to design and implement multi-methods?"
    - (p298f)
    - In general, whenever you feel the urge to know why some particular C++ feature was implemented, or was not implemented, or was implemented the way it is now, and if that feature pre-dates the standardization, you want to read D&E.
  - 멀티메소드가 만약 된다면,
    - \1. native개발자는 to를 오버로딩해서 사용한다. worldlang 개발자도 to를 오버라이딩한다. (반환형 Refer가 노출된다는 문제가 있는데, 이건 일단 패스)
    - \2. WorldFrx는 오버로딩된 to함수들을 클래스에 담아둘것이다.
    - \3. worldlang 개발자가 to()를 호출하면 멀티메소드에 의해서 저 to함수중 하나로 자동으로 매치된다.
    - \4. native개발자가 기존 to함수인 to(Class&)를 호출하면 3번으로 redirection 되게 한다.
    - 즉, 캐스팅에 대해서 따로 클래스를 만들 필요도, 배열로 관리할 필요도 없으며, 멀티메소드라는 좋은 아이디어도 함께 얻게 된다.
  - v 고찰로 알아낸 팩트
    - v 멀티메소드는 단점이 매우 많다
      - v 인자가 가지게될 가능성이 커지므로 당연히 모호성 오류가 증가한다.
      - v 동적에 타입의 결정되기 때문에 vtable을 적용할 수 없고 따라서 최적화가 불가능하다.
      - v 캐스팅 문제는 멀티메소드와 관련이 없다. 오히려 주어진 타입A가 hiding하고 있을 메소드까지 어떻게 dispatch하냐는 문제다.

- v 다른 언어는 사용자의 캐스팅을 어떻게 끼워넣을까?

  - 동적바인딩언어는 제끼자.
  - C#
    - class A {
      - static A explicit A(int a) {
        - A ret = new A();
        - a.setValue(a);
        - return ret;
      - }
    - }
  - *x 커피스크립트*
  - *boo (C#과 비슷) C# 계열이니까..*
  - *자바 (캐스팅 자체가 없다)*

- *[x] 1안 사용자가 캐스팅을 추가하는 방법*

  - 객체에 대한 배열을 사용한다. 직접 to를 오버라이드 하지 않게 한다. 사용자는 자신이 지원할 타입1에 대해서 캐스팅 클래스를 정의해야만 한다.
  - to를 직접 override하는 것 대비,
    - 장점
      - isTo() 함수를 작성할 수 있으며 기존대비 빠르다.
      - override시 사용자가 해야할 명시적캐스팅을 대신해줄 것이다.
      - to함수가 override되지 않고 하나의 함수안에서 for-loop으로 모든것이 될것이다.
      - else-if 구조 타파
    - 단점
      - 클래스를 매번 만들어야 한다. 귀찮다.
        - 람다로 대체는 불가능하다. 월드는 이 람다가 무슨 타입을 인자로 받는지까지는 알 수가 없기 때문이다.
  - 캐스팅 가능한 목록은 모든 객체가 공유해야 하므로 이것은 당연히 클래스가 소유하고 있어야 한다. 클래스가 초기화될때 사용자가 집어넣은 캐스팅 가능 배열을 메타클래스가 가져와야 한다.

- *[x] 2안 to를 오버라이드*

  - C++의 operator type()캐스팅은 모호성의 오류를 너무 많이 야기한다.
  - 그렇다고 사용을 안할 수는 없다. World는 managed <-> native의 간극을 wrapping으로 메꾸고 있고 wrapping의 핵심은 캐스팅이기 때문에 native환경에서 managed 데이터를 가져오기 위해서는 캐스팅이 필수이다.
  - 따라서 World는 custom타입에 대한 이를 지원은 하지만, 되도록이면 사용하지 않는 방향으로 간다.
  - 캐스팅은 to() 함수이다. 2종류가 있다.
    - virtual Reference<Node> Node::to(const Class&) const
      - 핵심함수다. Node는 Object 될 수있고 c++만의 타입일 경우에는 Classizer<HWND> 식으로 넣으면 된다.
    - 월드코드에 캐스팅 코드를 추가하고 싶다면 역시 to를 override하면 된다.
      - class MyModule (from Object가 생략되어 있다)
        - Node to(Class type)
          - [super.to](http://super.to/)(type) // 이렇게 해야 Object::to()가 실행된다)
          - if (type == Int)
            - return Int(getAge())
    - native에서 to를 override할 수도 있다.
      - class MyModule : public Object {
        - virtual Reference to(const Class& rhs) const {
          - if(rhs.isSubOf<HWND>())
          - //== if(rhs.isSubOf<Classizier<HWND>>())
          - //== if(rhs.isSubOf(Classizier<HWND>()))









### 묵시적형변환, 묵시적바인딩, 명시적형변환문법, 연산자 오버로딩에 관한 총체적인 컨셉

- 명시적 형변환은 to(타입) 으로 해결한다. native, managed 모두 to(Class&)을 define함으로써 형변환 지원을 추가 할 수있다. 그러나 되도록이면 권장하지는 않는데 모호성 오류를 야기시키기 때문이다.
- 참고 -> #명시적캐스팅
- 연산자 오버로딩에서 기존타입 + 커스텀타입의 형태를 지원하는 것은 까다로운 문제며, World는 클래스 확장기능으로 이를 해결한다. extend 키워드를 써야한다.
  - extend 키워드를 사용하는 이유는 World에게 "원본이 이거다. 원본을 먼저 파싱해서 읽어라"라는 힌트를 주기 위해서이다.
  - 원본이 바이너리로 최적화된 상태라면 함수의 순서에 크게 영향을 받는다. 클래스의 메소드가 확장되었을때 기존 메소드가 정상적으로 호출되기 위해서는 확장된 메소드가 뒤에 붙어야 한다.
- extend시 이미 기존 메소드가 존재하는 경우에는 에러가 발생한다.
- extend된 함수에서도 private 멤버를 접근할 수 있다. 이것은 C++의 "원천금지는 하지 않는다. 오직 실수하지 않게끔 한다"는 철학이 옳다고 판단했기 때문이다.
- 묵시적 바인딩에서 묵시적 형변환이 일어난다. (다른곳에서도 묵시적 형변환은 일어난다) 묵시적바인딩시 to함수(이건 명시적 캐스팅이다)가 아니라 묵시적캐스팅함수(미정이나, 아마도 toImplicit가 될것이다)에 의해서 캐스팅이 가능한가 아닌가로 판단하게 된다.
  - --> 이것은 to함수가 어떤 캐스팅을 지원하는가를 World가 알고 있어야 한다.
    World가 임의의타입 T가 어떠한 캐스팅을 지원하는지 알려면? 참고
- 고찰내용
  - 팩트1. 타입 A가 B로 캐스팅이 가능한가의 여부는 각 클래스의 개발자가 define해놓아야 한다.
  - 팩트2. 역(reversed)함수가 필요로 해지는 것들이 1개 이상 존재한다.
    - [A.to](http://a.to/)(B)와 더불어 [B.to](http://b.to/)(A)도 있어야 하며, A.operator+(B)와 B.operator+(A)도 마찬가지다.
  - 팩트3. 그러나 타입A가 외부에서 가져온 모듈일 경우 타입A는 타입B를 알지못한다. 이 경우 해결할 방법은
    - 1안 타입B에 타입A를 받을 수있는 역함수, B.operator+(A)와 B.operator_reversed(A)를 만드는 방법 - python방식.
      - 단점1. reversed된 함수를 사용자가 추가로 알고 있어야 하며
      - 단점2. World는 A.operator+()를 먼저 try하고 없으면 B.reversed_operator+(A)를 try하는 형태로 가야하기 때문에 약간의 퍼포먼스 loss가 있다.
    - v 2안 타입A의 operator+, to() 함수를 타입B와 함께 define해서 타입A 코드에 inject 하는 방법 - 비슷한게 C#에 있긴 하다.
    - 3안 아예 그냥 캐스팅, operator+지원하지 않는 방법 - java 방식
      - 단점1. 일부 상황에서 불편한게 사실이다.
    - 4안 클래스에 속하지 않는 일반 함수를 define해서 friend로 해결하는 방법 - c++방식
      - 단점1. 순수 객체지향언어에서는 클래스에 속하지 않는 일반함수라는게 없다.
  - 4가지 있다. World는 2안을 따라간다. extend 키워드를 추가함으로써 해결한다.
  - extend from 기능 (이름은 수정할 필요 있다)
    - 이미 존재하는 클래스A에 메소드, 멤버변수를 추가하는, 클래스의 내용물을 add 하는 기능이다.
    - import kukullza.print
    - class COut extend from kukullza.print



### 중요!!! --> 헷갈리기  쉬운 묵시적형변환과 연산자 우선순위 주체 <-- !!!중요

- 연산자 우선순위는 파서제네레이터에 의해서 결정된다.
- 묵시적형변환은 코드블럭이 생성되는 시점에서 몇번째 동적디스패칭을 해야 하는지 결정하면서 같이 정해진다.
- 동적디스패치는 호출해야할 함수의 프로토타입은 알고있는 상태에서 누구의 함수를 호출해야하는지가 정해진다.
- 시나리오 검증
  - class A
    - int foo(int)
    - float foo(float)
    - int foo(string)
  - class B
    - int foo(int) // 만약 foo(int)는 동일하나, 뒤에 반환형이 int가 아니라면 컴파일 에러가 난다.
  - foo(3) + foo(3) * (foo(2.5) - hoo("gogo")) / foo(2)
  - 가 있을때...
  - 파서제네레이터가 일한다. 연산자 우선순위를 바탕으로 해서 foo(2.5) - hoo("gogo") 가 먼저 파싱되고, foo(2.5)를 통해 미완성 코드블럭을 계속해서 생성한다. 정의된 함수자체는 올바르게 등록되어 들어간다. 미완성인 것은 오직 statement인 코드블럭뿐이다.
  - 다음은 syntaxer가 일한다. syntaxer는 생성된 코드블럭들을 linking + validation을 수행한다. foo("gogo")를 보고,





### 타입변환

- dynamic_class를 더 좋은 퍼포먼스와 활용성을 커스터마이즈 하는 것이 목표다.
- 클래스A -> 클래스B되기 위해서는 클래스A 안에 인자로 클래스가 들어오면 이걸 어떠한 형태로 내보내겠다는 코드를 적어놓는다.
- 클래스B는 클래스A의 계층 중 하나가 될 수 도 있고, 전혀다른 클래스가 될 수도 있어야 한다.
- x to() 결과 캐스팅이 된 StrongBind가 임시변수로 넘겨지며 caller는 이를 Weak 혹은 StrongBind로 선택할 수 있다.
  - x 왜 그런가? 왜 weak로 내보내야하지?
  - x 만약 weak로도 내보내야 한다면, Refer는 weak와 Strong 양쪽 다 안되나?
- 설계
  - class Instance {
    - Bind<T> to() const {
      - return Bind<T>(_onTo(TClass<T>()));
    - }
    - virtual Bind<Instance> _onTo(const Class& klass) {
      - return Bind<Instance>();
    - }
  - };
- 고찰 내용
  - 하나의 타입이 다른 타입으로 변환하려면 변화시키려는 주체가 지원해줘야 한다.
    - 예) Integer가 Float이 되려면 [Integer.to](http://integer.to/)<Float>()을 해야하고 Integer._onTo(Class&) 안에서 Float일때 어떻게 Float()을 생성해서 내보내는지 코드로 되어있어야 한다.
  - to로 변환할 수 있는 것은 Object를 상속 클래스에 한 한다.
  - to의 결과가 참조자가 되는 경우도 있는 반면, 새로운 객체가 나오는 경우도 있어야 한다.
    - View& someview = component[0].cast<View>()->getValue();
    - Integer age = component[0].cast<Integer>()->getValue();
    - TBind는 getValue() 할때 T&가 나온다. TBind<View>(*this)
  - 설계해보라
    - class Object {
      - template <typename T>
      - TBind<T> to() const {
        - TBind<Object> obj = _onTo(TClass<T>());
        - if obj // == isBinded()
          - return TBind<T>(obj);
        - return TBind<T>();
      - }
      - virtual TBind<Object> _onTo(const Class& klass) { return TBind<Object>(); }
    - };
  - to<T>() 는 필요할 지 모른다. to(Class&)는 필요하는가?
    - 필요 없다.
    - 다만 _onTo(Class&) 이런건 필요하겠다.
  - 문제점
    -  참조자로 나올 수도 있고 값으로 나올 수도 있다고 했다. 그런데 그 둘의 타입이 같아야 하므로 결국은 TBind<>로 나오게된다. 이것은 참조자로 나올때 참조카운트가 1개 증가되는 문제를 낳는다.
    - 참조자로 나올 때는 TWeak<>로, 값으로 나올때는 TBind<>로 나오되, 타입은 같게 만들되, 사용자가 사용할때는 확실하게 각각 동작되도록 하는 방법은?
      - 1안
        - TWeak가 범용적이므로 to()반환형은 TWeak다.
        - 남은 문제는 Float을 내보내는 경우는 밖에서 참조카운트 관리를 해줘야 한다는 점이다.
        - 반환형이 참조자라면 원본을 유지한채로 밖으로 꺼낼 수 있다.
        - 반환형이 TWeak&가 된다는 것이지.
      - [v] 2안
        - TBind<int> foo();
        - TWeakBind<int> ret = foo();
          - foo의 반환형은 TBinder. 하지만 임시변수이기 때문에 이 한줄이 사라지면 소멸된다. 즉 사용하는 쪽에서 임시변수를 TBind로 받을 것인지, TWeak로 받을 것인지를 선택할 수 있다.
          - foo()안에서 기존 인스턴스를 캐스팅만 달리해서 넘긴 경우라면, Weak로 받아도 아무런 문제없다.
          - 게다가 표준에 의하면 값으로 넘긴걸(rvalue) 레퍼런스로 받을 수 없다. (MSVC는 허용함. 그러므로 얘는 쓰지 말자) 그러므로 홀이 아니다.
      - [x] 3안
        - 전혀다른 인스턴스로 변환되는 건 없도록 한다.
        - Integer -> Float은 그럼 어떻게 할것인가.





### 명시적캐스트에서_다운캐스팅으로_반환된경우만_isConst함수가_영향력을_발휘한다.

- 참고 -> #명시적캐스팅





### 묵시적캐스팅

#### [v] str은 묵시적캐스팅에 해당하지 않는다.
* 산술연산인 int, char, byte, 등만 해당된다.
* 자바와 같은 방법이다. str도 포함되면 모호성 오류가 너무 많다는 걸 알았다.
* 단, 자바처럼 str + int 식의 + 에 한해서 묵시적 캐스팅은 지원해 줘야한다.

#### 기본
- 배경
  - 함수 디덕션 과정 (참고로 함수디덕션은 단순히 함수호출을 의미하는게 아니다. World는 모든 것이 msg의 송수신, 즉, 함수로 보기 때문에 생성자 생성과 연산자, if 같은 keyword까지 포함한 모든 것을 의미한다)에서 주어진 인자로 이 함수를 호출 할 수 있는 지를 판단하기 위해 타입의 교량역할을 하는 것이다.
  - 사용자가 함수 호출 인자로 명시적으로 캐스팅 하지 않아도 자동으로 되는 것을 말한다.
  - 함수 디덕션에서는 묵시적캐스팅을 적용한 결과, 호출이 가능할 것인지, 가능하다면 얼마나 우선순위가 되는지를 종합적으로 판단해서 가장 적합한 best fit을 찾아서 그걸로 링킹을 시도하게 된다.
- 묵시적캐스팅의 내용
  - \1. pretype들간의 명시적 캐스팅
    pretype 들 간 이다. 한쪽이 pretype인 경우는 해당하지 않는다.
  - \2. 업캐스팅
  - [미정] 3. 다운캐스팅
    지원하게 되면 멀티메소드를 지원하게 되는 것이다.
- 왜 pretype들간의 명시적 캐스팅만 지원하는가? 다른 타입은?
  - pretype들은 프로그램 내에서 가장 빈번하게 사용될 타입이다. 따라서 이들을 가지고 함수를 호출하는 경우도 많다. 매번 이러한 경우마다 사용자보고 명시적으로 함수캐스팅을 하라고 하는 것은 사용성이 너무 떨어진다.
  - C++의 경험을 보았을때 커스텀타입들에 대해 업캐스팅 정도만 묵시적으로 동작해도 사용에 크게 무리는 없었다.
  - 명시적 캐스팅을 모두 묵시적으로 동작하게 해버리면, 모호성의 오류가 너무 많아진다.
- 묵시적캐스팅을 위한 API가 필요한가?
  - 묵시적 캐스팅을 사용하게 될 알려진 장소는 현재 컴파일러(함수 디덕션을 하는 곳), Bidge component 2곳이다.
  - 설계의 관점에서 책임을 놓고 보면 캐스팅을 전담하는 것은 타입이므로 타입에서 API로 캐스팅을 두는 것이 많다.
  - 단, 이러면 API가 늘어나는 것이며 이 API를 사용자가 오버라이딩해서 함수 디덕션에 자신의 타입을 묵시적캐스팅되도록 추가할 수 있게 된다.
- Thing에 그대로 묵시적 캐스팅을 두기로 했다. (invisible)



### 기본 타입간의 #묵시적-캐스팅-정책

- 요구사항
  - \#worldlang-개발자가-to에다가-캐스팅을-추가하려면 에 따르면, 명시적 캐스팅은 생성자에 의해서 자동으로 추가된다.
  - 묵시적 캐스팅은 pretype 들에 대해서만 world가 미리 정의한 캐스팅이다. 즉, 사용자가 추가한 명시적 캐스팅들은 함수 디덕션에 반영되지 않는다.
  - \1. 이 우선순위가 어떻게 정해질 것인가
  - \2. 이 우선순위를 정하는 코드를 어떻게 어느 클래스가 소요하도록 할것인가가 중요해진다.







### 최소화된 묵시적 형변환

- 애매모호한것보다 번거로운게 낫고, 버거로운것보단 심플한게 낫다.
- built-in 타입들에 대해서 최소한의 묵시적형변환을 지원해준다. 그 이외에는 직접 개발자가 캐스팅을 코드에 명시해야 한다.
- 사용자가 작성한 타입을 부득이 다른 타입으로 변환한다는 것은 World가 적절한 타입으로 변경해준다는 걸 의미한다. 여기서 "적절함" 이란 일종의 AI를 의미한다. AI를 넣을 수 없다면 그걸 대신 할 수 있는 대중의 합의점에 해당하는 데이터가 필요로 해진다.
- 형변환 테이블에는 비슷한 그룹군이 담겨있다. 우선순위는 존재하지 않는다.
  - 원칙
    - 작은것은 큰것으로 흘러가는 것이 원칙이다. 그러나 사용성을 위하여 몇가지 예외를 둔다. (int -> float, char -> int, int -> string)
    - 예외적으로 숫자 그룹군끼리는 서로 호환된다.
    - 대부분의 built 타입은 string으로 변환될 수 있다.
  - int --> float, char, bool
  - float --> int, bool
  - char --> float, int, bool
  - bool --> int, string
  - result --> string, bool





### 함수와 참조자와 캐스팅 문제

- 시나리오
  - class A
    - void print(string a)
      - a += "msg = "
      - Console.out(a)
  - A a
  - string msg = "hello world"
  - a.print(msg) // msg = "msg = hello world"
  - a.print(35)
  - 문제는, 사용자는 void print(string)의 parameter a가 내부에서 set 되는 함수이니까 정확하게 string 타입으로 인자를 주지 않으면 제대로 값이 할당되지 않겠다..... 라는 걸 알기가 힘들다는 것이다. c++의 경우라면 a&나 *a로 적혀있을테니 쉽게 예상해볼 수 있다. 어떻게 할까?
- 구버전
  - Int를 받는 모듈이 있을때, int가 아닌 타입을 인자로 넣었다면 "컴파일에러가 나올수도 있고 나오지 않을 수도 있다". 이는 최소화된 묵시적 형변환 룰에 의해서 예외적으로 인정받는 경우를 제외하고는 명시적으로 사용자가 어떠한 타입으로 변환하겠다는 것을 명시하는 것을 권장한다.
  - 고찰내용
    - World dust 버전에서 가장 큰 문제였다. 상황을 설명해보지.
    - class MyModule : public Module
      - NETArgument<NEIntKey> age;
      - virtual type_result _onExecute() {
        - int& aage = age.getValue();
        - aage += 3
      - }
    - 보다시피 단순한 예제다. 하지만 만약 MyModule에게 넘겨졌던 인자가 String일때는 어떻게 되는가?
    - read를 위해서 string -> int로 하는 건 매우 단순하다.
    - 하지만 write는?
      - World는 모든 것이 메시지 위주로 돌아간다. 사용자가 작성한 코드도 결국은 메시지로 번역된다.
      - 따라서 aage += 3을 World 문법으로 작성하면 이는 결국은
        - aage.call("set", aage.call("add", aage, int(3));
      - 같이 번역되기 때문에 동작에는 문제가 없지만 결과적으로 메소드 안에서 set 한 값은 손실되므로 문제라고 착각 할 수 있다.
	  - 그렇다 손실자체를 걱정할 것이 없는게 손실이 일어나는 시나리오를 만날려면 주어진 인자가 occupiable 일때이다.
		인자가 sharable일때는 메소드 안쪽에서 건들이는 대상과 메소드 밖에서 파라메터로 넣어진 대상이 동일하므로 손실이
		일어날 수 없다.
	  - 그리고 인자가 occupiable인 경우는 애초에 메소드 안쪽에서 바깥쪽에 영향을 줄 수 없는 구조이다.
	    왜냐하면 메소드 안쪽에서 인자로 주어진 occupiable 객체를 포인터처럼 역참조해서 다룰 수가 없기 때문이다.
		예를들면 foo(int a) 가 있을때, foo의 구현이 설사 어떠한 것이건 같에 foo()에 임의의 변수 age)를 넣었다고 해서 그 age의
		값이 변하는 경우는 절대 없기 때문이다.

### [v] 캐스팅

#### [v] Q1. org 객체가 아니더라도 캐스팅 자리에 올 수 있는가?

```java
def myInt = 3
       void say()

1: int i1 = int 3.5 // ok
2: int i2 = 3 3.5 // 이상하지만 ok.
3: int i3 = i1 i2 // ok.
```

- 파서 구현으로는 문제 없다. 검증 완료.

#### [v] Q2. 2번이 가능하다는 것은, 3도 int라는 타입으로 친다는 것이다. 다음의 코드가 가능하다고 보는가?

```java
int i2 = 3 3.5
1: 3 i3 = 5
2: i2 i4 = 6
```

#### A1. 캐스팅의 정의

- ~~캐스팅은 타입이 바뀌는 것이다. 값이 바뀌는 것이 아니다.~~
- occupiable객체의 경우에는 값이 변한다.
- 컴파일러는 캐스팅시 to()를 호출할 것이며 어떤 타입으로 to()가 반환될지도 알고 있다.
  이를 기반으로 expr를 완성할 것이다. 따라서 컴파일러난 to()가 호출 가능한 것인지 알아야만 한다.
- 타입은 껍데기이다. refer가 기대하는 모양새이다. 기대하는 인터페이스의 집합체이다. 이런 API를 호출할 수 있다고 예측하는 도구이다.
- 만약 진정으로 사용자의 사용성에 있어서 org객체와 복사객체를 구분하지 않고자 한다면 (그리고 그럴려고 문법도 lower-case camel로 통일했지?) 허용해줘야 한다.

#### [v] Q3. 2번을 허용했을 경우, 과연 파싱이 가능한 것인가가 문제로 남는다.

- 간이로 GLR 파서 만들어서 검증 완료. 괜찮다.

#### [v] Q4. 배열을 두는 경우가 남아있다. --> 별도 항목으로 해결중.



#### [v] Q5.  3개가 연속되면 무슨뜻인가?

```java
tup2 = keyBase:2 returnKey:float null
```

- tup2 = ((tup<keyBase, int>) (returnKey:float) null) 과 동일하다

#### [v] Q6. 가독성면에서 안 좋다?

```java
1: objMy.foo([335 22.5, age 333.43], returnKey myKey)
2: objMy.foo([(int) 22.5, (int) 333.43], (returnKey) myKey)
3: objMy.foo([(335) 22.5, (age) 333.43], (returnKey) myKey)
4: objMy.foo([int 22.5, int 333.43], returnKey myKey)
```

- 더 더 많은 실제 코드가 필요하다. 이 작은 2줄로는 판별이 좀 어렵다.
- 의외로 캐스팅이 코드상에 많이 필요 없다. 잘 안쓰네 다들.
- syntax highlighting을 더 주면, 좀 더 구분이 쉬울 수 있다.
- **가독성을 위해 float,int,char를 상수로 표현하면, warning으로 간주하자.**

### 캐스팅의 문법

```cpp
part = Part Mouse.parts[1]
activity = Activity (Service system.get_service("Reckon")).get_activity()
```





















# 블록문

## 블록문 기본

- 블록문이라는 클래스를 만든다. 람다, 클로져, 함수는 블록문의 일종이 될 수 있다.
- 블록문은 execute()를 받으면 Scope의 index를 기억하고 가지고 있는 Statement들을 execute한다.
  - Statement들은 지역변수를 Stack인 LocalSpace에 push하게 된다.
- execute(Statements)가 끝나면 블록문은 기억했던 index까지 LocalSpace[n]을 release()하고 LocalSpace._setIndex(index)를 한다.
- 고찰내용
  - 블록문이 끝나면 블록문 안에 정의된 지역변수들은 LocalSpace[n].release()로 사라져야 한다.
  - 1안 LocalSpace는 placeBorder() reclaimBorder() 2가지 함수가 있다. reclaimBorder를 하면 가장 최근에 placeBorder()를 한 시점까지pop이 된다
  - v 2안 블록문이라는 클래스를 만든다.
    - 함수는 블록문의 일종이라고 하면 설명이 된다. 게다가 블록문 자체를 객체로 보내거나, 클로저나, 람다같은 거 구현할때도 지역변수 관리는 자동으로 되게 만들 수 있다.
    - 블록문은 시작 시점에서 Scope의 index를 기억하고, 끝나는 시점에 여기까지 release()를 호출하고 _setLength(index)를 해버린다.
      - 매번 pop을 하면 지역변수 인스턴스가 해제되지 않으며 속도 문제도 있다.
    - ~~이 사실에서, Scope는 전역공간이 낮은 인덱스, 지역변수가 높은 인덱스를 가지게 되는 Stack임을 알 수 있다.~~
      - ~~증명 : 왜냐하면 먼저 생긴 지역변수가 나중에 생긴 지역변수보다 먼저 죽는 경우는 생기지 않는다.~~
	- ReversedStack인 FIFO 구조를 갖게된다. 따라서 가장 먼저 push 되는 전역공간은 높은 인덱스를 가질 것이며,
	  지역변수는 낮은 인덱스를 갖게된다. 이는 지역변수의 인덱스를 항상 고정시켜서 최적화하기 위함이다.

##  블록문과 static

- 블록문 안의 static 변수들은 블록문의 것이다. LocalSpace에 index를 기억하고 나서 자신이 소유한 static 변수들을 추가한다.
- 이는 메소드가 실행전에 자신의 인자리스트와 자신의 메소드들을 미리 push해놓는것과 동일하다.























# 흐름 제어





## for

for문은 var가 true를 의미하면 루프를 지속한다. null은 0을 의미하며 0은 false를 의미한다.

```cpp
for <var>
for true
for is_success

for null
for false

a = Obj()
for a
    a = null
```

* 객체는 null이면 false, null이 아니면 true로 boolean값으로 묵시적 변환이 가능하다.
* 같은 이름을 가진 객체의 정의는 2번 이상 있을 수 없다.
  단 예외적으로 정의가 for  있는 경우는 예외로 한다.
* 위의 경우, 2번째 루프부터는 객체의 정의는 무시되며, 값만 객체에 할당된다.

```cpp
def b
    n = 0

myA getMyA(b)
    retfun ++b.n < 5 ? myA() : null;

for a := getMyA(b.n)
    c.out("n=$b.n")
```

```java
BufferedReader reader = new BuffererdReader(new InputStreamReader(assets.open(srcOfAsset)));
FileWriter writer = new FileWriter(dst);

// 위와 같을때 아래 4줄을 잘 보자.

String line = writer.readLine();
while (line != null) {
    writer.write(line);
    String line = writer.nextLine();
}

// 혹은 위의 4줄은 다음과 같이 3줄로 압축 할 수도 있다.

String line;
while ((line = writer.readLine()) != null)
    writer.write(line)
```

* 위의 자바 코드는 world에서는 다음과 같이 압축한다.

```cpp
reader := bufferedReader(inputStreamReader(assets.open(srcOfAsset)))
writer := fileWriter(dst)


// 자바의 4줄 혹은 3줄이 다음과 같이 2줄로 압축된다.
// 중괄호도 없으며, 괄호 갯수도 적어 훨씬 깔끔하다.

while line := writer.readLine()
    writer.write(line)
```


for in은 별도의 문법이다.
<var>의 getiterator()를 호출하여 가져온 뒤, 자동으로 next를 호출한다.

```cpp
for <a> in <b>
    if b has not getiterator() then error.
    if a is null then break
```

### 구현

일반 키워드들은 별도의 global 메소드로 존재한다. 거기에 넣어버리면 된다.



## [x] ~~switch 대체~~
## switch
* is 는 switch 안에서 사용한다.
* is 는 if it ==, 혹은 if it 과 같다.
* switch 안에 다음 depth에서 반드시 is가 나와야 한다.

```cpp
with name
	is "wow": return rOk
	is "no"
		name = "err found!"
		// no 일 경우에도 is 5는 검사한다.
	if it.has('a')
		c.out("wow!")

	c.out("중간에 다른 코드가 자유롭게 나올 수 없다.") // X

	is 5: return
	is > 7: return
```

#### 단점
* 조건이 2개 이상인 경우 표현 불가.
* break가 없음.
* break를 빼고 싶다면 range에 매칭될때의 조건을 넣을 수 있어야 한다.


### [x] 1안
```cpp
with name
	case "wow": ..
	//if it == "wow": ...

	is in {"wow", "abc"}
	//elif it in {"wow", "abc"}
```

### [] 2안
```cpp
with name
	is "wow": return rOk
	is in {"abc", "cbd"}: return rOk
	is 5 // 5일때는 아무것도 안함.
	is < 7 & is > 5
		return rOk
	else
		....
	if it == "wow" // if 문도 나올 수 있음.
	is++
	is + 5
	is == 5
	is != 3
	is.foo()
	is == "wow"
```
#### 기능
* is 는 with된 식별자를 기준으로 함.
* else 문은 없어도 됨.
* is는 본질적으로 else if 와 같음. if문도 같이 나올 수 있음.
* 2가지 패턴중 하나가 매치됨
	* 패턴1: is <식별자:상수, 변수>
		* 이 경우 (else) if is == <식별자> 로 판정함
	* 패턴2: <맨 앞에 is가 들어간 expr>
		* 패턴1을 제외한 모든 expr의 경우는 is를 (else) if it 으로 치환한다.
* bison은 <expr>을 파싱하기 전에, 바로 stmt를 생성하지 않고 부모에게 미룰 수 있어야 한다.


##### ~~만약 if 가 도중에 나온다면 : switch 바로 다음 depth에서 if는 나올 수 없다~~
* is는 무조건 else if로 치환되는가?
* 그렇다면 is 다음에 if 가 나오고 그 다음에 is가 나오면 어떤 동작이 되는가?
* is 뒤에 else가 오고 다시 is가 나오면?


### [] 3안
* is 는 무조건 if it 으로 치환된다.
* 중간에 if가 나올 수 있다.
* is는 여러개의 문이 동시에 적용될 수 있다.
* break를 써줘야 한다.

```cpp
with name
	is == "hello" // is "hello" 처럼 할 수도 있다.
		....
		break
	is > "hello"
		....
	if it.has("llo")
		....
	is "hello"

```
#### [] 문제: with 안에서 break가 아니라 if 안에서 break가 되었다.

* 따라서 if 문만 벗어나게 된다.


## [v] ret문
* 복합 키워드라는 걸 만들었다.
  * 키워드 2개 이상을 연이어 붙여서 조합하는 키워드다.
* ret는 다음과 같이 조합할 수 있으며 기본적으로 기능은 동일하다.
  * ret     하나의 블록문을 벗어난다. 값도 반환한다.
  * retif   하나의 if 문을 벗어난다.
  * retfor
  * retfun  하나의 함수를 벗어난다.

```cpp
  str foo(str name)
    out := with name
      is "hello": retif it + " world"
      if name.has('s')
        retwith "error"
      else
        "nothing"

    c.out("out is $out")
    retfun out

    (int, "") temp()
      ret (3, "wow")
```

## [v] again
* for 루프 한해서 루프를 한번더 돈다.
* 블록문을 다시 실행하게 하는 걸 생각해봤으나, 사실상 goto와 기능이 비슷해져서 취소했다.
```cpp
   b = for a in ("wow", "jo", "what"): with a
      is "wow": retfor "wow"
      is "jo": sum += it
      else
        again // 한번더 루프를 돈다.
```


## ~~break, continue, return~~

* break는 블록문 1개를 반환값과 함께 벗어난다.
* continue는 블록문 처음으로 되돌아간다.
* return은 메소드를 반환값과 함께 벗어난다.

### ~~return을 break를 이용해서 키워드를 합칠 수 없을까? : 안된다.~~
* 안된다.
* 블록문과 메소드는 결정적인 차이가 있는데, 블록문과 달리 메소드는 caller가 누구인지
  100% 확정이 안된다는 것이다.
* 따라서 로직의 구분이 메소드 단위로 이루어져야 하기 때문에 어느 블록문에서건 메소드 단위로
  값을 반환하고 종료하는 상황이 꼭 필요로 해진다.




## [v] switch
```namu
// 기존문법
with name
    is "wow": doSomething()
    is "hello": retfun

그러나 with와 switch를 같이 쓰는 건 해보니 굉장히 복잡해진다.
왜냐하면 with를 이미 사용한 상황에서 switch만 하고 싶은데, with로 인해서 API가 다시 덮어지는 현상이 있었기 때문.


// C++, 자바
switch(integer only)
{
    case 1: return "wow"; break;
    case 3:
    case 4:
    case 5:
        return "middle"; break;

    case 6:
    case 7:
    case 8:
        return "good"; break;

    default:
        throw Exception();
}

// python: 없음. if-else
if age == 1:
    return "wow"
else if age == 3 or age == 4 or age == 5:
    return "middle"
else if age == 6 or age == 7 or age == 8:
    return "good"
else
    raise Exception()



// kotlin:
when(age)
    1 -> return "wow"
    3,4,5 -> return "middle"
    else -> throw Exception()
    in 6..8 -> return "good!"


// swift:
switch age {
    case 1:
        return "wow";
    case 3:
        fallthrough;
    case 4:
        fallthrough;
    case 5:
        return "middle";
    case 6...8:
        return "good";
    default:
        throw Exception();
}


// ruby:
case x
    when 1..5
      "It's between 1 and 5"
    when 6
      "It's 6"
    when "foo", "bar"
      "It's either foo or bar"
    when String
      "You passed a string"
    else
      "You gave me #{x} -- I have no idea what to do with that."
end



// 현재안:
switch x
    is == 6: "6"
    is == "foo": "foo"
    is == "String": "str"
    else
        "others"
// 단점:
// 결국은 is라는 새로운 키워드를 추가했다. (키워드2개추가)
// 활용도는 더 떨어진다.
// 만약 키워드를 줄일 수 있는 방법을 찾으면 더 좋고, 그게 아니라면 다른 언어와 비슷한 활용도를
// 갖도록 한다.



// [v] 1안: if a == 1 || a == 2를 축약하는 방법을 제시한다. 그리고 if 를 쓴다.
// 1-1안: 컨테이너를 쓴다.
// 단 elif 키워드를 추가해줘야 한다.
if (1, 3, 7).has(a)
if 1..2.has(a)
if {n|1..2}.has(a)
if ("wow", "foo", "good").has(a)

if x == 1: ret "wow"
elif (3, 4, 5).has(x): ret "middle"
elif 6..8.has(x): ret "good"
else: ret res()
// 충분히 간략화 되었음을 알 수 있다. 이걸로 간다.
```






























# 메소드
* 정의, 호출, 캐스팅을 사용하고 있는 점

## Method 는 클래스다.

- Object는 독립적인 ObjectSpace 유지하는 인스턴스적인 개체를 의미한다.
- Object는 개개의 인스턴스마다 고유의 멤버를 소유 할 수 있고, 객체 통틀어서 공유하는 멤버도 있을 수 있다.
- 사용자는 def 문법을 통해서 최초의 객체를 정의할 수 있고 이를 origin 객체라고 한다.
- 모든 origin객체는 복제를 통해 복사본을 생성할 수 있고 모방 하고있으며, 복사본은 일부 멤버는 origin 객체로부터 멤버를 공유하며 일부는 복사본 고유의 멤버를 소유한다. 
- 객체의 공유 멤버로써 메소드가 있을 수 있다.
- 메소드는 객체로 정의 될 수 없다.
  - 메소드는 블록문의 일종이다.
  - 왜냐하면 메소드와 블록문은 공유 되는 것이며, 메소드 실행시 멤버가 생성되어야 하고, 이 멤버는  메소드 인스턴스의 라이프 사이클과 관계없이 매 실행이 끝나면 소멸되기 때문이다.
  - 값을 가질 수 없으나, 메소드는 가질 수 있다.
  - **동작시 LocalSpace에서 관리된다. --> #Method는_ThisPtr이_꼭_필요하다_어떻게_얻을_수_있을까 참고**
- static 클래스는 존재하지 않는다. static 메소드 역시 존재하지 않는다.
  - 이는 개념을 쉽게 만들어서 learning curve를 낮추기 위함이다.
- Nested Things
  - ~~클래스가 Nested 된 경우, 이 클래스는 owner클래스에 대한 어떠한 정보도 갖고 있지 않다.~~
  - Nested 클래스는 자동으로 outer 클래스의 객체에 대한 this를 갖게 된다.
  - 모든 Nested 클래스로 정의된 객체는 protected 접근자를 자동으로 갖는다.
  - 모든 Nested 클래스로 정의된 객체는 반드시 outer 클래스의 객체가 있어야 생성된다.
    - [v] FAQ. 자동으로 NestedClass는 OwnerClass의 this를 갖도록 하면 더 편하지 않을까?
      - ~~NestedClass가 OwnerClass와 1:1로 사용되리란 법이 없다. 극단적인 예를들면 OwnerClass는 1000개가 instance가 나왔을때 random확률로 1개의 NestedClass가 나오는 상황도 있을 수 있다. 또는 OwnerClass는 instance 나오지 않았는데 NestedClass만 나오는 상황도 있을 수 있다.~~
  - ~~외부에서도 NestedClass의 객체를 만들 수 있다. _ prefix가 안붙어있다면 말이지.~~
- Exception 핸들링또한 Nested Method를 통해서 돌아간다. 그 함수안에서 발생된 Exception은 그 메소드의 _except() 로 넘겨지게 된다.
- ~~Method는 World의 Class가 될 수 없다. (단, 객체의 일종이긴 한것이다. World의 클래스는 TClass<T>로 생성되어야 한다). 왜냐하면 멤버변수를 가질 수 없고 (멤버변수를 갖기 위해서는 별도의 getVariableMembers변수가 필요하다) 객체를 만들 수 없기 때문이다.~~
- 그러나 Method 또한 Node이기에 Node 클래스들이 갖는 재귀적 구조(Node가 Node를 갖는 구조)를 띈다.
- 메소드는 Object가 아니므로 객체마다의 멤버는 가질 수 없으나 공유멤버는 가질 수 있다.
- 고로 메소드는 역설적이게도 또 다른 메소드를 Member로 가질 수 있다.
  - Nested 메소드 또한 이러한 구조를 띌 수 있기에 가능한 것이며,
  - 기본적으로 Method 클래스는 부모 클래스로부터 상속받은 메소드을 가지고 있다.
    - 다만 이렇게 할 경우, Method.getName().getName().getName().... 식으로 호출이 무한정 가능하게 되므로 이를 막을 장치가 필요하다.
- 고찰내용
  - Nested Method에서 확장된 아이디어인데, 이게 생각보다 괜찮다.
  - 먼저 다음의 아이디어에서 출발한다.
    - World에서 보여지는 Method는 사실 Class다. Method는 다만 변수를 가질 수 없으며,  Method를 선언됨과 동시에 자신을 소유한 클래스에게 등록되며, 함수가 호출될때 인자1로 클래스의 thisptr를 가지고 있으며, call(args)라고 하는 실질적으로 명령을 수행할 수 있는 창구가 디폴트로 있다는 점이다.
    - ~~따라서 설계상, class Method : public Class 가 된다.~~
    - ~~Method는 클래스이므로 virtual void onIn(), onOut() 이런걸 재 사용하게끔 할 수 있다.~~
  - Nested Method
    - ~~method도 클래스이므로~~ Method에서 메소드를 정의할 수 있다. thisptr는 최초 object가 call을 받은시점에서 삽입되어있으므로 Nested Method 안에서도 thisptr은 그대로 유지 및 참조가 가능하다.
    - 다형성을 사용하면 여러가지 이벤트 핸들링이나 exception처리를 메소드에서 할 수 있다.
    - 중첩메소드는 Owner메소드의 지역변수를 참조할 수 있다. --> Scope알고리즘 참조
    - 중첩메소드에서 다른 중첩메소드를 호출 할 수 있는가? --> 네.
      - 룰을 정한다.
      - class MyClass
        - void foo()
          - int a = 0, c
          - console.out("foo")
          - void _boo()
            - int a = 1, b = 0
            - console.out("boo")
            - void _koo()
              - int a = 2
              - // 여기서 c를 접근할 수 있는가? --> 네.
              - // 접근할 수 있다면 여기서 a의 값은 얼마가 되는가? --> 2. LocalSpace에서 top부터 검색하니까.
              - // 그렇다면 여기서 d에 접근 할 수 있는가? --> 모른다. 이 함수가 언제 수행될지는 돌려봐야 아니까.
              - console.out("koo")
              - void _hoo()
                - console.out("hoo")
          - void _goo()
            - console.out.("goo")
            - // 여기서 boo를 호출 가능한가? --> 가능하다. 함수내의 모든 식별자는 me._goo()처럼 me에서 찾게 된다. (= 실제로 me에게 call을 하는게 아니라 scope에 이미 그렇게 들어있는 것이다) me에 없을 경우, 자연스럽게 this에서도 찾게 되며, 만약 this와 me에 둘다 있는 경우는 me로 인식되게 된다.
            - 이는 함수 내의 블록문이 중첩된 경우, 블록문 밖과 안에 같은 변수명의 변수가 있는 경우 묻지않고 가장 안쪽 블록문의 변수로 인식하는 컨셉과 동일한 것이다.
          - int d = 25
    - 중첩메소드는 public private 제한은 없다. 따라서 다음의 코드도 맞는 코드다.
      - class MyClass
        - int foo()
          - int add(int a)
            - return a + a;
          - int a = add(5)
          - return a
        - int boo()
          - **int another_integer = foo.add(5)** // ok.
          - return a
      - MyClass.foo(void).add(5) --> #nonstatic메소드를_static처럼_사용한_경우는_어떻게_되는가  참고
    - 중첩메소드는 execute()를 가지고 있는 클래스이다. 당연히 execute() 내에 자신의 private 메소드들을 호출 할 수 있다.
    - Exception 문제를 해결가능.
      - class MyClass
        - int transfer(char[] packet)
          - void _init(char[] packet)
            - packet  = new char[255]
            - void _except(MemoryException e)
              - e.printStack()
              - ERR("ERROR!")
              - packet = new char[255] // try again
              - void _except(MemoryException e)
                - ERR("failed again. quit.")
            - packet
    - 중복되는 함수를 작게 빨리 만들고 scope를 제한시킴으로써 가독성 높임, 여기서만 사용하는 세부로직을 명시적으로 나눔
    - 잘생각해보자. Method는 객체처럼 동작한다. Method도 Method를 가지고 있다면, 이것은 마치 진짜 객체가 아닌가? Nested Method와 Nested Class의 차이가 무엇인가?
      - class MyClass

### Method는 Object가 아니다.
* Object의 정의는 객체마다 고유의 member(인스턴스 멤버)를 가질 수 있는 것을 말한다.
	* 인스턴스 멤버는 lifecycle이 객체와 일치된다.
* Node는 shared 이든 인스턴스 멤버든 아무튼 member를 가질 수 있다는 것이다.
* Method는 Method 객체가 설사 clone() 되더라도 각 객체마다 인스턴스 멤버를 가져야 하는 요구사항이 없다.
  대신에 static 변수같이 모든 Method 마다 공유하는 shared 멤버는 있어야 한다.
* 따라서 Method는 Object와 동작이 상이하나 Node의 일종인 것은 맞다.
* Methods는 블록문의 한 종류로 볼 수 있다. Block문은 Statement의 한 종류다.
  따라서 Node <-- Expr <-- BlockExpr <-- Method 의 상속구조가 된다.


## Method의 생성과 초기화

- Method는 생성과 동시에 초기화가 일어난다. 그러나 메소드의 생성은 lazy하게 이루어지기 때문에 무한 재귀에 빠지지 않게 된다. (반면 클래스의 초기화는 처음에 일괄적으로 진행된다)
- Method의 멤버구성은 초기화는 자신의 소유자의 getMembers()가 호출되는 순간 이루어진다.
  - 초기화가 이루어지는 일반적인 흐름은 이렇다 > Object::getMembers() > getClass().getMembers() > TClass<...>::getMembers() > T::onInitializeMethod() > return Method<MyC++Method>()     --> TClass<...>::getMembers()가 초기화 된것이다.



## 어떻게_하면_이_메소드를_호출할_수_있는지_아닌지를_알_수있을까

- 바로 call을 해버리면 곤란하다. 왜냐하면 interpreter는 validation에서 모호성 오류를 검증하기위해 이 msg를 받을 수있는 곳이 1곳인가를 반드시 짚고 넘어가야 하기 때문이다. 따라서 기존의 컨셉인 "일단 call해서 안되면 return error 하라"는 통하지 않는다. 잘못하면 2번 각기 다른 곳에서 동작이 될 수 있다.
- x 1안 flag를 사용해서 "1번 이미 동작했다로 알린다. --> 1번째는 이미 실행이 되게 된다.
- v 2안 isCallable()을 만들고, casting을 매번 수행한다.
- x 3안 casting없이 알아내는 방법
  - 코드가 복잡해지고, 사용자가 작성하는 로직이 어려울 것이다.



## Unique성을_구현하는_방법

- \#Method가_만약_Type의_일종이_아니라면  과 관련이 있다.
-  Type과 같이 상속을 통해서 Unique를 표현하는것이 아니라 인스턴스가 누구에게 속해 있느냐로 Unique를 결정한다.
- 시스템에 1개만 존재한다는 것은 다음 2가지 조건을 만족해야한다.
  - \1. scope 밑바닥에 추가되어야 한다. 왜냐하면 scope를 통한 접근이, 이것들을 접근할 수있는 유일한 방법이기 때문이다.
  - \2. 런타임 도중 사용자의 의한 이것들의 복제 및 인스턴스 생성을 막아야한다. 이는 C++과 World 양쪽에서 모두 방어가 되어야 한다.
- Unique성을 갖는 대부분의 것들은 Class와 그 밑에 있는 것들이다. 이것들은 C++ 코드 자체에 생성자가 private로 막혀있으며 오직 몇 friend 클래스에서만 마음대로 추가 및 생성이 가능하게 되어있다.
- World코드에 의해서 Node의 인스턴스 가 생성되는 과정은 항상 Class객체로부터 Object를 생성해 내는 것이다. 그리고 Class.getClass()를 하면 Class 자체가 나오며, Class는 ADT이기 때문에 instantiate()는 null을 반환한다.
- 주의 - 전역변수는 Unique 성이 아니다.
  - \1. 이것은 일단 class가 아니며(이를테면 Class, Method 모두 클래스다) 그말은 복수의 객체가 나올 수 있다는 것이다.
  - \2. 같은 타입으로 복제가 될 수있다.
- 고찰내용
  - Unique성이란?
    - 시스템에 1개만 나올 수있다는 것을 시스템에서 보장해주는 것이다.
    - 정확히 말하면 World에 의해서 생성은 가능하지만 사용자는 이걸 생성할 수 없고, 사용은 가능해. 라고 말해주는 것과 같다.
  - 고찰을 통해 얻은 팩트
    - **1. class는 const여야 한다.**
    - **2. overriding때문에, call의 반환값은 확정되야 한다. 즉, 1번에 의해서 class로부터는 const인 call()만 호출가능해진다.**
    - **3. 멤버변수가 static인 것은 sharaable이나 occupiable과는 관계가 없다.**
  - 어떻게 구현하는가?
    - C++적으로 모듈개발자가 Unique속성을 가진 것들을 생성이 불가능하게 할 수 있다면 World개발자는 당연히 못하게 된다. 그러므로 C++적으로 생각한 뒤에, 아귀를 맞춰나가자.
    - 1안 const
      - unique를 갖는 것들은 Class, Function, 클래스안의 멤버변수 들일 것이다.
        - 착각하면 안된다. 전역변수, static변수는 해당되지 않는다. 이들을 Type이 아니니까. 모든 변수는 중복정의가 되지 않는다.
      - Function, 멤버변수는 모두 Class에서 나오는 것으로 결과적으로 우리는 ClassManager에서 반환되는 것들을 const로만 반환하면 된다는 것을 알수 있다.
      - static변수는?
        - Unique성은 Type클래스가 아니라 const로 반환되는 ClassManager를 통해서 구현되어야 한다. 그러나 static은 Class 안에 속해 있으면서 언제든 그 갑이 외부로부터 변경될 수 있어야 만 한다.
        - 생각을 해보자. World개발자가 static변수를 참조하려고 한다면 scope를 통해서 Class에 접근하고, 그 안에 있는 static변수를 접근할것이다.
          - stmt {
            - .thisptr = stmt {
              - .thisptr = scope
              - .name = "getMember"
              - .args = {"MyClass"}
              - }
            - .name = "getMember"
            - .args = {"my_static_variable"}
            - }
          - call()은 2종류가 있다.
            - const TStrong<Node>& call(...) const;
            - TStrong<Node>& call(.....);
            - 물론 const버전을 쓰면 static 변수를 접근 할 수 없지만, 최초 scope에 접근할때는 nonconst call()를 쓰게 될 것이다. scope는 const가 아니니까. 따라서 이후로 호출되는 모든 것들도 사실은 const가 아니게 된다.
            - 고로 악의적인 목적을 가진 모듈개발자는 런타임에 class의 구성을 마음껏 변경할 수 있게 된다.
      - Method는 정말 const라고 생각하는가? method가 execute되면 Method가 가지고있는 멤버변수를 건드리지 않을까? 이를테면 반환값을 저장하는 멤버변수 같은거.
        - 그렇다고 해서, 클래스는 변경되선 안된다. 그러니 클래스가 const인거는 맞다.
        - 1안 mutable?
    - 2안 class => const. class.members => const reference. objects => nonconst.
      - 클래스는 const로만 제공된다. 클래스의 멤버들도 모두 const다.
      - 그러나 클래스 멤버들이 가리키고 있는 실체(object. 즉, Method, static변수)는 nonconst다.  nonconst를 const reference가 가리키고 있는 상황이지.
      - --> 안된다. 결정적으로 이문제는 sharable과 occupiable과는 관계없다. sharable이 static일 수도, occupiable이 static일 수도 있다.
    - 3안 call안에서 어떤건 const로, 어떤건 nonconst로 반환할 수 있을까?
      - 안된다. overriding을 하려면 타입이 확정되야 하니까.
    - 4안 static 변수는 class가 아니라 Object에 있게 한다면? 그리고 메소드안의 반환값은 mutable.
      - 네. 모든 문제를 해결할 수 있을것이다. static이 좀 낭비지만.
      - c++에서 클래스의 static변수에 접근한다면?
        - 그럼 진짜 static변수에 접근하는 것이다. 이 문제와 관련 없지.
          -
      - static변수가 여러개가 될때마다 모든 객체들은 여러개를 들고 있어야 한다. 메모리 낭비.
    - v 5안 보안 문제는 나중으로 미루고 일단은 classmanager는 class를 그냥 공개해버린다.
    - \#static변수는_어떻게_구현하는가  로 해결하였다.



## Method는_ThisPtr이_꼭_필요하다_어떻게_얻을_수_있을까.

- class Message {
  - mutable TStrong<Object> _origin;
- }
- class Object {
  - call(const Message& msg) {
    - bool is_updated = false;
    - if(msg._origin == null)
      - msg.getOrigin() = *this
      - is_updated = true
    - .... call to members ....
    - if(is_updated)
      - msg.getOrigin() = null
  - }
- }
- Message msg(......)
- Object obj.call(msg) // mutable이니까 인자가 const Message& 라도 괜찮다.
- obj2.call(msg) // 같은 메시지를 다른 객체에 던져도 잘 동작한다.
- Method m = .....
- m.call(msg) // 안에서 msg.origin = null이므로 에러를 탐지할 수 있다.
- Method static = .....
- static.call(msg) // 안에서 msg.origin을 안쓸것이므로 잘 동작할것이다.
- 고찰내용
  - 고찰을 통해 알아낸 팩트
    - **1. Object에서 Method로 전파될때 Method는 엄밀하게 말해서 Object들에서 공유하고 있는 것이므로 thisptr를 알아야할 필요가 있다. 일단 Method가 진짜 모듈개발자가 정의한 c++함수를 호출하고 난 뒤에는 고 안에서는 thisptr가 필요없다. 오직 Object->Method 로 call되는 구간에서만 thisptr가 필요하다.**
    - **2. 해당 메소드가 실행중일때만 메소드에 넘겨진 thisptr가 누구인지 알 수있어야 한다. 고로 thisptr자체는 method가 소유하고 있어서는 안되며 이사실을 외부에 알려서도(접근자메소드로 만들어도)안된다.**
    - \3. 방법은 크게 2종류로, 하나는 call을 하면서 같이 thisptr를 넘기는 방법이며, 2번째는 call이외의 다른 경로(전역객체든, 접근자든)로 thisptr를 따로 전달하게 하는 방법이다.
    - \4. call(const msg&) 에 건내지는 msg는 어떠한 상황에서도 수정되어서는 안된다.  --> #Message는_name_thisptr_args를_모두_하나의_Array로_구성한다? 참고. 따라서 thisptr 자체는 msg에 들어있어서는 안된다.
    - \5. Native에서 Method 객체를 가지고 있다가 Object 개입없이 바로 호출이 가능해야 한다. 즉, 외부에 thisptr를 주입함으로써 호출할 수 있어야 한다.
      - 예) void A::foo(Method& m) {
        - m.call(thisptr, msg)
      - }
  - *x 1안 모든 Node는 Owner를 갖고 있다고 하며, Method는 부모를 갖고 있으므로 이것은 Object이거나 또 다른 Method일 것이다. 이걸 활용하자.*
    - Method의 Owner는 thisptr가 아니라 Class다.
    - 가장 설계상으로 합리적인 안이지만 동시에 ptr를 set하는 것은 메모리 및 퍼포먼스 이슈가 있기 마련이다. 다른 용도로도 활용한 용도가 무진장 많다면 이걸 할 수 있을것이다.
  - *2안 Stack&Scope를 사용한다.*
    - 그러나 이경우, Stack을 사용하지 않는 Method는 누구의 Object인가는 알수 없다.
      - Limitaion으로 두는 수밖에 없다.
    - Object는 어짜피 ObjectSpace 구성을 위해서 자신을 Scope에 등록을 해야한다. 따라서 고때 같이 scope가 object를 가지고 있으면 될 것이다.
    - API명은 scope::getRunningObject() 정도로 하면 될까? 이건 좀 더 생각해보자.
  - *3안 그래서 나온게 Message안에 argument로 ThisPtr를 넣자는 것이다.*
    - --> #Message는_name_thisptr_args를_모두_하나의_Array로_구성한다  참조
  - *4안 msg안에 .thisptr로 따로 빼놓자.*
  - *5안 call의 인자를 하나 더 받게 해서 거기다 넘기자.*
    - static 함수같은 경우에는 thisptr를 사용하지 않는다.
  - *x 6안 Method에 추가적으로 set을 하게 한다.*
    - Arguments는 이런식으로 전달하게 하고 있다?
      - 그건 별도의 함수이다. DynamicBindingExpr을 통해서 들어오는 call(Message&)는 name이 "execute" 일때 execute()로 빠지도록 하고 있다. 즉 제대로 Message로부터 받도록 되어있는 것이지 추가적으로 set을 할 필요는 없다.
  - *x 7안 Message는 static으로 thisptr를 담게 한다.*
    - scope와 다를건 없다. 다만 그 위치가 message로 옮겨지게 한다는 것.
  - *x 8안 Message origin 알고리즘 --> 이 방법은 Native에서 메소드를 호출할 방법이 없게 만든다.*
    - class Message {
      - mutable TStrong<Object> _origin;
    - }
    - class Object {
      - call(const Message& msg) {
        - bool is_updated = false;
        - if(msg._origin == null)
          - msg.getOrigin() = *this
          - is_updated = true
        - .... call to members ....
        - if(is_updated)
          - msg.getOrigin() = null
      - }
    - }
    - Message msg(......)
    - Object obj.call(msg) // mutable이니까 인자가 const Message& 라도 괜찮다.
    - obj2.call(msg) // 같은 메시지를 다른 객체에 던져도 잘 동작한다.
    - Method m = .....
    - m.call(msg) // 안에서 msg.origin = null이므로 에러를 탐지할 수 있다.
    - Method static = .....



## 타입 포함된 함수ptr를 어떻게 world frx에서 구현할 수 있을까?

- 이미 Expr & stmt는 target이 Node이기만 하면 validation을 한다. 그러므로 함수ptr라 하더라도 Node것처럼 validation을 돌리면 된다.
- 고찰내용
  - v validate를 먼저 해결해야 한다.
    - validate는 friend로 선언된, classManager안에 있는 별도의 visitation에 의해서 수행된다.
    - call()에서 사용된 _precall, _prerun을 visitation 안에도 동일하게 사용한다.
  - world의 함수포인터인데이 이 함수포인터는 이러한 인자타입들을 가지고 있다는 걸 어떻게 컴파일러에게 알려줄수 있을까? 어떻게 컴파일에러가 나도록 할 수 있을까?
  - ptr가 아니라 일반 함수가 컴파일에러가 나는 과정을 먼저 clearify하자. 함수호출은 stmt(expr)이 담당한다. 고로 exprValidation.visit()함수가 수행되면
    - \1. expr이 들고있는 args 자체에 문제가 있는지 확인함.
    - \2. 현재 구성된 scope에서 호출할 method를 찾아서, 그것에게 args를 set하는 식의 scope를 제어하는 Expr._precall()을 여기서 호출함.
    - \3. visitor는 Expr가 들고있는 Strong target을 재귀적으로 탐색한다. 하지만 그렇다고 해서 target이 가리키는 원본까지 visitation을 하는 것은 아니다. 이러한 차이를 항상 염두해 두고 expr같은 TVisitation들은 어디까지 직접 재귀적은 visit을 해야하는지를 생각해야 한다.
  - 결국은 Expr이다. Expr.target = methodptr가 들어있을 것이다. 즉, 기본적으로 함수ptr에 대한 validation 기능이 있는 것이다. 이는 Expr입장에서 target이 base가 Node로 보고 있기 때문이다. Node기반으로 validation을 하기 때문에 target이 methodptr인지 아닌지 상관없이 동일하게 validate가 가능하다.





## 메소드ptr 정의하는 Stmt 클래스를 구현하라

- 월드 : 메소드 delegator를 생성할때 this를 넣어줬는가 아닌가를 "컴파일타임"에 판단하여 적절한 MethodDelegationExpression을 생성한다. this를 넣어준 경우는 CreateMethodDelegationExpression의 target이 그 this로 채워질 것이다.
  - class MethodDelegation
    - target = scope["a"] **// <-- Stmt가 이값을 이렇게 채우면 된다.**
    - Weak<Method> to = ...
- class A
  - void print(int a)
    - ...
  - void go(int b)
    - ...
  - static void no(int c)
    - ...
- A a
- void(int)[3] fptrs = {a.print(int), a.go(int), [a.no](http://a.no/)(int)}
- fptrs[1] = null
- for void(int) e in fptrs
  - e(3) // a.go와 a.no만 호출됨



## 메소드 식별문법

- 메소드는 오버로딩이 가능하기 때문에 이름만으로는 애매모호하다. 따라서, 인자타입리스트((type1, type2) 처럼 변수명 없이 타입만 써있는것)도 같이 명시해줘야 한다.
- 이게 정석이나, 일부의 경우 method deduction을 해달라는 요구사항이 있었다.
- 시나리오
  - class A
    - void print()
    - void print(int age)
    - void print(string msg, float grade)
  - A.print(void) // 이건 함수에 접근하는 것.
  - A.print() // 이건 함수를 호출하는 것
  - A.print(string, float).getName()
- 시나리오2-인자가 복잡해지면 읽기 어려워지는데
  - class A
    - int print(int a)
      - ..
    - int(int) print(float b) // 여기서 print(int b)로 하면 중복정의가 된다.
      - return print(int)
  - int(int)(int) fptr = A.print(float)





## Method가_만약_Type의_일종이_아니라면, Type이라는 클래스가 필요없다면, execute()를 virtual로 상속받게 할 수 있다.

* Contextual_REPL_based_development  가 먼저 해결되어야 한다.
* Type은 자신을 Generating한 SourceCode가 누구인지 적어놓는 역할이다. 아마 이는 C-REPL때문에 생긴것이다.

- 1안 필요없다. Type은 Unique성을 부여하기 위해서 넣은 클래스일 것이다. Type 클래스를 없애기 위해서는 Unique성이란 무엇인지, 이걸 부여하기 위해서 어떻게 할 것인지를 정해야 한다.
- 2안 내 소스코드가 어디인지, 어디서부터인지는 기록할 필요가 있지 않은가?







## 월드코드에서의 함수식별을 어떻게 할 것인가? a.print() 와 a.print(void).execute

- 월드코드에서 a.print()는, 인터프리터가 a.print(void).execute 로 인자추론하여 정적바인딩으로 함수 확정후, 코드블럭이 만들어질 것이다. 즉, syntatic sugar다.
- Node.getMember()은 인터프리터가 바인딩을 할때 주로 사용하게 될 함수다. getMember(index)와 getMember(string), getMember(msg) **3종류**가 있어야 한다.
  - getMember(string) {
    - return getMember(Msg(string)); // 이 Msg는 args가 없다.
  - }
- Object::isConsumable은 name만, Method::isConsumable()은 ((name == name(paramlist) && noArgs) || msg를 consume 가능할때)) 통과시킨다.
- 이때 일부 pretype은 name을 소문자로 해야한다.
  - 예) String은 C++에서 봤을때 그런거고, world에서는 string이다.
- name(paramlist)은 Method._name이며, Method::initialize()나 lazy로 한번 define된다.
- 고찰내용
  - 함수 식별문제 때문이다. World코드에 a.print(void).getName() 과 a.print() 2개가 있다고 해보자. 이때 인터프리터는 저 2가지 케이스에 대해서 어떠한 코드블럭을 만들어야 할까?
    - x 1안 2가지의 output이 다르게 한다.
      - 이 경우 Node는 subnode에게 isConsumable(msg)를 물어볼때, subnode가 MEthod 라면 "print(void)" or ("print" && args[0] == void) 로 따져줘야 한다. 즉 isConsumable의 true 요건이 2개가 되는 것이다.
      - **이건 동적바인딩을 하겠다는 것이다. 어떤 print함수가 될지 이름만 줄테니, 함수바인딩은 실행할때 하겠다는 것이지.**
    - v 2안 2가지의 output이 같다.
      - 이경우 a.print()는 인터프리터가 실제로 어떠한 함수인지를 인자추론을 통해서 판단한 뒤, a.print(void).execute 로 변경한다. 즉, **syntatic sugar**가 되는 것이다.
      - 따라서 이경우, 인터프리터가 함수를 판단한 뒤 코드블럭을 만들면서 확정해버린다. C-REPL 문제와 관련이 있게 된다.
      - C-REPL의 초기안은 코드 수정이 나면, 수정난 것에 영향을 받는 모든 코드를 전수조사 및 역추적해서 그 부분들을 다시 바인딩 및 검증을 돌리는 방법이었으나 이게 시간이 너무 걸리는건 뻔한 이야기다.
      - [3/28] 그래도 그렇게 해야 한다. 동적바인딩을 해버리면 에러를 탐지할 방법이 없기 때문이다.





## 메소드 타입리스트 deduction

- 시나리오
  - class A
    - void print(int)
      - ...
    - void print(float)
  - A a
  - void(int) f1 = a.print(int) // 이게 정석이나,
  - void(int) f1 = a.print // 어짜피 a.print(float)이 여기에 오면 에러가 되기 때문에 이건 해당사항이 되지 않는다.
- 구현방법은?
  - v 1안 정보가 부족한 경우, 필요한 인자를 끼워넣어 여러가지 candidates를 만든다. 그리고 에러로 판정되는 것은 삭제를 해버린다. == SFINAE.
    - 최종 컴파일 결과가 에러로 판정된다면, 미리부터 candidates라고 사용자에게 알릴필요가 없다는 것이다.
    - candidates에서 제끼는 게 이 안의 구현사항이 아니다. 처음부터 부족한 정보를 제공한 경우에도 정보를 보간하여 candidates를 만들어내는 것이 요구사항이다.
    - 즉, 함수명만 제공된 경우, 해당 클래스의 같은 함수명을 가지고 있는 모든 member가 candidates가 된다. validator는 이중에 어떠한 것들이 최종적으로 에러가 아닌지를 판단해서 candidates가 1개가 되면 그걸 채택한다.
    - 대충 맞을 것 같긴하다. validation에 상세한 알고리즘을 구현해보자.
  - x 2안 파싱 rule을 추가하여 정보가 부족한 경우에 자동으로 딱 1개의 정보를 채워넣는 일종의 syntactic sugar로 동작한다.
    - void(int) f1 = a.print를 한 경우, 자동으로 a.print(int)로 채워넣는 파싱rule을(혹은 파싱전 사전작업) 추가한다는 것이다.
    - v 하지만 이와 같은 경우, 앞뒤 타입으로 유추가 가능하면 사용할 수 있으나 다음과 같은 상황은 해당되지 않는다.
    - class A
      - void print(float)
    - A a
    - string c = A.print.getName() // 요 stmt만 놓고 보면 print를 특정하는 정보가 일체 없다. A는 print가 함수1개만 있다는 걸 컴파일러가 알아야 보간가능한 상황이다.





## 람다를_지원할것이기_때문에_fptr같은게_있어야_한다_어떻게_함수ptr를_정의하도록_할까. 중요한 점은, 가능하면 타입체킹이 가능하도록 해야 한다는 것이다.

- [v] 런타임시 함수ptr 생성

  - Method를 가리키는 함수ptr에 해당하는 타입을 만들어야 한다.

- [v] 함수ptr의 정의

  string(int, float) funcptr = A.foo(int, float) typedef string(int, float) FuncPtr FuncPtr funcptr2 = funcptr 로 한다.

  - *x 1안 Node형태로 사용하게 한다.*
    - class A
      - int foo(int a , float b)
        - return a + b
    - method foo1 = A.foo
    - Console.out("foo = " + foo(3, 3.5f))
    - foo1("wow")
    - **이럴바에야, method 대신 node를 쓰라고 하면 된다. node는 어떠한 call도 런타임에 바인딩을 판단하는 타입이다. 어떠한 것도 코딩할 수 있다.**
    - 그리고 node도 제공하지만 이것 정말 어쩔 수 없을때 사용하는 거고 그 외에는 타입을 체킹할 수 있는 수단을 제공하고 싶다.
  - *x 2안 method라는 독특한 정의법을 만든다.*
    - 시나리오
      - class A
        - string foo(int a, int b)
      - method foo1 = A.foo
      - foo1(2, "msg") // compile err
    - 안된다.
    - 이유1. validation에서는 실행은 하지 않는다. 따라서 foo1 자체는 scope에 있지만 foo1의 값인 foo메소드는 없는 것이다. 따라서 foo1이 어떠한 메소드와 binding이 되어있는지 알 수 없다.
    - 이유2. method의 타입은 초기화시에 어떠한 함수와 binding되었는가에 의해서 결정된다. c++의 auto와 같다. 따라서
      - method foo1 = null
      - foo1 = A.boo
      - or
      - method[] foos
      - foos[rand()] = A.boo
    - 여기서 A.boo가 들어갈 수 있는지 없는지 컴파일타임에 정할 수 없다.  돌려봐야 아는 것이다. 이문법은 사실 node와 거의 동일하다.
  - 시나리오
    - class A
      - string foo(int a, float b)
        - ..
    - string foo(int a, float b) = A.foo *// [x] 굳이 필요도 없는 변수명을 적을 이유가 없다.*
    - Console.out("foo = " + foo(3, 3.5))
    - foo(2, "msg") // compile err
    - string foo(int, float) = A.foo *// [x] 3안 --> 이경우, 같은 타입의 변수를 여러개 지정하지 못한다.*
    - string(int,float) foo1 = A.foo // 4안
      - string(int,float) foo1, foo2 = A.foo
      - string(int, float)[] foos
      - foos[0] = A.foo
      - foos[1] = A.boo
      - for e in foos
        - e(3, 3.5)
    - ref string foo_type(int, float)
    - foo_type foo1, foo2  *// [x] 5안 C#, boo, cobra 스타일 -> 3안 + typedef 한것과 동일하다*
      - string function(int, float)  = A.foo *// D 스타일*
      - def (int, float) *// boo*
  - v 4안으로 한다.
    - .NET 계열언어에서는 5안을 많이 사용한다.
    - js, python같은 애들은 애초에 동적타입이므로 이문제에서 벗어난다.
    - 자바는 interface 클래스를 만들고, 이를 이름없는 객체를 생성하여 에둘러 해결한다. 그러나, 이 방법은 사용자가 정의할 cb을 받아들이는 데 적합할 뿐, 이미 존재하는 다른 클래스의 메소드를 그대로 참조는 불가능하다.
    - 결과 4안을 하기로 했다. 여기서 typedef를 사용하면 5안과 차이가 없다는 점이 핵심이다.
    - 메소드 정의와 ptr정의를 동일하게 가져가는 것도 좋지만, 이렇게 해버리면 한번에 복수개의 변수를 만들 수 없으며, 타입명 중간에 변수명이 들어가게되므로 통일성도 깨진다.





## "지금 이 메소드는 이 객체에 속한 것이다" 라는걸 expr이 끝나도 알 수 있는 방법은?

- 시나리오
  - class A
    - void print(int)
  - A a
  - void(int) fp = a.print
  - a.print 가 끝나고 나면 Method가 MethodDelegator에 들어가게 될 것이다. 이 MethodDelegator객체는 인자인 Method의 Object가 누구인지 생성자에서 알 수 있으면 편할 것이다.









## 함수_바인딩_퍼포먼스_알고리즘_최적화

- World의 모든 Statement는 사실 Expression이다. --> #Statment와_Expression은_구분해야_할까
- Expression은 execute()가 가능하고, 반환값을 얻을 수 있다. 전달할 Msg와 전달받을 Target을 가지고 있다.
  - Expression설계상, execute()를 해야만 반환값을 얻을 수 있는 것은 아니다.
- Expr은 Expression 컴포넌트의 기반클래스이며, 이 밑으로 RawExpr, AccessExpr, ExecuteExpr, DynBindExpr 4종류가 있다.
  - RawExpr은 Generation단계에서 링킹을 위해서 정보를 잠시 담아둘 용도로 사용되는것이며(미확정)
  - DynBindExpr은 다이나믹바인딩 특성을 갖게 하는 Expression이다. 이는 C-REPL 기반에서 런타임시, 매 호출마다 묵시적형변환과 오버로딩을 고려한, 동적바인딩을 통해서 적당한 심볼로 바인딩을 한다. 당연히 시간이 많이 소요된다.
  - AccessExpr, ExecuteExpr은 DynBindExpr의 시간이 많이 소요되는 것을 최적화하기 위해서 추가되는 것으로 Optimization 단계에서 Optimizer(명칭 미확정)가 DynBindExpr들을 분석해서 적절하게 변환해준다.
    - 현재로써는 AccessExpr(= getMember(index)), ExecuteExpr(= call("execute")) 2가지로 모든 DynBindExpr이 대체가능할것으로 보인다.
  - 차후 더 최적화 과정이 이루어지면 더 다양한 Expr이 나오게 될 것으로 보인다.
- 고찰내용
  - 요구사항
    - \1. Linking이 끝나고 코드블럭이 나오면, 함수호출statement에서 어떠한 함수를 호출해야 하는지 바로 접근이 가능하게 해야한다. 오버로딩을 고려하기 시작하면 매번 call에 던질때마다 Object는 msg 파악해서 묵시적형변환 고려하고 적당한 함수로 redirection하는 과정을 거칠 수 밖에 없는 것이다.
    - \2. 2가지 기능은 모두 필요하다. 직접접근도 돼야 하지만 파서를 위해서 오버로딩+묵시적형변환 을 고려하는 로직도 같이 있어야 한다.
  - **고찰로 얻어낸 팩트**
    - \1. **기존 설계에서는 "모든것은 call" 이라고 하였으나, call에는 "이 msg를 받을 수 있는 것은 누구인가" 라는 것을 찾아야하는 의무가 있다. 따라서 "call안에 msg를 받을 수 있는 것은 누구인지 찾지 않게 한다" 라는 걸 넣기가 어렵다.**
    - \2. "msg 받을 수 있는건 누구인가" 를 찾는 과정은, 오버로딩과 묵시적 형변환을 필요로 하며 많은 시간이 소요된다.
    - \3. C-REPL를 사용한다면 getMember(35) 처럼 인덱스 기반으로 만들기는 쉽지 않다. 왜냐하면 런타임과 빌드가 mix된 상태가 계속 이어지므로 member가 추가되거나 삭제될 수 있다.
    - \4. 따라서 C-REPL을 위해서라면 언제든지 멤버접근방법이 2가지가 제공되어야 한다. 하나는 msg(곧, string)을 통해서, 하나는 인덱스를 통해서.
  - 1안 **Access, Executor** 라는 걸 만든다. 이건, execute시 call을 사용않고 직접 멤버에 direct로 접근한다.
    - World는 설계상으로는 Statement와 Expression를 구분하지 않는다 --> #Statment와_Expression은_구분해야_할까  참조. 모든것은 Expression 인것이다.
    - getMember(Msg)는 동적바인딩을 수행하는 함수이며, call(MSG)를 호출한 경우에는 getMember()를 타게 된다. 이것은 코드블럭이 막 완성된 상태, C-REPL일때는 이걸로 코드블럭이 call(MSG)를 사용하도록 완성되어있으므로, 이걸 사용하게 된다. 이때는 모든 코드블럭이 DynamicBindingStatement 같은 걸로만 구성되어있으며, 해당 클래스는 execute()시에 call(MSG)를 통해서 심볼을 접근, 메소드를 수행하도록 되어있다.
    - Optimization단계에서는 일률적이던 DynamicBindingStatement를 분석해서 Accessor나 ExecutorStatement로 구분해서 객체를 변경한다.
    - Accessor는 execute()되면 target.call(MSG)가 아니라 return target.getMember(index) 로 바로 접근하는 것이므로, call("getMember", {...}) 일때와 달리 동적바인딩이 없다. call()로 하는 경우는 총 2번의 동적바인딩을 타야만 한다.
      - 1번은 call로 인하여, 2번째는 call을 통해서 호출된 getMember(Msg&) 안에서 주어진 args를 대상으로 수행된다.
    - executor는 target.execute(Msg&)를 수행하도록 한다. Method는 기본적으로 상속받은 virtual execute()가 있으며, 오버로딩한 execute(Msg&)는 내부적으로
      - setArgs(msg.getArgs())
      - execute()
    - 를 할 뿐인 편의함수다.
    - 이 역시 call()를 거치지 않으므로 동적바인딩이 1번 생략된다.
    - 코드
      - class Node {
        - getMember(int index, wlevel& level = wlevel())
        - virtual Node& getMember(const Message& msg, wlevel& lv = wlevel()) // msg를 받을 수 있는 Member를 반환한다. level은 얼마나 근접한지를 나타낸다. 0은 일치, 높을 수록 불일치.
          - wlevel&를 인자로 넣는 거 말고 더 좋은 방법은 없을까?
          - struct Unit {
            - TStrong<Node> trg
            - wlevel lv;
          - } unit;
          - [unit.lv](http://unit.lv/) = 99999999;
          - for(m in members)
            - wlevel trg_lv = 0
            - Node& trg = m.getMember(msg, trg_lv)
            - if( ! trg_lv)
              - return trg;
            - if(trg_lv < [unit.lv](http://unit.lv/))
              - unit.trg.bind(trg)
              - [unit.lv](http://unit.lv/) = trg_lv
          - return unit.trg.get()
      - }
      - class Func : Node {
        - virtual Node& getMember(const Message& msg, Result& res = Result())
          - // **묵시적 형변환**도 고려해서 msg를 받을 수 있는 경우,
          - return *this;
      - }
    - 시나리오
      - a.foo.boo(void).getName().toInteger() 라는 world코드가 있다고 가정하자.
      - Generting단계에서는 파서가 저것들을 끊어주면 단순히 Statement 정보만 갖고 있는 candidate로 만들어준다.
        - StatementCandidate {
          - trg = StatementCandidate {
            - trg = StatementCandidate {
              - trg = StatementCandidate {
                - trg = StatementCandidate {
                  - trg = StatementCandidate {
                    - trg = scope
                    - msg = {.name = a, .args={}}
                  - }, msg = {.name = "foo", .args={}}
                - }, msg = {.name = "boo(void)", .args={}}
              - }, msg = {
            - }, msg = {.name="getName", .args={}}
          - }, msg = {.name="()", .args={}}

## 메소드가 1개만 있는 경우에는 인자리스트 생략 가능

- class A
  - void foo(int, char)
    - ...
- A a
- void(int, char) closure = A.foo(int, char).closure(a) *// FM*
- auto closure1 = a.foo *// ok. foo가 A 안에 1개만 있을때는 syntactic sugar로 ok 처리.*



## [v] hiding의 구현

### [v] 1안 - C#을 따라가자

* 먼저 내 클래스에 동명 함수들을 탐색하면서 랭크를 매긴다. --> 탐색방법은 별도의 문서로.

* 오버로딩된 메소드 중에 도저히 매칭된게 없다면 이제 부모클래스에서 찾는다.



### 검증

```cpp
def parent
  void say(int)
    void say(float)
    void say(char)
    void say(str)

def child = parent
  void say(str)
    void say(int)

child.say("wow!") // child꺼
child.say(3.5) // parent꺼 (float -> int 는 묵시적 변환에서 제외되어있음)
child.say('5') // child.say(int) 꺼.
```



## [v] 사용자가 Native에서 virtual 된 메소드들을 override를 할 수 있을까?

### [x] 1안 - 지금 처럼 Native요소가 world로 바로 open 되게 한다.

- worldlang에서 개발자가 만든 메소드가 native에서 이미 정의된 걸 override해야 하는 것들이 있다. 이런걸 구현할 수 있을까?

- Q1 worldlang에서 상속은 어떻게 구현되지?

  - Chain 혹은 배열의 복제로 구현된다.

- Q2 worldlang overriding은 frx에서 어떻게 구현되지?

  - 복제가 이루어진 후, members에 동일한 name으로 메소드 객체를 끼워넣는다.



- [v] 예를들면 우리가 c++로 void str::toLower()를 만들었고, 이걸 override하려고 한다면.

  - c++로 만든 메소드이므로 역시 worldlang으로 open되어 NativeWrapper객체로 만들어진다.

  - 만들어진 Method는 TClass<str>에 소속된다.

  - worldlang은 이를 바탕으로 str origin객체를 생성해놓고 이 Method를 넣어둔다.

  - 컴파일러는 이제 worldlang으로 짠

    - def myStr = str
      - void toLower()

  - 을 보고 myStr origin객체를 str로부터 먼저 복제한 뒤, 생성한 toLower() 메소드를 myStr member에 추가한다.

  - 결론은 **Native메소드도 결국은 Wrapper로감싸져서 Method 객체로 나오므로 worldlang은 둘을 구분하지 않아도 된다**



- [..] 예를들면 생성자

  ```java
  class MyClass {
  public: MyClass(int age);
  private: int _age;
  };

  def portedMy = MyClass
      portedMy(): super(27)
  ```

  - 보다 근본적인 문제로, MyClass와 portedMy 객체는 서로 다른 객체이다. 비록 Method는 wrap되어서 portedMy도 들고있다곤 해도, 멤버변수는 그렇지 않다.

  - private 멤버변수는 메소드에 의해서만 변경되므로 메소드가 구현이 가능한 이상 대개는 문제가 되지 않을 것 같지만, 실제로는 인스턴스가 서로 다르기때문에 문제가 발생한다.

    - ```java
      class Array {
      public: void convert();
      private: vector<Node*> elems;
      };

      def myArray = Array
      arr2 = myArray()
      arr2.convert()
      // myArray는 복제가 되었지만 Array는 복제가 되지 않았다면 당연히 문제가 된다.
      ```

  - 이걸 해결하려면 궁극적으로는 MyClass객체를 portedMy가 들고있어야 하며 객체가 복제될때 새로 나오게 해야 한다.



- [..] 예를들면 op=



### [x] 2안 - 다른 언어처럼 Array를 비롯한 것들은 pretype으로 뺀다

* 개발자는 기본적으로 worldlang 안에 있는 클래스만 가지고 사용한다.
* 그러나 c++로 만든 것들을 import 할 수도 있어야 할 것이다. 언젠가는.

#### [v] Q1. c++로 만든 모듈을 import하려면 이 역시 native객체를 들고 있어야 하는가?

* 이 문제가 해결되지 않으면 2안을 하는 이유가 없다.



### [v] 3안 - Object 객체에 주입한다.

```java
class MyClass : public Object {
public: void foo() { _age++; }
private: int _age;
};

def MyMy = MyClass
    foo()=>:
```

1. MyClass는 MyClass.dll 파일에 빌드되어 담긴다.
2. world frx는 MyClass.dll을 읽어들이고, MyClass를 인식한다. (TClass)
3. MyClass 객체를 Object* 로 생성해서 origin객체로 명명하고 저장한다.
4. 이 과정에서 MyClass::members는 메소드 foo()를 wrapping한 NativeWrapper가 추가되어있다.
5. .namu 파일을 읽는다.
6. MyMy define을 파싱한다.
7. MyClass의 origin인 MyClass를 scope에서 찾는다. origin객체이므로 젤 밑바닥에 존재한다.
8. 가져온 origin객체로부터 clone 한다. 이 객체는 물론 MyClass::_age를 가지고 있다.
9. clone한 객체를 MyMy라고 명명하고, stmt를 계속 파싱해간다.
10. method foo()를 발견하고, Method 객체를 생성해 "foo"로 명명하고 MyMy::members에 추가한다.

* 결과
  * c++ Object를 clone해서 members에 주입을 하므로 인스턴스는 항상 1개가 유지된다.
  * 오직 "public c++ 멤버변수는 visible 될 수 없음" 이라는 limitation만 존재하게 된다.
  * TClass<T>는 origin객체와 관련이 없다. 이것은 C++ reflection만 수행되며 worldlang과는 무관계하도록 역할이 축소된다. 나머지 객체생성과 관련된 부분은 origin 객체로 대체된다.
  * Class와 Object란 개념이 Object로 통일되었고, 모든 OBject는 scope를 통해서 접근이 가능하기 때문에 yacc를 짜는데도 매우 쉽게되었다.



## 메소드 정의 문법을 생각해보자.

```cpp
[ ]1:    func print()
        func print(int argc, str[] argv)
[ ]2:    print(void)
        print(int argc, str[] argv)
[x]3:    print(void)
        print(int(argc), str[](argv))
[ ]4:    print(void)
        print(argc = int, argv = str[])
```

* 2는,
  * 타자수가 적음
  * 그러나 void일때만 따로 적어야 하는 예외처리를 기억해야함
  * 파싱시 조금 까다로울 수 있음
* 1은,
  * 항상 func를 앞에 붙이므로 외울것은 적음 -> 그러나 클래스정의도 안붙이는데 왜 함수만 앞에 붙이냐고 할 수 있음. 결국 똑 같음.
  * 타자수가 많음.
* 4는,
  * +일관된 타입정의 문법 2안을 따른다.
  * -타자수가 가장 많다.

















# Expression

```cpp
def app
    // 구문statement와 표현식expression:
    // 프로그래밍 언어에서 구문이란 코드의 각 라인을 말하며,
    // 표현식은 특정한 값을 반환할 수 있는 식별자가 조합된 식을 뜻한다.
    //	e.g.in c++)	foo(3); 			// 표현식이므로, 동시에 구문이다.
    //				void func(int age); // 구문이다.
    //				type A;	 			// 구문이다.
    //
    // world는 문법을 간결하게 하기 위해 모든 구문은 표현식으로 정의한다.
    // 이를 위해 2가지 규칙이 있다.
    //	1. 모든 블록문을 갖을 수 있는 키워드는 블록문의 마지막 라인을 밖으로 반환한다.
    //	2. 모든 타입 선언은, 동시에 정의이며, 정의된 식별자는 해당 범위scope내에서 유효하다.
    int foo(int age)
        5 // #1 규칙. return이 없어도 ok.
	void boo(type declared, bool success, int age) // type도 int와 같은 타입의 한 종류.
		// ... type의 인터페이스는 차후 설명

        // bool -> str시 "true" 또는 "false"
        console.out(success + ", age=" + age) // true, age=20

    void main()
        age = foo(0) // age=5
        success = if age // always true.
            console.out("at if blockstmt")
            true
        else
            false
        console.out("success=" + success)

        boo(inner	// #2 규칙. 클래스의 정의. 클래스 자체를 boo함수로 넘긴다.
            		// worldlang은 클래스또한 하나의 타입으로 다룬다. (추후 서술)
            void print()
             	console.out("app.main.inner.print")
        , if success // if의 블록문 2개중 하나의 마지막 라인이 boo함수로 넘겨진다
           	bool(true)
        else
        	bool ok(false) // #2 규칙.
        , local_age = 20)

		// local_age와 inner는 main 함수 내에서 사용 가능하다.
        console.out(local_age) // 20
        // console.out(ok) // 에러. ok는 이미 else 블록문이 끝남과 동시에 소멸되었다.


/* 결과:
	at if blockstmt
	success=true
	true, age=20
	20
*/
```


## Statement는 Visible 하지 않는다.

## Statment와_Expression은_구분해야_할까

- 블록문을 위해서라도 Statement와 Expression은 구분해야 한다.
- 고찰내용
  - 이것은 Statement 쪽 클래스 계층을 설계하는데 있어서 중요한 질문이다.
  - Statement는 execute()만 되는거? Expression은 get(), to<Node> 등이 되는거?
  - 다른데는 뭐라고 할까?
    - Expression은 Value의 복합적인 형태를 말한다. 결국은 값으로 치환되어야 한다. 반면, Statement는 말그대로 실행가능한 1줄을 의미하는 것으로, Expression은 아니나, Statement에 속하는 것은 대표적으로는 if, for, while등이 있다.
  - 고찰을 통한 팩트 정리
    - \1. Expression은 값이 나와야 한다. Statement는 Expression을 포함한 모든 코드 1줄을 의미한다. 값으로 나오지 않아도 된다.
    - \2. 방향은 2가지로,
      - "구분한다"를 선택하면 다른 언어처럼 가는것이다. 설계를 바꿀 필요가 있을 것이다.
      - "구분하지 않는다"를 선택하면 "모든 Statement는 값을 반환한다." 를 만족시켜야 할것이다. 이말은 "Void가 인자로써 어떻게 예외처리 할 수 있는가"에 답하는 게 된다.
  - x 1안 모든것은 함수라고 본다면, 둘은 구분할 필요가 없을 것이다.
    - 위의 규칙으로 본다면 a == 5는 expression이다. 하지만 C++에서는 a==5 만 달랑있어도  컴파일은 가능하다. a++는 무엇인가?
      -  --> Expression이다. 왜냐하면 값이 있기 때문이다. Expression은 그자체로 Statement가 될 수 있다. 여기서 논의해야 하는 것은 Expression이 아닌 Statement가 어떻게 Expression으로 다루어질 수 있는가다. 그럴러면 Void 타입을 어떻게 인자로써 함수에 넣을 수 있는가가 되는 것이고.
  - x 2안 논리적으로는 Statement, Expression은 구분되지만, 설계상으로는 구분하지 않는다.
    - 모든것은 걍 Expression == 함수호출. Void가 인자로 나온 경우는 에러를 발생시킨다.
    - 결과적으로는 지금의 설계와 동일하다. 이름도 동일하게 Statement로 하자.
    - --> 그러나 이런 논리라면 Method 혹은 Block문 또한 Expression이 되버리고 만다.
    - 블록문을 함수의 인자로 넣을 수가 있는가? 안되지.
  - v 3안 블록문을 위해서라도 Expression과 Statement는 구분해야 한다.
- v 시나리오 고찰
  - 일단 문제는 없어보인다. 하지만 시나리오를 많이 생각해봐야 한다.
  - 시나리오1 함수호출
    - int abc_func()
    - 일때, abc_func()의 반환값인 int를 반환
  - 시나리오2 변수 정의
    - 반환값은 정의된 변수.
    - 예) foo(int a, int b = 5) // a는 블록문의 lifecycle을 가지므로
    - a += 5 // 여기서도 유효함
  - 시나리오3 블록문
    - 반환값은 블록문의 마지막 expr
      - 이말은 return이 필요 없다는 것이기도 하다.
    - 예1
      - int b = if(a==5)
        - foo(a)
      - else
        - foo(5)
    - 예2
      - class A
        - void foo()
          - 5 // return 5와 동일함.
  - 괜찮은 것 같다. 굳이 stmt를 두는 것보다 제약도 적어지고.
  - 적용하자.
- World에서 Statement라는건 없다. 굳이 구분해서 코드에 제약을 둘 필요가 없다. 모든 코드라인은 Expression이다.
  - 1 이말은, 변수 정의또한 인자로써 들어갈 수 있다.
  - 2 함수 정의 또한 인자로써 들어갈 수 있다. -> #인라인_람다 , #world_inline_메소드메소드 참고
  - 3 클래스 정의 또한 변수 인자로써 들어갈 수 있다.
- 가 된다.
- 아무튼, 1과 2까지는 동의하므로 일단 stmt라는 건 없애버리자. 굳이 stmt와 expr를 구분해서 어렵게 만들 필요가 없다. 처음보는 사용자가 "이게 된다면, 이것되 되나?" 싶다면 젤다처럼 되야 한다.
- Expr은 쉽게 말하면 함수 호출이다. 함수 자체와는 다르다. 함수호출이란 Msg와 함수를 묶어주는 것을 의미한다. 모든 코드라인의 근간이 되는 셈이다. Method는 실행시 필요한 인자가 외부에서 제공되어지지만, Expr은 프로그램이 컴파일됨과 동시에 필요한 인자가 박혀있다. 필요한것은 그것들을 수행하고 난 결과값을 외부에서 받을 수 있도록만 하면 된다.
- Expr의 종류는 이렇다.
  - this가 필요한 경우와 필요하지 않은 경우
  - 특정 함수를 정확히 아는 경우와, 또다른 expr에게 물어보면 아는 경우
  - 결국은 caller.call(msg[this가 있을수도 있음]); 의 꼴이 되어야 한다.
- this를 넣어주는건 사용자의 책임이므로 Expr이 넣어줘야 한다.
  - ThisExpr과 StaticExpr 2개가 있다고 하자.
  - ThisExpr은 caller를 뽑아내서 msg 맨 뒤에 set을 해줘야만 한다. caller가 필요하다는 말씀.
- Expr에 call()을 하면 execute()를 하고 난 결과값에 call을 하게 된다. proxy처럼. 이말은 최소 Node로부터는 상속을 받아야 한다.
- Expr은 Object로부터 상속받지는 않는다. 때문에 Node의 일종이긴 하지만 Expr은 invisible하게 된다. (정확히 말하면 metaclass로부터 함수들을 물려받지 못하게 된다)

## Expression 블록을 어떻게 최적화 할 수 있을까?

- [][v] 최적화가 완료되면 get(n) 으로 될 수 없다. call(n)을 만들어야 한다. 왜냐하면 get(n)은 scope를 구성하지 않기 때문이다.
- call(n) // same as call(msg("name of variable"))
  - _precall()
  - refer r = get(n)
  - _postcall()
  - return r
- 최적화 시나리오
  - scope["myfoo"].call("age"); --->  scope["myfoo"].call(5)





# 오버로딩

## 1
-   Node간 연산자 동작 컨셉
    -   컨셉과 방향 정의하기
        -   C++과 World는 성격이 다르기 때문에 설계도, limitation도 다르다. World는 물리적으로 타입체킹이 없으나 논리적으로 타입체킹을 수행하는 철학이며, C++은 항상 타입체킹을 엄밀하게 수행한다. 이러한 차이를 그대로 설계에도 적용하는 것이 바람직하다고 판단했다.
        -   World는 메시지 기반이므로 적절한 메시지인, ++, +, -, <, >, == 등등 작성되어 C++코드로 호출하면 그 대상이 지원하든 하지 않든 일단 실행하려 시도는 한다.
        -   Native Framework 에서는 해당 operator 오버로딩함수가 필요한 곳에서만 정의 한다. 예를들면 Node 같은 ADT는 ++, +, - 와 같은 산술타입과 String에서만 필요로할 것같은 이러한 operator 오버로딩을 두지 않도록 한다. operator+ 같은 걸 수월하게 하려면 downcasting용 함수를 사용하자. 2-3줄이면 의도한 내용을 쉽게 할 수 있다.
        -   단, ==, !=, = 는 매우 기본적인 연산이고 모든 타입이 갖을 수 있으므로 Node에서도 이를 지원한다.
    -   사용
        -   이 문제가 어려운 이유는 다름 아닌 역의존성 삽입에 의한 것이다.
            -   class MyModule을 개발자가 만든다고 가정하자. MyModule개발자는 int -> MyModule, MyModule->int를 모두 지원해주고 싶다. 이때 int -> MyModule 은 쉽게 이루어진다. 왜냐하면 MyModule에서 int값을 받아서 적절하게 생성해주면 되니까. 하지만 반대의 경우는 문제가된다. 왜냐하면 int는 MyModule보다 먼저 나온 것이기 때문이다. 고로 이러한 역의존성을 해결할 필요가 있다.
            -   int는 이미 나온 클래스이기 때문에 여기에 MyModule을 받아들이는 코드를 추가할 수 없다는 게 문제가 되는것이다.
            -   크게 3가지 방법이 있다.
                -   방법1. C++, C#에서 사용하는 방법으로, 외부의 제 3의 일반함수를 만든다.
                    --> 그러나 World는 순수객체지향언어라 일반함수라는 게 없다.
                -   방법2. python에서 사용하는 방법으로 reverse 버전을 만든다.
                    -   operator+의 경우 reversed_operator+() 같은 것을 월드가 호출하도록 한다.
                -   방법3. 클래스 확장을 사용한다.
                    --> world만의 방법
            -   월드는 클래스 확장하는 방법을 채택했다. 클래스 확장을 전면 지원한다.
            -   클래스 확장은 class ~~~ extend <package>
                -   함수선언 or 변수선언
            -   으로 사용하는 것으로, 이미 정의된 클래스에 함수나 변수를 추가하게 한다. extend라는 키워드를 붙이는 이유는 인터프리터가 "원본을 먼저 읽도록" 자연스럽게 유도하기 위해서이다.
            -   중복으로 정의되면 당연히 에러가 난다. 즉, 같은 클래스내에서 오버라이딩을 하는건 불가능하다.
            -   컴파일이 완료되어, !수정불가! 로 도장찍혀서 배포되는 외부 클래스를 final클래스라고 한다. 이경우는 extend가 불가능하다. 이 경우 컴파일이 완료되면 변수정보가 남아있지 않게 만들기 때문이다. 모든게 getMember(n) 인덱스로 접근되기 때문에. 이경우에는 extend를 할 수 없다. 인터프리터가 파싱하는 시점에서 getMember("변수명")으로 찾는게 불가능하게 된다.
    -   고찰 내용
        -   Node간에 =, -, +, --, ++, +=, >, <, == 등은 어떻게 지원되어야 할까?
            -   1안
                -   포인트는 C++은 타입체킹이 엄격해야 한다. World는 논리적으로 엄격하다. 물리적으로는 가능하다는 얘기다.
                -   이를 종합하면 C++ 개발자는 2가지 접근을 할 수 있다. C++적인 접근을 한다면 Integer, Float과 같은 산술형 Type인지 아닌지를 타입캐스팅해서 알아내서, 그 시점에서 +, += 같은 걸 하면 된다.
                -   아니면 call("+") 같은 걸 사용해서 일반적인 방법으로 접근하도록 한다면 어떠한가?
                -   call을 쓸바에야 차라리 캐스팅을 하려 할 것이다. 일반적으로 항상 통용되는 명령어인 =, ==, != 지원하는 건 무리가 없다.
                -   그리고 C++개발자가 무슨 타입을 원하는지 정해져있다면 그냥 캐스팅을 하면 될것이다.
                -   그렇다면 무슨 타입인지 정확히 모르는 상황에서 Node1과 Node2에 대해서 2항연산을 하고 싶은 케이스만 문제가 된다. 이런 케이스가 존재할 것인가?
                    -   String 혹은 산술연산타입 모두에 적용가능한 걸 하고 싶다면 어떠한가?
                        -   그러한 경우는 일반적으로 존재하지 않는다고 본다. 정 그런 케이스가 있다면 call("")을 사용하라. 아니면 RTTI를 하던가. C++에서도 자동으로 되는 건 절대 아니다.
                -   Integer, Float 같은 것은 ArithmeticType을 부모클래스로 가질 것이다. 그리고 여기에 +, -, ++ 같은 것들이 있겠지.
                -   Reference 같은 케이스는 어떻게 되는가?
                    -   World에서는 Node 인 채로 다룬다. 그게 무슨 타입인지는 실제 중요하지 않다. 이걸 가능하게 하는 것은 call() 기반으로 동작하며 오로지 빠른 디버깅을 위해서만 논리적으로 컴파일 에러를 내보낸다.
                    -   C++은 타입체킹이 엄밀하게 동작한다.
                    -   즉, 이 질문은 C++ FRX에서도 개발자의 메인 타입이 Node로 삼을 것이냐? 라는 걸로 요약할 수 있다. Node 기준으로 다룬다면 +, - 등등 모든 것들이 Node에도 있어야 한다.
                    -   반면 아니오 라고 한다면 operator+() 메소드는 주어진 타입이 산술 타입인지를 명확히 이해하고 있을때만 동작한다.
                    -   다행이 산술타입은 occupiable이므로 Reference가 존재하지 않는다. (가능하지만 논리적으로 막혀있다)
                    -   그렇다면 String 같은 sharable이면 +가 존재하는 것들은 어떠한가?
                    -   String 에 대한 Reference라고 해도, +는 되면 안된다. 이때 방법은 2가지다.
                        -   1. if node.isSubOf(Reference)
                            -   Reference& ref = node;
                            -   if ref.get().isSubOf(String)
                                -   String& str = ref.get()
                                -   cout << str + msg
                        -   2. downcasting은 그냥 편하게 함수를 써라. 직접하지 말고.
                            -   String& str = [node.to](http://node.to/)<String>();
                            -   if ! str.isNull()
                                -   cout << str + msg
        -   연산 주체
            -   구체적인 설계는?
                -   구현자체는 어렵지 않다. 하지만 퍼포먼스를 고려와, 무슨 문제가 있을수 있는지를 생각해봐야 한다.
                -   1안
                    -   일단 앞에 있는 operand로 가고, 그것이 뒤에있는 operand와 자신의 우선순위를 따져서 누가 이걸 진짜 처리해야 하는지 정한다.
                    -   Arithmetic::operator+(Node& rhs)
                        -   if getPriroity() >= rhs.getPriority()
                            -   내가 handle
                        -   else
                            -   return rhs.operator+(*this);
                    -   문제점
                        -   이 코드는 어디에 위치해야 하는가?
                        -   rhs.operator+()에서도 같은게 또 일어난다. 해결방법은?
                        -   일단 함수가 호출되고 나서 다시 redirection 되는것이기 때문에 함수 호출자체는 loss가 된다.
                -   2안
                    -   전역적으로 일단 허용한다.
                    -   전역함수 : Bind<Node> operator+(Node& left, Node& right)
                        -   left와 right의 우선순위를 구한다.
                            -   우선순위 높거나 같은쪽이 right라고 가정한다.
                        -   left를 right로 변경할 수 있는가? 그리고 right.operator+()를 가지고 있는가?
                            -   둘다 YES라면 left -> right 한 뒤, right + right를 수행한다.
                        -   아니라면 right -> left가 가능하며, left + left가 존재하는지 확인한다.
                            -   된다면 right -> left 한 뒤, left + left
                        -   모두 아니라면 변환이 불가능 하다.
                    -   검증
                        -   int + string
                            -   우선순위 검출 : 1(built-in occupiable) < 2(built-in sharable)
                            -   int -> string이 가능?
                    -   문제점
                        -   내껄 다른 타입으로 내보내는 to()가 아니라, 다른 타입을 내껄로 만드는 from()이 필요 하다.
                            -   그렇게 되면 to()와 from()이 모두 있으므로 어느걸 적용해야 하는지 모호성 오류가 다시 나올것이다. 옛 설계처럼.
                -   3안
                    -   심플하게, 심플하게 가자.
                    -   class MyInt : public Arith
                        -   Bind<Arith> operator+(Arith& rhs)
                            -   Bind<MyInt> res = [rhs.to](http://rhs.to/)<MyInt>()
                            -   if res.isNull()
                                -   return
                            -   Bind<MyInt> cloned = clone()
                            -   cloned.get() += res.get()
                            -   return cloned
                    -   class MyBigClass : public Node
                        -   MyBigClass operator+(Node& rhs)
                            -   Bind<This> res = [rhs.to](http://rhs.to/)<This>()
                            -   if res.isNull()
                                -   return
                            -   MyBigClass temp = *this
                            -   temp.setAge(temp.getAge() + res.getAge())
                            -   return temp
                    -   문제점
                        -   A.operator+를 하려면 Node를 A로 캐스팅 한 상태에서만 가능하다. Node 간의 operator+가 지원된다면, 수행하고 싶은 경우 제대로 작동하지 않는다.
                            -   Node& a, &b
                            -   Bind<Node> c = a + b
                        -   operator+를 하고 싶다면 내 클래스만 수정해서는 되지 않는다. integer 타입이 MyBigClass로 to<>()가 가능하도록 만들어야 한다.
                        -   World에서 MyBigClass + int를 하게 되면 어떻게 되는가?
                            -   class MyBigClassOperatorFunction
                                -   MyBigClass ret;
                                -   virtual Node& getResult() { return ret; }
                                -   virtual call(Member[] args)
                                    -   ret = this_p->fptr( ((TYPE1&)members[0]).get());
                            -   MyBigClass.call("+", {Integer(3)})
                -   생각을 해보자.
                    -   class Arith : public Type
                        -   Bind<Arith> operator+(Arith& rhs)
                            -   Bind<Arith> res = clone()
                            -   res.get()
                    -   class Integer : public Arith
                        -   Integer operator+(Integer& rhs)
                            -   return Integer(get() + rhs.get())
                -   4안
                    -   A + B가 있을때, 일단 A::+(B)를 시도 한다. 없으면 B::+(A)를 시도한다. 둘다 없으면 에러. 깔끔하며 단순하다. 그러면서도 대부분의 케이스에서는 동작한다. 설계도 단순하다.
                        -   덧붙여, 각 함수 호출에서 "없다"는 의미는 묵시적형변환이 동작해도 함수가 없다는 얘기다.
                    -   이 코드는 파서에 의해서 코드블록을 만들어낼때만 동작한다. 런타임에는 수행되지 않는다.
                    -   연산자 타입 추정과 함수 바인딩 우선순위에 의해서 묵시적 형변환이 일어나는 컨셉이 서로 영향을 미친다. 이걸 잘 정리해보자.
                        -   서로 영향을 미치지 않는다. 빌트인 타입에 대해서는 내가 다 만들어 놓을 것이며, 일반 타입의 경우 묵시적형변환은 upcasting에 대해서만 된다. 그러므로 괜찮다.
                -   v 5안
                    -   "클래스 확장" 기능을 통해서 이미 정의된 클래스에게 operator+()등을 넣을 수 있다.
                    -   묵시적 바인딩으로 다른 함수와 동일하게 동작되도록 한다.
                        -   인터프리터는 validation시, int + MyClass 가 있는 경우 정확히 int::operator+인 함수후보군을 뽑아내서 MyClass를 인자로 집어넣을 수 있는게 1개 있는 지 여부를 확인하면 된다. --> 묵시적바인딩을 참고하라.
                    -   모듈개발자는 클래스 정의시에 C++처럼 MyClass::operator+(Integer)을 정의하면 된다. operator+함수도 일반 함수와 동일하게 fptr로 지정할 수 있다.
                    -   그러나 Integer::operator(MyClass)는 모듈개발자가 어떻게 설정할 수 있지?
                        -   1안 의례 하는대로 friend 일반함수를 사용한다.
                            -   논리적으로 불가능하지는 않다. 다만 매크로는 "이 함수는 멤버함수 ptr가 아니라 일반함수 ptr다" 라는 걸 ㅇ라아야 한다.
                            -   v 1안 - 매크로를 다른거 쓰라고 한다. 2쌍을 제공한다.
                            -   2안 - SFINAE를 사용한다. 다만 함수명을 제외한 인자리스트와 반환형은 미리 정해져 있어야 하는 걸로 보인다.
                                -   모든 operator+-==<=>=<>!=*/%에 대해서 미리 만들어 놓아야 한다는 것이 된다.
                                -   그 외의
                                -   일반함수를 사용하고자 하는 경우가 또 있을 수 있을까?
-   Node간 연산시 타입 추정 알고리즘이 아마 필요 없을 것이다.
    -   A + B * (C / D + E * F) * G + H / I
    -   int + float * (char / bool + string * result) * float + string / char
    -   이러한 수식이 있을때, 최종적으로 나오는 타입은 무슨 타입인지 어떻게 아는가?
        -   1안. 2 pass를 돌린다.
            -   파서가 구성한다.
                -   +
                    -   +
                        -   A
                        -   *
                            -   *
                                -   B
                                -   +
                                    -   /
                                        -   C
                                        -   D
                                    -   *
                                        -   E
                                        -   F
                            -   G
                    -   /
                        -   H
                        -   I
            -   파서가 구조체를 타입 평가한다.
                -   각각의 2항 연산은 "연산자 동작컨셉" 에 의해 동작한다
                -   +
                    -   + --> string
                        -   A --> int
                        -   * --> string
                            -   * --> string
                                -   B --> float
                                -   + --> string
                                    -   / --> char
                                        -   C -> char
                                        -   D -> bool
                                    -   * -> string
                                        -   E -> string
                                        -   F -> result
                            -   G --> float
                    -   / --> error
                        -   H --> string
                        -   I --> char

        -   v 2안 --> 파서제네레이터가 판단해준다. 우리는 알거 없다.
-   월드 코드에서 연산자 우선순위 조정
    -   a + b * c 인 경우, b*c가 먼저 되어야 한다.
    -   GeneratorParser가 이걸 해줄 수 있다







## 객체의_함수_접근이_이름만_가지고는_불가능하다_왜냐하면_오버로딩을_지원하기_때문이다

- 오버로딩 지원된다는 것은 함수식별이 "함수명 + 인자리스트"로 조합될때만 가능하다는 얘기가 된다.

- 따라서 world에서 함수를 식별하기 위해서는 "함수명(타입리스트)" 를 명시하면 된다.

  - 예) class A
    - void foo()
    - int foo(int)
    - int foo = 5
  - A.foo(int).getName() // "foo"
  - A a
  - a.foo(void).getSignature() // "void foo(void)"
  - a.foo.getName() // compile 에러다.
  - a.foo.getClass().getName() // "int"
  - a.foo(int).getClass().getName() // "func"

- 고찰 내용

  - class A

    - void foo()
    - void foo(int)

  - a.foo.getName() // 이때의 foo는 어느 foo인가.

  - 그러면 사용자가 어떻게 2개 중 하나를 지정하도록 할 수 있을까?

    - 1안 인자리스트도 같이 써준다.

      - a.foo(int).getName()

      - 이건, foo(int)를 호출하고 나서 반환값을 getName() 한거로 오독될 여지가 있을까? foo(int)와 foo(int())와 foo(3)은 다르게 보일것이긴 하다.

      - a.foo().getName() 은 마치 foo()라는 함수호출 처럼 보이지 않는가.

        - a.foo(void).getName()로 사용하도록 유도한다.

      - a.foo(abc).getName() 이라는게 있다고 하자. 이때 abc는 Type일 수도, 변수일수도 있다. 문제는 없는가?

        --> 별도로 컨셉을 논의. 컨셉만 정해지면 문제는 없다.

        - generating 단계에서 메소드의 내역이 확정된다.
        - linking단계에서는 메소드의 내부가 scope를 update 해나가면서 확정해간다. 런타임환경과 동일하게 구성해야 제대로 binding여부를 탐지할 수 있기 때문에 scope를 같이 update하는 것이다.
        - scope의 우선순위는
          - 타입, 전역
          - 객체의 멤버(메소드 + 변수)
          - Nested 밖의 지역변수
          - 현재 실행중인 지역변수
        - 순으로 접근이 이루어진다.
        - 식별자 중복시 어떻게 해야하는가는 별도로 생각해야할 문제이니 여기서는 패스하자.
        - 중요한것은 scope객체에 질의하면 "abc"가 무엇인지 명확히 알 수 있다는 것이며, 미리 정의된 컨셉에 의해서 무시하거나 계속 가거나를 선택해서 코드블럭을 적절하게 생성이 가능할것이다.

    - x 2안 저러한 것을 expression이라고 정의하자. 그리고 expression은 통째로 isCallable을 때리면 된다.

      - <variable> => prebuilt keyword가 아닌 것들
        숫자로 시작 ok 언더바, ?, #, $,@, %, & 사용가능
      - <function> => <symbol>\( [<args>]* \)
      - <msg> => (<symbol> | <function>)
      - <msgs> => <msg>[.<msg>]*
      - <expr> => (<msgs> | <msgs> <oper> <msgs> | <msgs> <oper> )
      - <stmt> => (<expr> | <returns> | <fors>)
        statement란 keyword등을 사용해서 나오는 "값을 반환하지 않는" 것들
      - **아니, 사람이 보더라도 저 foo가 foo() 인지 foo(int)인지 알 방법이 없다니까?**










#  [v] 객체의 정의
* 직접 정의 & 복제

* Prototyping 기반
* Origin 객체


```cpp
import console aka c // typedef

// 객체 확장 문법:
// <Opt:원본객체> <인터페이스 복사될 객체>
// 		<Opt:객체의 확장 인터페이스>
//		<Opt:객체의 확장 인터페이스2>

def A // 객체 A를 정의한다. 원본객체는 생략되었다. 고로, 이 객체는 무scratch에서 출발한다.
	void print() // 객체 A는 print() 라는 메소드를 갖게 되었다.
    	c.out("hello world. I'm " + age + " years old.") // print의 구현
   	int age = 0

def B := A // 객체 B를 정의한다. A의 인터페이스를 물려받는다.
	void say() // 거기에 say() 메소드를 확장했다.
    	c.out("and you?")

def app
	void main()
    	a1 := A() // a1은 A 객체로부터 인터페이스를 모두 물려받는다.
    	b1 := B()
    	b1.age = 5

    	c.out("a1' age is " + a1.age) // a1's age is 0
    	c.out(b1.age) // 5

		A.age = 20
    	def C := A
    		// 메소드 안에서 새로운 객체를 만들 수 있듯,
    		// 새로운 객체를 만들면서 인터페이스 확장도 당연히 가능하다.
    		// "C = A"는 프로그램 시작시 수행된다.
    		// A.age = 20보다 빠르므로 C.age 는 0 이다.
    		void wow()
    			say()
				print()
    	C.wow()
    	a2 := A() // a2.age는 20, A.age도 20 이다.
    	c1 := C() // c1.age는 0, C.age도 0이다.


    //C foo() {} // 컴파일에러: C는 지역객체이므로 메소드 밖과 시그내쳐signature에서는 사용할 수 없다.
    void foo() {}

/* 결과:
	a1's age is 0
	5
	hello world. I'm 20 years old.
	and you?
*/
```


## 멤버변수 컨셉

### [x] 1안 멤버변수는 Object에 속한것이냐 아니냐 기준으로 배열을 2개 만든다.

  - Object와 Method는 본격적으로 멤버변수를 다룬다. 멤버변수를 어떻게 구성할것인가는 생각외로 상당히 복잡한 문제가 되는데, 왜냐하면 const여부, static여부, private/public 여부, variable여부 등등 여러가지 요인들이 한번에 얽혀있기 때문이다.
    - [확정] 1. class - object 멤버를 구분해야 한다.
      - class에 속한것(메소드 + static variable)은 모든 object가 공유하는 것이므로 이것들은 모든 object가 생성될때마다 추가할 필요가 없어야 한다. 따라서 최소한 이둘은 반드시 구분할 필요가 있다.
    - \2. static 메소드 구현방법
      - 구현 알고리즘에 따라서 static 메소드는 일반 메소드와 별도로 구분할 필요가 있는가?
    - \3. public/private
      - 얼핏 생각하면 외부에서 call()을 하는 경우에는 public 메소드만 호출가능해야 한다. 고로 private 메소드가 담길것과 public 메소드가 담길것이 구분이 되어야 하지 않겠냐는 것이다.
    - \4. const
      - 객체가 const화 되어있일때와 nonconst일때와 같은 메소드명으로 호출한다고 하더라도 다른 메소드가 호출되어야 한다. 즉 "caller의 const 또한 msg의 일부" 인 셈이다. 따라서 public/private와 마찬가지로 구분될 필요가 있다.
  - 그러나 문제는 저 4가지를 모두 채택할 경우, 멤버변수는 총 2^4 = 16개의 별도의 container에 담겨지게 된다는 것이다. 따라서 최적화를 고려해야만 하는 상황이다.
  - v 1안 굳이 구별할 필요가 없는 상황을 만든다.
    - const, public/private는 Object내부에서 걸러서 에러를 반환하도록 한다. 별도의 배열을 두지 않는다.  두는 이유는 "탐색시 빠르라고" 인데, 어짜피 최적화 과정이 들어가면 탐색 없이 함수를 특정할 수 있도록 해야 한다.
      - vtable 대신 Object.getMembers()[n] O(1)로 접근하게 된다.
  - x 2안 구별해야 하지만, 눈속임으로 구별하는 것처럼 만든다.
  - x 3안 16개의 container가 되더라도 속도가 낮춰지지 않게 하면 된다. 생성/실행시 퍼포먼스가 떨어지지 않는 방향으로 접근한다.
    - 갯수가 많아졌을때의 부담은
      - \1. 바로 탐색이 느리다는것과
      - \2. 객체 생성시 부담이 생길 수 있다는 것이다.

#### [x] 구성 및 객체생성

  - 시나리오
    - \1. 각 Class들은 부모의 메소드들을 copy한다. 이는 chain deep depth로 인한 퍼포먼스를 줄이기 위함이다.
    - \2. Object의 Members는 lazy하게 동작한다. 이때 Object는 getClass().getMembers()를 chain으로 가져와서 초기화한다.
    - \3. 각 Class는 프로세스 시작과 동시에 ClassTree 구축을 위해서 인스턴스가 자동발생한다. Class생성자에서 자동으로 initialize()를 실시한다. 단, Class::initialize() 안에서도 members를 구성하지는 않는다. lazy하게 간다.
    - \4. 만약 Class::getMembers()가 불려진 경우, getSuperClass().getMembers() 목록을 가져와 일단 clone한다. ClassTree 구축은 이미 끝났기 때문에 getSuperClass() 이때 한다고 해도 인스턴스만 생성한다. 그러나 이후에 호출되는 Members()는 SuperClass의 4번이 다시 반복되게 만든다.
    - \5. 그 후, T::onInitializeMethods()로 wrapping된 메소드 목록을 가져와서 append한다.
    - \6. T::onInitializeMethods() 안에서 Method객체가 생성된다. Method는 클래스가 아니므로 3번 과정이 반복되지 않는다. 결과적으로 T::onInitializeMethods는 TClass<T>::getMembers()가 불려지는 최초 1번만 cb된다.
  - 예외 시나리오
    - class Method {
      - const String& getName();
      - Method[] onInitializeMethods() {
        - v  getName()에 대한 Method를 만들어서 넘길 수 있는가? --> 넘기는 건 가능하다.
          - Method::getMembers() -> TClass<Method>::getMembers() -> Method::onInitializeMethods() -> Method newone(...) -> Method::Method(...)
          - 결론 : Method가 생성된 것이지, Member가 구성된게 아니기 때문에 재귀에 빠지지는 않을 것이다. 그리고 이 루프가 시작된 발발지점도 생성자에 의해서가 아니라 getMember()에 인한 것이다. 무한 재귀는 성립되지 않는다.
        - Method.get("getName(void)").get("getName(void)").get("getName(void)").get("getName(void)").get("getName(void)").get("getName(void)") 할시, getMember()는 여러번 구축되는가? 메모리 낭비가 되지는 않는가?
          - 하나씩 추려서 치환해가보자.
          - == TMethod<getName>().get("getName(void)").get("......");
          - TMethod<getName>은 Method의 일종이다.  그래서 get()은 getMember()를 호출하고, SuperClass인 Method::getMember()를 호출한다. Method::getMember()는 Class<Method>::getMember()를 호출하며, Class::getMember()는 이미 한번 초기화가 된 경우에는 저장된 멤버를 바로 리턴한다.
          - 즉, TMethod<getName>()에 담겨있는 TMethod<getName>()은 TClass<Method>::getMember()에 담겨있던 것을 TClass<TMethod<getName>>이 복제한 놈이다. 메모리 낭비가 아니다. 이는 TClass<T>에 T() 객체 한개가 들어있는 걸 생각하면 된다. 무한 루프 및 무한 재귀는 돌지 않는다.
      - }
    - };
    - Method.get("getName(void)").get("getName(void)") 시, 문제가 발생하는가?
      - == TNativeMethod<getName>().get("getName(void)")
  - class Object
    - friend class Class;
    - Chain _members;
    - virtual Container& getMembers()
      - return _members;
  - Class는 Array Memebers를 갖고 Array ObjectVariables를 갖는다. ObjectVariables는 Members를 chain 한다.
  - virtual Container Node::getMembers(); // invisible
  - TRefer<T> TClass::instantiate()
    - T& newed = *(new T());
    - _chainMembers(newd);
    - return TRefer<T>(newed);
  - class Class
    - void _chainMembers(Object& obj)
      - Chain& tweak = obj._members;
      - tweak.chain(getMembers());
      - tweak.chain(getObjectVariables().clone());
  - 파싱시에는 variable, function은 super의 것을 chain을 유지한다.

- 필요시 member라고 해서 variable과 function과 chain을 유지한 것을 값으로 생성해서 반환해준다. 값으로 내보내도 chain을 묶는것 뿐이므로 퍼포먼스 로스는 적다.

- 하나의 객체는 private variable, public variable 2종류를 갖는다.

- 클래스.instantiate()를 하게 되면 메타클래스의 variable을 복제해서 넣는다. 그리고 생성자를 호출한다. 객체의 variable은 chain되지 않은것을 복제했으므로 chain이 아니다.

- 객체가 함수를 사용할때는 chain되지 않은 함수의 것을 바로 사용하므로 역시 탐색시 로스는 없다.


### [v] 2안 배열은 한개다. 그러나 안에 들어가 있는 멤버가 refer로 감싸져 있으면 sharable로 동작한다.

#### 먼저 refer는 T가 occupible인지 sharable인지에 따라 assign()이 다르게 동작한다.
* 그러나 int는 occupible이지만 static int는 공유가 되어야 한다.
* 그러므로 refer와 비슷하지만 조금 다른 뭔가를 만들어야 한다.
    * 그것은 객체를 가리키며,
    * Node의 일종이여야 하고
    * TBinder를 사용하며
    * T가 occupible인지 여부와 관계없이 shallow cpy를 수행한다.
* 이를 Ptr 라고 한다.

```cpp
class ptr : public node {
    // TBinder<Node>를 사용하여 무조건 모든 msg를 ptr로 redirection
    // to<T>()를 지원한다.
    Node getPtr();
};

class shallow : public ptr {
    // operator= 혹은 assign()은 shallow cpy
    clone() // TBinder<Node>를 shallow cpy 한다.
};

class deep : public ptr {
    // operator=()에서 T가 무슨 타입인가에 따라 occupible, sharable를 구분
    clone() // TBinder<Node>를 deep cpy
};

template <typename T>
class tDeep<T> : public deep {
    T get(); 을 지원한다.
};
```

#### 이제 Origin객체를 구성할때 1개의 배열로 구성할 수 있다.
* 파서는 origin객체를 생성하면서 그 members라는 하나의 배열에 멤버들을 static, private, public 구분없이 넣는다.
    * public, private는 구분하지 않는 이유는, 결국 최적화시점에는 index로 접근할 것이기 때문.
    * static 변수 (메소드)일 경우에는 그 변수나 메소드를 생성하고 ptr로 감싸서 넣는다.
    * 일반변수 일때는 그 변수를 그대로 넣는다.
* 복제할때 origin객체의 members도 clone()이 된다.
* members의 원소가 변수가 그대로 들어있는 경우는 deep cpy, shallow.clone()은 shallowcpy 가 된다.
  결과적으로 members.clone()를 복제객체에 넣기만 하면 끝난다.

#### 상속의 경우
* 복제객체를 포함해서 모든 객체의 members는 사실 Chain이다.
* 그래서 파서는 새로운 배열에 멤버를 넣고나서 이걸 생성한 객체의 members에 add 한다.
* 만약 복제한 객체가 아무런 상속도 없었다면 members는 비어있을 것이고 Chain에는 1개의 container만 들어간다.
* 그러나 상속을 2,3개 받은 상태에서 복제한 객체를 파싱한다면 이미 그 객체의 members에는 2,3개의 container가 들어가 있다.
* 파서는 members에 몇개의 container가 있건말건 항상 새로운 container를 만들어 거기에 파싱으로 멤버를 채워넣고, 그것을 add 한다.


#### 단점: 퍼포먼스 비용
- 왜냐하면 shared member를 따로 모아놓아서 chain을 걸면 더 빠를 텐데말이다.
- 그리고 members에는 여러개의 container가 병렬로 되어있으므로 2 depth 탐색이다.
  최적화 과정을 거치면 이부분을 수정할 수 있다.




## [v] 무엇인 member의 기준이 되는가? --> 메시지 스택이 전파될 수 있는가.

- 메시지 스택이 전파될 수 있는가? 그걸 허용하는가?
- class A
  - class B
    - void print()
      - a = 5;
- A.B.print 이걸 보자. 여기에는 3가지 메시지가 들어있다. {"A"}, {"B"}, {"print"} 그리고 각각은 stack으로 뒤에것은 앞에것에 영향을 받는다.
- 이것은 메시지가 전파되는 구조가 아니다. 각 메시지는 독립적으로 소비되지만, 메시지 스택은 공유되기 때문에 앞의 메시지는 뒤에 메시지에 영향을 끼치는 구조다.
- 만약 Statement가 멤버라면 월드코드에서 누구나가 "a=5" 라는 statement에 접근할 수 있어야 한다.
- 위의 기준대로 각 개념들이 member인지 아닌지 따져보면,
- Statement : 아니다.
- **Method의 인자 : 맞다. method의 첫번째 인자가 무슨 타입인지 rtti로 알아내고 싶을때가 있기 때문이다.**
- **Method의 반환값 : 맞다.**
- **Method의 Method : 맞다.**
- **Method의 멤버변수 : 맞다.**



## Object의_멤버변수_초기화_문제

- 문제정의 : Object가 Managed에서 생성될때는 TClass<T>::instantiate() 안해서 new T()로 객체를 만들고, 만든 T*->getMembers()로 Chain을 가져와서 chain(메소드.getMembers())하고, 메소드의 ObjectVariables()를 clone한걸 chain시키게 하는 동작을 함으로써 객체의 members 초기화가 완료된다. 이 과정은 쉽게 말해서 Native함수들을 Managed에 visible할 수있는 준비를 만드는 것이다. 그러나 Native에서 객체를 만드는 경우는 어떤가? Object 클래스는 부모클래스이기 때문에 이 생성자 안에서는 도대체 사용자 클래스인 자식클래스가 무엇인지 알 방법이 없다. 자식클래스의 생성자에는, 자식클래스가 사용자의 클래스이기 때문에 함부로 생성자의 코드를 작성할 수 없다. 방법은?
### [x] 1안 Lazy 초기화를 수행한다.
  - "Members에 접근은 반드시 getMembers()로만 수행해야 한다" 는 조건이 완벽하다면, 이 함수가 불려졌을때 Members가 비어있을 경우 메타클래스로부터 members를 가져와서 초기화한다.


### [v] 2안 이제 Prototype기반이므로 그냥 객체를 clone() 하면 된다.
* origin 객체가 생성될때는 파서가 직접 members를 채워넣는 섬세한 작업을 한다.
    * members안에 sharable 멤버는 shallow에 감싸여져 있으므로 항상 shallow cpy가 된다.
* 객체가 복제될때는 members.clone()을 하게 되고,
    * shallow에 감싸져 있는것은 shallow copy가,
    * 나머지, members에 객체가 직접 박혀져 있는 건 deep cpy
adfq   * deep에 감싸져 있는것은 deepcpy를 할찌 shallowcpy를 할지 T의 occupiable을 보고 결정한다.




## 멤버변수 기초

- 고찰내용

  - 어떠한 변수를 생성해야한다는 정보를 누가 들고 있어야 하나?

    - [x] 1. 생성자코드에 추가되도록 한다.

      - 아마도 자바에서 사용하는 방법일 것이다.하지만...

    - [v] 2. origin 객체자체가 변수도 들고있고, 클래스를 clone한다.

      - 객체는 변수가 무엇인지 알아둘 필요가 있긴 하다. World에서 변수 접근, 변수에 할당은 모두 "메시지"로 취급한다. 함수나 변수나 구분은 할 필요가 없는 것이다.

      - [x] 클래스가 함수를 담을 수 있다면, 구조상 변수도 담을 수 있는 잠재성이 있다.

      - 그럼, 그걸 어떻게 하는가?

        - v 1안
          - 객체는 Node[] members; 를 갖게 한다. 그리고 여기에 Function이나 멤버변수가 들어가면 된다.
          - 이 Node가 메소드인가, 아니면 데이터타입의 클래스(int, float, double, string ...) 인가를 구분짓는 것은 setter와 getter 메시지를 처리 할 수 있는가 아닌가다.
          - [x] 클래스를 instantiate()를 하게 되면 T()를 생성하고 MetaClass가 가진 members중 Node[]만 복사해서 insert 시켜 주면 된다.
          - [v] 임의 Node  a에게 메시지가 온 경우,  #메시지_전파_알고리즘 에 따라 scope의 관점에서 올라가면 된다.
            - [v] 만약 객체소유의 관점에서 올라가면 멤버변수가 메시지_전파_알고리즘 에 반응해버린다.
            - 즉, 다음과 같은 코드는 용인할 수없다.
            ```namu
                def A
                    void print()
                def B
                    void foo()
                    a := A()

                B().print() // 컴파일 에러. 그러나 객체소유의 관점에서 본다면, B()는 print()를 처리할 수 있다는 얘기가 된다.
            ```

          - [v] 문제점
            - [v] 함수인 Member만 모아서 접근하는 건 쉬움. 이미 있으니까. 하지만 멤버변수인 Member들만 모아서 접근하는 방법은? for문을 도는 방법밖에 없다고 말하지는 말아줘.
              - [x] 이러한 ContainerForContainer를 Chain이라고 이름을 붙였다. 이걸 통해서 해결한다.
                  - 구체적인 설계는?
                    - 1안 - 최대한 쪼갠다.
                      - 하나의 클래스는 private variable, private function, public function, public variable 4종류를 가직 있다.
                      - 파싱시에는 variable, function은 super의 것을 chain을 유지한다.
                      - 파싱이 끝나면 incarnate()를 통해서 원소를 복제하고 chain을 푼다. 이후로는 메타정보 injection이 불가능하다는 얘기다.
                      - 필요시 member라고 해서 variable과 function과 chain을 유지한 것을 값으로 생성해서 반환해준다. 값으로 내보내도 chain을 묶는것 뿐이므로 퍼포먼스 로스는 적다.
                      - 하나의 객체는 private variable, public variable 2종류를 갖는다.
                      - 클래스.instantiate()를 하게 되면 메타클래스의 variable을 복제해서 넣는다. 그리고 생성자를 호출한다.

              - [v] 디버깅 시에는 그냥 for문을 돈다. 최적화가 되면 for문을 돌 필요 없이 인덱스를 지정해서 가져오게 된다. 

      - [x] 2안
        - 준비
          - 메타클래스는 Member를 2개 가지고 있음.  1개는 변수만 들어있는 Member이자 다른 1개를 super로 가리키는 것, 또 1개는 함수만 들어있는 Member. Member에는 함수와 멤버변수가 들어갈 수 있음.
          - 클래스 파싱될때 모든 함수를 먼저 함수Member에 넣음.
          - 그리고 멤버변수Member super를 함수Member로 지정함.
          - 파싱된 멤버변수를 멤버변수Member에 넣음. 이제 멤버변수Member는 모든 멤버변수를 가지고 있음.

        - 결과
          - 메시지전파는 함수Member만 접근하면 됨. 문제없음.
          - 새로운 Node생성시, 멤버변수Member를 복제하여 새로운Node에 집어 넣으면 됨. 해당 Node는 독립적인 멤버변수를 가지고 있으며, 게다가 함수Member는 기존처럼 super로 가지고 있기에 메모리에 포함되지 않음.



## [v] static변수는_어떻게_구현하는가

### [x] 1안
- Generating단계에서 class 객체를 추가하면서 members에는 static변수와 method만 담는다.
- WorldObject생성시 붙여지는 멤버변수는 별도의 const Members& getMemberVariables() const에 담겨지며 이것의 nonconst 버전은 friend 클래스들에게만 공개된다.
- ClassManager에 의해서 제공되는 class는 nonconst로 제공된다.
- 고찰내용
  - v 1안 일반 멤버변수는 class의 멤버가 아니다.
    - Class의 일반 변수는 world에 visible 해서는 안된다. 함수와 static 변수만 visible 해야한다.
    - Generating단계에서 파싱을 하면서 class 객체를 추가하는데 이때 Class.member에는 Method와 static 변수가 nonconst로 접근할 수 있다. 멤버변수는 별도의 내부 members에 담겨지며, 이것들은 별도의 const Members& getMemberVariables() const 와 같이 접근해야 하며, nonconst로 접근할 수 있는 것은 일부 friend로 선언된 클래스들 뿐이다.
    - 대박이네.. 어제하루종일 고민한건데... 이렇게 간단히 풀리다니.
    - v 문제없어 보이긴하는데..시나리오로 검증해보자.
      - C++ 관점에서
        - classManager로 nonconst인 Class를 얻을 수 있다.
        - class는 member인 method와 static 변수를 있는 그대로 제공한다.
        - 객체시 추가될 멤버변수는 const Members getMemberVariables()로 얻어온다.
      - world의 관점에서
        - member인 method와 static변수는 당연히 getMember()로 얻어 올 수 있다.
        - 원한다면 getMemberVariables()도 visible하게 할 수 있을 것이다.

### [v] 2안 shallow 객체를 사용한다.
* shallow로 감싸진 상태에서 members에 들어가 있다면, shallow cpy가 된다. sharable로썩 동작하는 것이다.
* 따라서 occupiable이었던 int 와 같은 객체도 sharable 멤버로 취급되게 된다.
* 처음에 컴파일러가 어떻게 감싸서 members에 넣느냐에 따라 static 멤버인지를 결정 할 수 있게 되는 것이다.



## [x] 객체의 Member initializing 알고리즘
- Node는 member를 가지고 있다.
- 각 함수는 자신이 private 여부를 가지고 있다.
- ObjectType Class는 variable member와 function member, 그리고 Chain<T> member 3개를 가지고 있다. 이중 앞의 2개를 member가 chain하고 있다. function이 앞에, variable이 뒤에 속해있다.
- variable에 바로 push를 해도 알아서 잘 들어간다.
  - Container는 Attacher처럼 어떠한 타입에 대해서도 일단은 호출이 가능하고 AttachableType() 체크를 통해서 받아들일지 아닐지를 결정한다. 따라서 chain인 member도 일단은 push가 가능하다. push 할 원소를 앞의 chained 컨테이너와 뒤의 컨테이너에 각각 물어봐서 넣을 수 있다고 판단되면 그곳에 넣는다.
- 각 variable, function은 부모의 variable, function에 대한 chain이 아니다. 상속시, 부모의 함수를 push 하고 자신의 것을 넣는다.
  - 중복으로 인한 메모리를 낭비하는 이유는, 이게 퍼포먼스가 빠르기 때문이다.
- 객체를 생성하는 방법은 variable만 복제하는 것이다. 복제된 variable은 원본 function을 chain한 상태가 된다.
- 고찰내용
  - 클래스 문제점
    - factor가 많다.
      - private-public 이냐
      - 멤버냐 function이냐
      - member
      - private-variable
      - public-variable
      - private-function
      - public-function
      - private-member
      - public-member
      - 하나의 컨테이너로부터 다양한 컨테이너를 뽑아내는 방법은?
      - 필수인 것들만 뽑아보자.
        - all-variable : 객체 생성을 위해서
        - all-function
        - all-member : 일괄 적용을 위해
        - public이냐 private이냐는 건 파서가 직접 판단해서 런타임 에러를 올려보내도록 한다.
        -  function이냐 variable이냐 를 구분하지 않을 방법은?
          - 이는 빠른 객체 생성을 위해서 필요했다. 객체 생성시에 variable을 복사해야 하기 때문이다.
          - Node는 member만 가지고 있고,
          - 클래스 & 객체는 변수member + 함수member 로 이루어져 있다. 이 2개는 member와 동기화 되는 거고.
        - member가 chain이며 function이 앞에 들어가 있는 상황에서  member.push(variable)를 하게 되면 어떻게 되는가?
          - 각 container는 어떠한 타입을 받을 수 있다는 정보가 있어야 한다. 기존 World는 이게 없었기 때문에 Container<T>는 있어도 ContainerBase 같은 건 있을 수 없었던 것이다. ContainerBase는 push(Node&)가 있어야 하며, 어떠한 타입에 대해서 연산이 가능한지를 알려주는 getPushableType() 같은 게 있어야 한다. 마치 Attacher 처럼.
  - 전역변수인지 아닌지는, 해당 object가 어느 scope에 속하는가에 따라서 정해질 뿐이다.
  - 상위 scope에서 객체를 접근할 경우 재귀적으로 접근이 동작하지 않는다.
  - 재귀적으로 할 경우 중복된 메시지수신이 존재했을때 순서에 의해서 수신자가 반응하게 되므로 예상치 못한 결과가 나오게 된다. 송신자는 접근시, 접근할 객체를 찾을 타겟을 정확하게 지정해야 한다.









## [v] 함수 디덕션.
  
### [v] 요구사항
  - 함수디덕션의 핵심은, expr에 담긴 argument들을, expr에서 호출하려고 하는 함수명세를 통해 도출된 함수후보군 중에서 가장 비슷한 함수의 parameter로 명시적 캐스팅을 묵시적으로시켜서 호출이 허용되도록 만드는 것이다.
  - 모든 명시적캐스팅들은 주어진 상황에 따라 묵시적으로 캐스팅이 될 수 없다. 오직 pretype 들에 대해서만 world가 미리 정의한 묵시적 캐스팅만 해당한다.
  - 여기서 핵심은 함수후보군을 찾아내는 것과, 그 후보군 중에서 가장 적합한 것 1개를 도출해 내는 과정과, 그 프로세스를 어느 클래스에서 가지고 있어야 하는 것 3가지다.
  - 가장 먼저 #묵시적_캐스팅-정책 이선결되어야 한다.
- 고찰결과 각 인자는 implicit casting(업캐스팅과 prebuilt 타입간의 제한된 casting)만 고려해서 가장 bestfit을 찾아내면 된다.
- 속도가 매우 중요하다. 캐스팅은 상당히 많이 사용되기 때문이다.
- .cast<T>는 묵시적캐스팅이다.
  - world에서는 invisible하다.
  - 빠르다.
  - 함수 deduction시 사용된다.
  - 다라서 Method 안에서 사용되는 캐스팅은 to()가 아니라 cast<T>다.
  - 묵시적 캐스팅은 업캐스팅과 기본제공타입의 명시적캐스팅이 있다.
  - 기본타입의 명시적 캐스팅은 매우 빠르게 제공되어야 하므로 override를 사용해서 제공된다. (즉, 이 기본타입들은 생성자를 통해서 캐스팅을 공개하지않아도 된다는 것이다. 이 방법은 오래걸리니까).









### [v] deduction 함수 바인딩
- c++처럼, 함수의 signature와 정확히 일치 되지 않더라도 유도리있게 파서가 "이 심볼이지??ㅋㅋ" 하면서 매칭해주는 알고리즘이다.
- 고찰로 알아낸, 이 문제의 가장 포인트는,
  - 묵시적 형변환으로 함수를 바인딩하는 것은 "**사용자의 의도와 실제가 달랐을 경우, 유도리있게 비슷한 걸 정해준다**"는 컨셉임을 잊지 말하야 한다. 이는 "형변환이 가능하다"와는 다른 얘기인것이다.
    - 예를들면 [float.to](http://float.to/)(string)은 가능하다. 하지만 그렇다고해서 foo(string) 함수에 사용자가 foo(3.5)로 호출하는 것이 용납되는 것은 아닌 것이다. 명시적으로 캐스팅을 해야하지. 이를테면,
      - foo(string)
      - foo(int)
      - foo(3.5)는 어디로 가야 하나? --> 정답은 foo(int)로 가야한다. 둘다 형변환은 가능하지만 묵시적변환은 int -> string은 동작하지 않아야 하는 것이다.
    - 하지만 foo(float) 함수를 foo(5)로 하는 건, 유도리 있게 해줄만 하다고 여겨지게 된다.
- 묵시적 형변환은 "계열" 을 기반으로 판단된다.
  - Numeric계열(int, char, float, bool)
  - 문자열계열(string)
  - custom계열(클래스 계층구조로 판정)
  - 계열이 다르면 묵시적 형변환은 일어나지 않는다.
- 알고리즘은 다음과 같다.
  - 파서는 foo(int, float)라는 코드를 봤을때 적절한 call 코드블럭으로 파싱해야한다.
  - 함수명 foo를 갖고 있는 현 scope의 모든 함수목록을 가져온다.
    - foo(char, string), foo(bool, result), foo(result, float), foo(int, float, string), foo(float, int)
  - 가져오는 도중 정확히 일치되면 그걸로 끝낸다. --> END
  - 차선책을 찾기 위해 본격적인 묵시적형변환을 통한 함수바인딩 로직에 들어간다.
    - 가져온 후보군 들을 탐색하면서,
      - 메소드들에게 parameter를 넘겨주고 실행가능한지 evaluate()하라고 한다.
      - int now = 메소드::evaluate(int current_most_low_evaluated_value) {
        - 인자 다르면 return -1
        - int sum = 0;
        - for 모든 Arguments {
          - sum += evaluated = Argument.evaluate(param[n]) {
            - String/Numeric::evaluate() {
              - if 같은 계열 아니면, return -1
              - return 0;
            - }
            - 기타 모든 계열(==custom::evaluate() {
              - if ! param.getClass().isSubOf(getClass()) return -1
              - return param.getSuperClasses().level - getSuperClasses().level;
            - }
          - }
          - if evaluated < 0, 탈락.
          - if sum > current_most_low_evaluated_value, 탈락. 더 볼것도 없다.
        - }
        - return sum;
      - }
      - if now < 0, 후보군에서 제거
      - if !now, 이 놈입니다. 잡아가세요.
    - if 남은_후보군.getLength() >= 2, 모호성의 오류
    - if ! 남은_후보군.getLength(), 함수가 없습니다. 에러.
    - return 남은_후보군[0];
- 위와 같이 하게 되면, 다음과 같은 상황에서도 모호성의 오류가 나온다.
  - void print(int, char, float) {} // 1
  - void print(float, float, int) {} // 2
  - print(3.5f, 3.5f, 3.5f);
- 얼핏보면 float이 일치된 갯수가 2번이 더 많으니까, 2번째 print로 가야하지 않냐고 생각할지도 모른다.
- 고찰 내용
  - World 함수 안에
    - foo()
    - foo(char)
    - foo(string)
  - 3개가 있을때 내가 foo(20440) 을 한 경우, 어떤 함수가 호출되어야 할지를 정하라는 것이다.
  - 1안 범용의 룰을 만들고 모든 타입에 대해서 적용시킨다.
    - 1안 아무런 호출도 하지 않아야 할까?
      - 그럼 foo(int)
        - foo(string)
        - foo(char)
        - 이 상황에서 foo(36452.5) 는 어떤가? 이래도 아무런 호출을 하지 않아야 맞는가?
        - 아니면 foo((int) 36542.3) 나, foo((int) grade) 를 앞에 붙여줘야 맞는가?
      - 다른 예는 어때?
        - foo(Parent)
        - foo(Child)
        - 에서 foo(GrandChild) 는 어떤가?
    - 2안 하니면 숫자와 가까우니까 char?
    - 3안 아니면 경우의 수가 가장 크니까 string?
  - 2안 축소화된 매우 알기쉬운 범용룰 1개를 만들고, 일부 타입에 대해서만 특수룰을 적용시킨다.




## TClass Origin 새로 설계
### [v] 요구사항
* Origin 객체라는 것이 나왔고 사실 이것이 Type을 대신하고 있다.
* 이제 기존 TClass가 Type을 대신하고 있었으므로 이걸 해결해보자.

### [v] 1안 TClass를 제거하자.
```cpp
template <typename T>
class tRtti {
public:
  bool isADT() {
  bool isPtr()
  ..
  ..
  origin* _org;
  tRtti<typename T::Super> _getSuper() { return tRtti<T::Super>(); }
  oigin& getOrigin() { return *_org; }
  res& init() {
    originMgr& mgr = Core::get().getOriginMgr();
    _org = mgr[getName()];
  }
};

class object : public node { // object는 originMgr에 있으면 origin객체인 것이다.
  TStrong<TArray<Object> > _supers; // Origin이 복제되어도 shallow copy.
  TStrong<TArray<Object> > _subs;
  bool* _isInit;

  object() { _isInit = new bool(); }
  object(const object& rhs) { _isInit = rhs._isInit; }

  virtual TArray<Object> getSupers() { return _supers; }
  virtual TArray<Object> getSubs() { return _subs; }
  const object& getSuper() { return getSupers()[0]; }
  const object& getOrigin() { return Core::get().get....; }
  bool isInit() { return _isInit; }
  res& init() {
    if(isInit()) return rOk;
    Origin& sup = getSuper(); // init을 돌리기전에 모든 Origin객체들은 일단 add 되어있다.
    if(sup.init()) return rAbort;
    sup.getSubs().add(*this);
    getSupers().add(sup);
    return tRtti::init();
  }
};

class originMgr {
  hashmap<String, Object> ...;
  operator[](const string& name);

  private res& set(Object);
  Object& get(const object& origin?) {
      만약 hashmap(origin.getName()); 없으면,
      hashmap.put()
  }
  template <typename T>
  Object& get() {
      return get(Dummy<T>())
  }

  res& init() {
      Thing, 
  }
};


template <typename T>
class dummy : public Object {
    // T가 ADT여도 생성이 가능해야 한다.
    // T에 대한 Name을 제공해야 한다.
    // T의 부모와 자식을 가질 수 있어야 한다. (Object가 이걸 하고 있다)
    // World에 visible한 멤버들은 이 dummy에 주입되어야 한다. (T::onInitMembers() 같은걸 호출해야 할것 이다)
}


class node {
  // Object보다 상위클래스들은 NAMU_BASE_CLASS를 쓴다. 그러면 자동으로 static 타임에 orgMgr::get().get<This>();를 넣어둔다.
  // 안쪽에서 lazy 하게 org객체가 초기화된다.
  NAMU_BASE_CLASS(

  virtual res& init() {
    if(isInit()) return rAbort;


    return rOk;
  }
  static res _onInitMethods(tArray<Method>& tray) {
    Object._onInitMethods(tray);
    Instance._onInitMethods(tray); // Unit, Instance 의 것들이 담겨진다. visible 하게됨.
    // 보통은 자기껏만 담도록 macro가 expand 된다.
  }
  virtual bool isInit() { return true; }
  virtual TArray<Object> getSons();
  bool isSub(const Thing& rhs) {
    // 1. tier 비교
    // 2. 동 tier가 같은 클래스인지 비교
  }
  bool isSuper(const Thing& rhs);
}



// 사용법:
tRtti<MyCppObj>::getOrigin().getName().... // 1
Core::get().getOriginMgr()["MyCppObj"].getName() // 2
```

* Origin은 3군데에서 불러진다.
* C++ 빌트인 클래스의 경우, macro NAMU_MACRO에 의해.
  * .item(모듈파일) 에 의해
  * .namu 파일에 의해

* Origin을 불려지면 OriginMgr에 담겨진다.
* 1,2는 먼저 수행되며 수행후 init()이 된다.
  * 2를 보면 알겠지만 native 클래스는 Mgr클래스로부터 상속을 받을 수 없기때문에 가능하다.

* TClass는 tRtti가 되며 단순히,
  * 메타프로그래밍 + Origin객체에 쉽게 접근가능
* 만 지원하게된다. mgr에서는 필요가 없다.


* cast(), isSub(), getSubs() 모두 Thing에서 호출이 가능해야 한다.
* TClass는 사라지고 Object가 계층 구조를 보관한다.
* Origin객체란 OriginMgr에 보관된 Object를 말하는 것이다.
* Origin객체는 OriginMgr["name"]으로 쉽게 접근 가능하다.
* Thing, Instance 들은 Object보다 상위인데도 cast, isSub가 가능해야 하므로 이를 위한 DummyOriginObject를 생성한다.
  * WrappedMethod는 초기화가 된 이후에, this를 호출시 바인딩한다.
  * DummyObject는 OrgMgr가 시작하기 전에 각 클래스들에 매크로(NAMU_CLASS)로 정의된 initiator가 static 변수 초기화 타임에 orgMgr에 get()을 호출한다.
  * orgMgr.get<T>()은 T에 대한 dummyObject를 생성하고 이 더미는 T의 멤버, visible한 변수, 부모와 자식의 관계정보를 모두 가지고 있어야 한다.
    * tRtti로 Object보다 상위의 모든 클래스들을 알아내서 만들어낸다.
    * 모든 월드 native 클래스들은 Super라는 typedef가 있어야 한다.
    * tRtti _getSuper()는 오직 OriginMgr에만 열려있다. 다른 사람들은 Thing::getSuper()를 쓰자.

### [v] Q1. Instance에 있는 getId()도 visible 할 수 있는가?
* 예전 설계에서는 TClass가 Type을 담당했기 때문에 Node 보다 구체클래스들도 TClass에 메소드를 넣을 수 있었다.
  * Tclass는 이러한 메소드들을 담아두는 역할을 수행했기 때문에 Node::getMembers()를 갖지 못해도 일단 메소드를 보관해  놓았다.
  * Object가 나올때는 이러한 TClass()의 메소드를 shallow copy했기 때문에 문제가 발생하지 않았다.

* 이제 새로운 설계에서는 TClass는 사라지고 Origin 객체가 이걸 대신한다.
  * 메소드들은 NAMU 매크로를 쓰면 일부 매소드들에서만 참조할 수 있는, wrap한 메소드 배열을 returning 하는 static 메소드를 private로 하나씩 박아넣고 있다.
  * [x] getMembers() 를 가지고 있는 Node는 초기화시에 Node::onInitWrappers()를 부를때 모든 supers를 다 부른다.
  * OriginMgr는 외부에서 <T>get()이 호출되면 안에서 dummy객체를 만들고, dummy객체는 onInitWrappers()를 호출해서 더미안에 멤버를 채워넣는다.
  * 보통은 origin객체 초기화시에 부모origin의 members를 복제해 넣고, onInitWrappers()를 호출해서 wrapped된 메소드 배열을 가져와 getMembers에 넣는다.

### [v] Q2. Thing, Instance에도 여전이 cast, isObject를 쓸 수 있는가?
* TClass가 Object로 이관되면서 계층 구조는 Object에서부터 가지게 된다.
* Thing, Instance는 Object가 아니기 때문에 여기에 계층 구조를 직접 넣을 수없다.
* origin객체에 접근할때 항상 originMgr["이름"] 으로 접근한다. 문자열인, 이름이 중요하다.
* Thing, Instance에 대해 더미Object를 생성해서 시작하자마자 originMgr가 생성해둔다.
  * 생성해야할 더미Object는 각 Thing, Instance들이 별도 정의된 매크로에 의해 expand되어, originMgr::_getBuiltIns()에 append해둔다.
  * 일단 Object가 주입만 되면, 런타임시에는 더미Object이건 정상 Object이건 구분없이 돌아갈 수 있다.
* Thing::isSub()가 불려지면 originMgr["Thing"]을 찾아내서 사용할 것이다.

### [v] Q3. 최적화 방안
* 객체가 lost 를 식별하면 자동으로 originMgr에서 업데이트 하는 tWeak를 모든 thing들이 share 하면된다.

## [x] 1-2안 1안은 대체로 맞지만 Reflection 정보가 Object에 있으면 안된다.
### 이유
* 왜냐하면 Thing이나 Instance 같은 애들은 isSub()를 사용할 수 없게 된다. Object클래스가 아니므로 _supers를 갖지 못한 것이다.

### [v] 다음처럼 하면 된다.
* TRtti든 TClass든 TTrait든 아무튼 뭔가는 C++ Reflection (T가 무엇인지, primitive인지 포인터인지, 메소드인지, static인지  등등...) 만 동작하는 클래스가 하나 있으며 이것은 어떠한 종속성도 없다.
* OriginManager는 그대로 유지 된다.
* TClass는 제거도 유지된다. 대신 Thing은 isSub, isSupers, getName을 할 수 있어야 한다.
* Native를 wrap 해서 mgd로 만들어주는 함수는 onWrap() 으로 명명하며, Thing에 둔다.
* NAMU_CLASS 매크로에 method 목록을 지정할 수 있으며 이 경우에만 onWrap()을 오버라이딩 한다.
* TWrappedNativeMethod는 기존 알고리즘과 동일하다. 주의할 점으로, native 메소드를 호출할때 명시적으로 메소드를 지정해야 한다. 멀티디스패치가 되지 않도록 한다.
  이를테면, this->T::MethodName(Args...)가 되야 한다.  this->MethodName(Args....) 가 아니라.
	*클래스인가 멀티디스패치로 할 경우, world 문법상에서 Native를 wrap한 origin객체 안에서 super.MethodName()가 불가능해진다.
* MgdObject는 NAMU_CLASS의 method목록이 없는 버전을 사용한다. MgdObject는 별도의 native 메소드가 없기 때문이다.
  이경우 Object의 onWrap()까지만 불리므로 Object까지의 C++ 메소드들만 wrap 된다.
* 모든 NAMU_CLASS 매크로는 __sub_clses, __super_clses, 이들의 static 접근자인 getSubsStatic(), getSupersStatic()의 정의와 getSubs(), getSupers()를 overriding한 메소드를 정의한다.
* getSupers(), getSubs()는 Super::getSubs()를 불러서 복제한 후, onWrap()을 호출하여  캐시화한다.
* NAMU_CLASS의 메소드 목록이 있는 버전은 NAMU_CLASS의 인자 T가 Node이거나 Node보다 하위클래스여야 한다. static_assert등으로 될 수 있으면 막자.

### [x] 왜 이방법이 안됩니까?
* 지금 하고자 하는 것은 결국 TClass의 구현을 Thing에다가 넣어서 TClass를 없애자는 것
* 그러나 OriginManager에 Thing 을 insert 할 수 없다. Thing은 ADT이므로 객체를 만들 수 없는 것이다.

### [x] 그렇다면 그 제약을 안고가자. -> orgMgr는 어떠한 ADT라도 dummy를 만들 수 있다.
* 먼저 Worldfrx에서 stub을 채워서 ADT를 없앤다.
* MgdObject를 상속받은 3rd파티 개발자는 ADT를 클래스 상속계층 중간에 끼울 수 있다.
* 그때 ADT가 중간에 있어도 말단 구체클래스에서는 ADT의 onWrap()을 불러줄 것이므로 멥버를 가져올 수 는 있다.
* 그래도 여전히 3rd파티 개발자는 자신의 ADT의 TClass 같은 것을 가져오거나, 자신의 객체가 그 ADT의 일종인지 알아내는 방법은 없을 것이다.
  제약으로 안고간다. 어짜피 c++의 dynamic_cast 등을 쓰면 된다.

## [x] 3안 결국은 TClass와 같은 설계가 필요하다.
* C++에는 Worldlang에는 없는 ADT라는게 존재한다. 그리고 ADT는 별도의 member 혹은 wrapped native Method들을 어디선가 들고 있어야만 한다.
* 따라서 TClass가 필요하다. Origin이라는 명확한 객체로 뽑아 낼 수 없는 T에 대해서도 멤버정보를 들고 있을 수 있는 클래스템플릿.

### [v] TClass<T>를 없애려고 한 이유
* 되도록이면 클래스 갯수를 줄여서 경량화 하고 싶다.








## [v] origin 객체는 생성자 호출이 불가능할때가 있다

* 기본생성자가 없으므로 시스템에서 origin객체를 하나 만들어놓고 시작이 불가능한데?

### [v] 1안 문제가 없다
* 임의의 타입 T가 ADT일 경우 더미객체가 만들어지므로 항상 문제는 생기지 않는다.
    * 생성자를 호출하지 않기 때문이다.

* T가 구체타입이나 디폴트 생성자가 없을 경우가 문제다.
    * T가 만약 worldlang에서 정의된 경우라면: worldlang에서의 origin객체는 절대로 생성자가 호출되지 않는다.
        * 생성자는 복제객체가 만들어질때만 호출되는 것이다.

    * T가 만약 native에서 정의된 구체타입일 경우: 별다른 조치를 취하지 않으면 NAMU_CLASS 매크로 안쪽에서 에러가 발생할 것이다.
        * 만약 개발자가 어떻게든 디폴트 생성자 없이 NAMU_CLASS를 쓰고 싶다고 한다면 직접 NAMU_CLASS 대체하는 코드를 넣어줄 수 밖에 없다.






## [x] 객체 정의 --> 위에 다 있는 내용이며, 일부는 잘못되었다.

 def Obj := Occupying
	* this를 점거한다.
	* origin객체가 될 수 있다.
	* sharedmember가 존재한다.
		* sharedmember멤버를 런타임에 추가할 수 있다.
		* sharedmember에 일반 변수가 들어 있으면 static이다.
			* 그 변수가 refer로 감싸져있으면 sharable.
			* 아니면 occupiable.
	* shared member와 별도로 occupiying member가 배열로 존재한다.
		* 외부에는 getMembers()는 sharedmember와 occupying member의 chain구조다.

 [v] 중첩객체


## [] 문법
* 객체의 정의를 객체 정의 블록문 안쪽에서 하면 된다.
* 메소드 안에서도 가능하다.
* expr 취급이므로 메소드 호출 안쪽에서도 가능하다.

```cpp
def Part
    __name = "unknown"

    def name
        get: _name
        // can't call set()

def Part2

    def Nested // nested obj.
        void say()
            c.out("name=$name") // can access scope of owner object.

    def name := "unknown" // nested obj. prototyped from str
        get: path = directoy + val // str.val
        _set: // can't modify value of "name" at outside.

    _directory := "/home/me/"
    path := directory + name


// Part2().Nested는 Part2.Nested의 복제.
// 위의 Part2 origin객체는 Nested origin객체 
// 이걸 막으려면,
def Part3
    def $Nested // usually declare nested origin obj as static.
        void say(): c.out("...")
// Now, all copies of Part3 shares same Nested obj. no instance bloating.
```








## [] 구현


* protected건 public이건 모든 inner 객체는 owner를 가지고 있다.
* 또한 모든 중첩 객체는 복제가 가능하다.
```cpp
def plant
	name = ""

def bowl := plant
	plants = plant[]()
	void print()
		for p in plants
			c.out("$p.name, ")
	def carrot := plant
		print() // outer.print()

b = bowl()
c = b.carrot;
c1 = c1()
// c1.print()의 결과는 c.print()의 결과와 같음
```

## [v] Q1 protected 중첩객체인 경우,  owner.this도 접근 가능? --> 네.

## [v] Q2 그러나 property는 그럼?
```cpp
def myObj
  _name = ""
  def nested := str?
    get: _name // nested는 _name을 접근 중.
```






## [v] this가 겹치는 순간

### 문제

```cpp
def myObj
  _age = 30

def child := myObj
  def age = int?
      $set: // myObj.age를 가리키도록 하고 싶다면?
        // 참고로 현재 this는 age인 상태.
```

### [x] 1안 각 클래스는 static으로 private this 라는 변수를 가지고 있다.

```cpp
def myObj
  $this := This?

def child := myObj
  $this := This?
  def age := int?
        $set: child.this
```

### [v] Q2 super.this를 사용한다면?

```cpp
def myObj
  age := 5

def child := myObj
  $this := This?
    def age := int?
        void say()
      // myObj.age를 사용하고 싶다면.
```

```cpp
1: myObj.this.age
2: myObj.age
3: this.myObj.age
4: this.myObj::age
```

### [x] 2안 A.this를 한 경우, A에 대한 this property가 동작한다면

### [x] 3안 namespace를 사용한다면?
* members는 member로 등록될때 Name이외에도 namespace 항목이 또 있음.
* getmembers에서 name만 입력하면 구체 --> 기본 순으로 같은 name인걸 찾음
* namespace까지 정확하게 입력하면 탐색시 namespace도 고려해서 찾음.
```cpp
def myns

  def A
    void foo()
    void boo()
      foo()
      this.foo()
      .myns.A.foo()
      myns.A.foo()
      A.foo()
```

#### namespace 문법
* def로 재활용하자. 굳이 뭘 또 키워드를 만드냐.
* 클래스 확장 문법을 지원해줘야 namespace가 제기능을 한다. (그래야 다른 소스파일에서도 그 namespace안에다가 멤버 넣지)

#### [v] Q3 this와 name이 다를때의 문제

```cpp
def parent
  void foo()
def child := parent
  void foo()
  void exec()
      // parent의 foo()를 호출하고 싶다면?
```

#### 고찰

* parent.foo() 와 this.foo()는 어떻게 다른가?
  * .은 객체 안에 있는 객체에 접근하는 것이다.
  * this.parent.foo()를 한 경우, parent.foo가 하나의 메소드명이 아니라 parent라는 객체 안에 있는 foo를 찾는걸 의미하게 된다.

### [x] 3-1안 각 식별자는 namespace가 존재한다. 그러나 키워드는 없다.

* namespace가 존재하나 worldlang에서 namespace를 명시적으로 줄 순 없다. 객체의 def를 통해 간접적으로 정의된다.

```cpp
def namu
  $name = "namu"
    def device // 풀네임: namu::device
      name := str? // namu::device::name
        get: namu::name
      def part := device
        void foo(): throw ERROR
        device = ""
            name = ""
            void boo()


        str foo()
      c.out(this.part.namu::device::foo())
            c.out(this.part.device::foo())
      return name // this.name

```

```cpp
// namespace를 이름에 넣자는 생각:
1:  parent::foo()
    this.parent::foo()
1-1:parent's foo()
    this.parent's foo()
2:  parent.this.foo()
3:  parent#foo()
    this.parent#foo()
4:  parent-foo()
    this.parent-foo()
5:  parent_foo()
    this.parent_foo()
6:  parentFoo()
    this.parentFoo()
7:  parent`foo()
    this.parent`foo()
```



### [x] 3-2안 특정 타입화된 this

```cpp
def parent
  void foo()
def child
  void foo()
    void exec()
      parent.foo()
      child.foo()
      foo()
      this.foo()

      this$parent.foo()

      c.out(this.part$device.foo())
      c.out(part%device.foo())
```



#### [x] Q2. 여기서 한발 나아가 타입 수렴이라는 키워드를 만들면?

```cpp
def dev
  dev()
    dev(str new): name = new
  name := ""
        =>set: len = name.len
  len = 0
    void say(): c.out("name=$name")

def bicycle := dev
  _parts = { def handle := dev
    handle(): super("handle")
  , def wheel := dev
    wheel(): super("wheel")
  }
  =>void say()
        for e in parts: e.say()

b = bicycle
b.say()

d = dev bicycle
d.say()

f = dev%bicycle
f.say()

f1 =
```

* 많이 생각해봤는데, 쓸데가 없다. 예상치 못한 동작이 나간다.

### [x] 4안 this안에 base클래스와 owner클래스가 들어있다면?

```cpp
def base
  name := "base.name"
def marine := base
  name := "marine.name"

  def gun := base
    name := "gun.name"

        void foo()
            base.name // base origin객체의 name
            name // gun객체의 이름
            this.name // gun 객체의 이름
            this.base.name // gun객체의 base의 name
            marine.name // marine origin객체의 이름.
            marine.base.name // marine origin객체의 상속받은 base의 name.
            this.marine.name // 이 this 객체와 연관된 marine객체의 name.
            this.marine.base.name // 이 this객체와 연관된 marine객체의 부모클래스중 하나인 base의 이름.

            m = marine() // .marine()
            m = this.marine() // this와 연관된 marine객체의 복제
            m = .marine() // .marine()

            b = base()
```

#### [x] 4-1안 항상 classscope이 우선한다면?

```cpp
def base
  name := ""
def marine := base
  name := ""

    def gun := base // marine의 base 로부터 assign
    def gun2 := .base // 밖의 base 로부터 assign
        name = ""
        void foo()
          base.name // gun2가 상속한 base객체의 name.
          name // gun2의 name
          this.name // gun2의 이름
          marine.name // this와 연관된 marine객체의 이름.
          marine.base.name // this와 연관된 marine객체의 name
          this.marine.name // this와 연관된 marine객체의 name
          this.marine.base.name // 이 this객체와 연관된 marine객체의 부모클래스중 하나인 base의 이름.
          m = marine()
          m = .marine()
```



### [v] 5안 owner, sub의 사용
```cpp
def base
	name := ""
def marine := base
	name := ""
	age = 0
	def gun := base
		void foo()
			super.name // gun의 부모 base의 name
			name // gun의 name
			this.name // gun의 name
			marine.name // origin객체 marine의 name
			this.marine.name // 에러
			outer.name // this를 가지고 있는 marine의 name
			age // ⇒ outer.name
			outer.super.name // this를 가지고 있는 marine의 부모클래스 base의 name
			a = outer()
			a1 = outer().super()
```
#### 알고리즘
* scope은 다음의 규칙을 따른다.
	* locals : local scope의 배열
	* objects : object scope의 배열
		* 대개, 새로운 object가 call되면, object는 이전의 object scope을hidden 처리시킨다.
		* 그러나 이 object가 자신이 inner일 경우는 outer를 그대로 유지시킨다.
		* 모든 inner 객체는 outer를 변수로 가지고 있다.
		* 모든 object는 sub를 변수로 가지고 있다.
	* globals

* 예를들면, 다음처럼 구성된다.
	* locals
		* local[1] : visible
		* local[0] : visible
	* objects
		* object[3] : visible // inner
			* 부모클래스의 모든 멤버를 포함해서
		* object[2] : visible // outer
			* 부모클래스의 모든 멤버를 포함해서
		* --------------- hidden - marker ---------------
		* object[1] : hidden
		* object[0] : hidden
	* globals

#### 분석

* 단점
	* inner가 길어지면, outer.outer.super.super 가 된다.
		* 반론 : 다른 언어들은 대부분 이런 기능조차 지원하지 않는다.
		* 정 길다면 다른언어들처럼 별도의 reference를 생성자에서 받도록 직접 짜라.
	* 명시적으로 클래스명을 딱 지정하지 못한다.
* 장점
	* 새로운 문법이나 특문의 추가가 없다.
	* 직관적이다. 외울필요가 없다.




#### [v] Q1 namspace도 확장을 쓸것이고, 이것도 결국 중첩클래스이다. public 문제 어떻게 되나?






















## [v] def 문법

### def의 시행착오

#### 아이디어

```cpp
tutorial sayer::
    void say(str[] words) // 반환형 명시
        for w in words
            c.out("$w ")

    str[] create_lists(int len, str base) // 함수 정의시에만 타입 모두 적기
        ret = [""] // 안쪽에서는 절대 명시 안함.
            // Q.
            ret = [sayer] // ret는 sayer가 들어있는 tutorial의 배열이 되게 하고 싶다면?
                // 1: ret = [(tutorial) sayer]
                // 2: tutorial[] ret = [sayer]
        for l in len
            ret.push("$base$l")
        return ret

app::
    void main() with org
        str[] proxy(str[](int, str) func, int len, str base)
            func(len, base)
        list = proxy(create_lists, 3, "hello")
        say(list)

    event onConsoleOut
        if sfsdfsdf
        if sdfsdf
       then
```



#### 2안

```cpp
def tutorial
    name
        get: class.name
        _set

    func void execute(void(str[]) func, str[] params)

def tutorial HelloWorldTutor
    func void execute(void(str[]) func, str[] params)
        func(params)

def app
    func void main()
        // 1
        func void foo1(str[] params)
            for p in params
                c.out("$p ")
        HelloWorldTutor.execute(foo1, ["hello", "world"])

        // 2
        HelloWorldTutor.execute(func(params): for p in params: c.out("$p "), ["hello", "world"])

        // 3
        _tutor()

    void _tutor()
        HelloWorldTutor.execute(func(params)
            for p in params
                c.out("$p ")
        , ["hello", "world"])

    age = 3
    event MyEvent()
           age != 3
    then
        _tutor()

```



```cpp
def Part
def Part Button
def Button PlainButton
def Button QuickButton
def Part Wheel
def Wheel AccurateWheel
def Part Body
def Ergobody Body

def Part Mouse
    Mouse(Button newleft, newright, newwheel, newbody)
        left = newleft
        right = newright
        wheel = newwheel
        body = newbody
    left = Button
    right = Button
    wheel = Wheel
    body = Body

def Builder
    Body buildBody()
    Wheel buildWheel()
    Button buildLeftButton()
    Button buildRightButton()

def Builder BusinessMouseBuilder
    Body buildBody(): PlainBody()
    Wheel buildWheel(): PlayinWheel()
    Button buildLeftButton(): PlainLeftButton()
    Button buildRightButton(): PlainRightButton()

def Builder GamingMouseBuilder
    Body buildBody(): ErgoBody()
    Wheel buildWheel(): AccruateWheel()
    Button buildLeftButton(): QuickLeftButton()
    Button buildRightButton(): QuickRightButton()

def director
    Mouse build(Builder builder) with builder:
        Mouse(buildLeftButton(), buildRightButton(), buildWheel(), buildBody())

def app
    void main() with director
        Mouse    m1 = build(BusinessMouseBuilder),
                m2 = build(GaminMouseBuilder

```



#### 3안

```cpp
obj #MyType
    age = 20
    name = "Taehun"
    say(): c.out("I'm $name and $age years old.")

+app
    void main()
    void say(obj = MyType)
        obj.say()
```



#### 4안

* 아이디어

반환형을 적는 이유는, 구체타입과 선언타입이 다르게 되는 경우, 이를 쉽게 반환하도록 하기 위함. 그래서 함수 내에서는 타입유추로만 작동하게끔 하자는 것이었으나, 멤버변수 정의시에도 타입선언은 필요하다.

```cpp
class Part
class Body : Part
class Button : Part

parts = [Body()]
parts.add(Button()) // 이게 안되게 된다.

// 1
Part parts[] = [Body()]

// 2
parts = Part[Body()]

// [x] 3 []는 타입이 항상 obj로 고정이다.

class A
    age = 20 // 이런건 쉽게 예측 가능하다
    part = Button() // 이건 좀 어렵다. part는 실제로는 button 니까.

    A()
        part = Body() // 실패한다.

    // part는 Part 타입은 다 넣을 수 있다. 그리고 초기화는 Button()로 된다.
    // 이걸 잘 표현 가능한 문법은?
    // 1
    Part part = Button()
    // 2
    part = Button():Part
    // 3
    part = Part, Button()
    // 4
    part = Part
    part = Button() // 2줄로 쓰게 한다.
    // 5
    part = (Part) Button()
    // 5'
    // 5번의 아이디어를 확장한다. 즉, 문법을 단순화한다.
    //    1. 타입 정의는 항상 '='를 사용한다.
    //    2. 단, 초기화시에 실체타입과 겉 타입을 별도로 정의하도록 한다.
    //    3. 그리고 그 문법은 캐스팅을 차용함으로써 문법의 갯수도 줄인다.
    //    4. 단 기존 캐스팅 문법은 괄호를 사용하므로, 더 줄여야 한다.
    part = Button() as Part
    activity = get_service().get_concrete_activity() as Activity
    //    장점:
    //        1. as 이므로 () 보다 타이핑이 단순하다.
    //        2. 생각의 흐름상, 캐스팅은 나중에 떠오르게 된다. 그러므로 뒤에 위치하는게 편리.
    //        3. as 이므로 읽는데도 무리가 없다.
    //    오. 괜찮은데.

    // 함수에도 적용해보자.
    say(msg as str, func as void(str): func(msg)
    getPart(msg as str)
        with msg
            case "Button": lbutton as Part
            case "Body": body as Part
            default: null as Part
       // 좀 지저분한데.
       // 다른 버전으로도 만들어보자.

       void say(str msg, void(str) func): func(msg)
    Part getPart(str msg)
        with msg
            case "Button": lbutton
            case "Body": body
            default: null
        // 어중간하다.
        //    <타입> <변수>
        //    <변수> as <타입> 2종류의 문법이 존재하게 되었다.

       // @을 써본다면?
       //  <타입>@<변수>
    //    <변수>@<타입> 어느걸로?
   int @ arr
   arr @ int // v
   say(msg@str, func @ void(str))@void: func(msg)
   getPart(msg@str) @ Part
        with msg
            case "Button": lbutton
            case "Body": body
            default: null
        // 특문이 너무 많으니 되려 거슬린다.


    // 반대로 캐스팅 문법을 <타입> <변수> 로 고쳐본다면?
    void say(str msg, void(str) func): func(msg)
    Part getPart(str msg)
        with msg
            case "Button": lbutton
            case "Body": body
            default: null
        //part = Button() as Part
        //activity = get_service().get_concrete_activity() as Activity
        part = Part Button()
        activity = Activity get_service().get_concrete_activity()
        activity =
            Activity(Service get_service(str it.getName())).get_concrete_activity())
            // 캐스팅 보다  "." 연산자가 우선순위가 높아야 한다.
        activity =
            (Activity (Service get_service(str it.getName())).get_concrete_activity()).do_something_on_activity()

        #MyClass
            age = 123
            grade = float

        // [x] float_val = MyClass.grade 123 // grade의 origin은 float. 123은 float화 된다.
        // 캐스팅 문법에서 lhs는 origin객체일때만 가능하다.
        // 로컬 변수도 올 수 있다. 그러나 ? 와 같이 node 타입이 오면 에러로 취급한다.
        // ?의 경우는 그냥 할당하면 된다. 캐스팅 할 필요가 없는것이다.

        valid = MyClass 123 // MyClass의 origin은 MyClass. 123은 MyClass 시도하나, MyClass(int)가 존재하지 않으며, 클래스 계층 관계도 아니므로 실패한다.

    Part // origin객체는 반드시 첫글자를 대문자로 한다.
        name = "unknown"
    Part #Body // 아무것도 없는 경우, 이 origin객체에 추가점이 없다는 것이다.
    Part Mouse
        _body = Body null // Body타입의 null이란 뜻.
        void init()
            body = Body()
    Mouse.init()


        // 모든 객체는 origin객체로 삼을 수 있는가?:
        // origin객체로 할지 안할지 결정하는 이유는, 이게 타입 유추의 기반이 되기 때문이다.
        Part get_part(str name): with name
            is "body": Body()
            is "dynamic"
                ret = get_part("body") // get_part는 Part의 일종을 반환한다. ret는 Part에서 멤버변수/메소드의 추가가 없다. 따라서 ret는 Part가 origin이다.

                age = 23 // 마찬가지로 age는 origin이 int이다. 값만 바뀌었지 인터페이스는 int와 동일하기에.
                int age // 캐스팅 문법이다.
                // Origin이냐 아니냐의 판단은, 인터페이스의 추가 있느냐로
                // 결정되지는 않는다.
                Part Mouse // 자, 이것은 origin인가 아닌가.
                Mouse GamingMouse
                    void do_something()
                // GamingMouse는 분명히 만들어질 수 있어야 한다. 상속을 하려면
                // Mouse또한 origin이어야 한다.
                // 고로, 인터페이스의 추가가 되었느냐만 가지고 origin 판단을 할 수 없다.
                // 왜냐하면 origin은 기본적으로 static이며, global scope이기 때문.
                // 지역변수는 static이 아니기에, origin이 될 수 없다.
                // 따라서 사용자에 의한 "이것은 Origin 입니다" 라는 선언에 의해서만
                // origin은 생성되어야 한다.
                // 그런데...

                // [?] 캐스팅 문법과 origin 정의 문법이 겹친다:
                int sss // sss를 int로 캐스팅 문법과 차이가 없다.
                    void print()
                        int this // this를 int로 캐스팅한 것이다.
                // 보다시피 첫줄의 문법이 겹친다.
                // 따라서 문법을 충분히 구별이 가는 걸로 만들어야 확실히 origin을
                // 구별 해낼 수 있게 된다.

                    // [x] 1 - 키워드를 추가한다.
                    def Part Body
                    def Body : Part
                    def Body(Part)

                    Body from Part

                    // [ ] 2 특문을 사용한다.
                    //Body -> Part
                    //Part -> Body
                    //-> Part Body

                        // 부모 클래스가 없는 경우는?:
                        //    1 - 항상 obj를 표기한다.
                        obj -> Body
                        //    [v] 2 - 역시 def로
                        def Body
                        def Part Body
                        //    3
                        [x] -> Body

                            -> Part
                            Part -> Body
                            Part -> Button
                            Part -> Mouse
                                _parts = [Part null]
                                body: get: parts[0]
                                lbt: get: parts[1]
                                rbt: get: parts[2]
                                void init()
                                    parts = [Body(), Button(), Button()]


                            def Part
                            def Part #Body
                            def Part #Button
                            def Part #Mouse
                                _parts = [Part null]
                                body: get: parts[0]
                                lbt: get: parts[1]
                                rbt: get: parts[2]
                                void init()
                                    parts = [Body(), Button(), Button()]

                            mouse1 = Mouse()
                            mouse1.init()
                            mouse2 = mouse1() // 뭐가 되는건가?
                            mouse2 = mouse1(mouse1)
                                // [?] 생성자는 복제 객체에서 자동으로 정의된다?:
                                def Mouse
                                    age = 0
                                    Mouse()
                                    Mouse(int age): this.age = age
                                    Mouse(#Mouse rhs): age = rhs.age
                                mouse1 = Mouse(3)
                                // mouse1 의 복제를 만들고 싶다면?
                                //     1
                                mouse2 = mouse1.clone()
                                mouse2 = mouse1() // == Mouse()
                                mouse3 = mouse1(mouse2) // == Mouse(mouse2)
                                func = mouse1.Mouse(void)

                                func() // 메소드는 복제가 불가능함. true?
                                // 객체는 기본적으로 op()는 생성자로 동작함.
                                // 복제된 객체도 origin과 동일한 인터페이스를 가지므로
                                // 생성자도 동일함.
                                // 메소드는 op()를 메소드 호출로 덮어씀.

                        //    4 - org
                        org Body
                        org Part Body


    parts = [Part Body(), Part null] // parts는 Part타입의 배열
    maps = [Part Body():"body", null] // maps는 "Part:str"의 맵.
    maps1 = [Part:str null]

        // 간단 초기화 문법:
        // [x] 1
        //maps = [Part:str...]
        // [v] 2
        maps = [Part:str null] // <타입> : <타입> 또한 일종의 타입으로 치환된다.
            // 해석 순서:
            // 1. <타입1> <타입2> 문법은 캐스팅 문법.
            // 2. 타입1은 로컬변수도 올 수 있다. 이때는 origin객체를 추출한다.
            // 3. Part의 origin 객체는 Part, str도 str.
            // 4. Part:str이 최종 tuple의 origin객체임을 알아냈다.
            // 5. null을 Part:str의 origin객체를 가진 변수라고 지정한다.
            // 6. 자연스럽게 maps 또한 Part:str만 올 수 있는 map이라고 유추된다.
            body = Part Body()
            maps = [body:"body"] // 이 또한 Part:str로 유추된다.

    // 음. 일관성이 있다.
    // 다만 실제 구현시에는 가독성을 위해서 색으로 마킹이 필요하다.
    // 문제는, 이게 과연 모호성 오류가 없을 것인가.

    // 객체의 복제
    part -> #body
    part -> #mouse
        _body = body null
    app
        void main()
            mouse1 = mouse() // 생성자로 복제한다.
            mouse2 = ?
                // mouse1을 복제하고 싶다면?
                // 1 다른 언어 방식
                    mouse2 = mouse1.clone()
                    mouse2 = new mouse1
                    mouse2
                // 2 문법을 통일한다.
                    mouse2 = mouse1()
                    // 이게 가능한 것인가?
                    // mouse1은 mouse의 복제된 객체. 인터페이스가 동일하다는 것이다.
                    // 아.. 그렇다면 복제된 객체의 생성자는 자신의 복사객체가 나가야
                    // 한다는 것이다.
                    // mouse1() == mouse1(mouse1)
                    // origin객체도 그렇게 동작하고 있으며, 다른 언어에서 봤을때
                    // 지역변수에 생성자를 호출한다고 해도, 그 origin 객체가 나온다고
                    // 보기 힘드...니까?


    get_part()
    GetPart()
    getPart()
    get-part()
    get`part()
    abc.get part()

```



#### [x] 중요! 타입 정의시에 " = " 를 사용할 수 있다?

왜냐하면 메소드도 결국은 반환형이 정적이니까.

```cpp
age = 23 // age는 origin 객체가 int이며 그 값이 23이다.
myobj = Mouse() // org: Mouse  Mouse로부터 복제됨.

def GamingMouse = Mouse
def GamingMouse = foo(lambda)

def app
    void main()
        age = foo(lambda, msg)
    age2 = foo(lambda, msg)

```

age2는 동적이다. org는 정적요소이다. 그러나 값은 동적요소이다.
GamingMouse는 정적이다. 값이라는게 없다. 오로지 객체의 정의. 정적요소 밖에 없다.



#### 연습

```cpp
def #KeySound
    void play()
        if wav_path == "": return

        with Mixer
            open(wav_path)
            play()
            close()

    str wav_path

def #Key
    Key()
    Key(int new_pos_x, int new_pos_y)
        _pos_x = new_pos_x
        _pos_y = new_pos_y

    pos_x = 0: _set=>
    pos_y = 0: _set=>
    get_label: get: name[0]
    name = str null: =>set: update_pos()
    sound = KeySound null: _set=>
    void _update_pos()
        with _name[0]
            is 'a':    pos_x = 10: pos_y = 10
            is 's':    pos_x = 15: pos_y = 10
                .
                .

#### [?] 5안 def와 from.
* 식별자의 정의와 할당은 구별이 되어야 하기 때문에 := 연산자가 추가되었다.
* 일관성을 갖추기 위해 def는 :=를 사용하는 것을 제안했다.

```namu
def A := B
    void say()
```

* 그러나 저자리에 := 가 들어가 있으므로 마치, 다른 연산자도 들어갈 수 있는 듯한
  착각이 들게 된다.

```namu
a := def A() + 5 // A origin객체를 정의하고, 그것의 복제객체를 만든 뒤, 거기에 b를 더한다.
    void say()
// 물론 위의 코드는 def문법 중간에 +가 온 경우이므로 사실상 잘못된 사용이다.
// 그러나 +를 :=로 바꾸면 올바른 문법이 된다는게 문제다.
// 따라서 기존 문법의 def 안쪽에서의 := 는 일반적인 :=와 달리 expr 취급이 아니라는
// 부분을 말하고 싶은 것이다.

a := def A()
    void say()
+ 5

// 굳이 말하면 위처럼 적는 것이 올바른 문법이지만, 이또한 잘못된 문법이다.
// 월드에서는 개행이 한번되면 라인이 끝난것으로 판정한다. 
// + 5는 양수 "5"를 뜻하는 것인지, a 정의 시에 사용되는 2항 연산자와 5인지 
// 분간이 안가기 때문이다.
```

* 그리하여 := 대신 다른걸 넣어두자.
```namu
def A from B
    void say()

1: def key("a key") from myApp.getKeyObject("key")
2: def key("a key") : myApp.getKeyObject("key")
3: def key("a key") at myApp.getKeyObject("key")

    key(str name): this.name = name
    void say()

    _name := ""

def myApp from app
    obj getKeyObject(str name)
        with name
            is "key": retfun def keyBase
                void say() {}
    void main()
        ... 
```

* from이 좋아보인다. 의미상 맞다.
* from을 쓰면 그 자리는 expr 자리가 아니라는 걸 확실히 알 수 있다.




### [v] def 문법으로 바로 생성자 호출

* def 뒤에 식별자 바로 뒤에 괄호는 생성자를 호출한다.
* def의 := rhs의 () 괄호는 해당 식별자의 생성자다.

```namu
def obj
    obj(str name): say(); _name = name

    _name := "init"
    void say(): c.out(name)

def myObj("kniz") := obj("unname")
    myObj(str name)
        super(name)
        name += ", hello."


// 결과:
//  프로그램 시작 직후:
// "init"
// "unname"

myObj.say() // "kniz, hello."
```
* 먼저 obj origin객체에 unname 인자를 넣어 객체를 복제한다.
* 그걸 myObj에 넣고 추가로 myObj() 생성자를 추가한다.
* obj origin객체의 name은 이미 init으로 초기화가 된 상태.
  (origin 객체가 정의될때는  생성자가 호출되지 않는다)
* 이제 obj의 생성자가 호출되면 init은 unname으로 바뀐다.






### [v] 초기자 문법; initializer syntax
* 자바처럼 def 내에서 멤버변수의 정의시에 초기화도 같이 할 수 있다.
* 초기자 문법은 객체의 생성자에 "서두"에 적은것과 같은 결과를 가져온다.

```namu
def myObj
    age := 5
    name := "wow"

    myObj(int age, str name)
        this.age = age
        this.name = name

    myObj()
        c.out("default ctor")
```

* 위의 코드는 아래와 같다.

```namu
def myObj
    age := int null
    name := str null

    myObj(int age, str name)
        age = 5
        name = "wow"
        this.age = age
        this.name = name

    myObj()
        age = 5
        name = "wow"
        c.out("default ctor")
```





### [v] 객체의 정의시 호출되는 흐름이 개발자가 너무 따라가기 힘들다.

#### [v] 1안 현재안

```namu
temp := def myObj("kniz") := obj("unname")
    myObj(str new): a = name
    a := "name"
```

- 위와 같은 코드가 있을때, myObj를 origin 객체로 만들기 위해 파서는 먼저, obj origin객체를 찾는다.
  origin 객체가 없을 경우 재귀적으로 파싱을 시도한다.
- obj origin객체가 생긴 후 다시 돌아와, obj의 객체 생성을 한다. 생성자의 인자는 unname이다.
- 생성된 복제객체를 myObj라고 이름 붙인뒤 origin객체로 삼고, 밑에 블록문에 정의된 멤버들을 하나씩 넣는다.
- a := "name"은 str 객체을 멤버에 넣어 myObj origin객체를 완성한다.
- 이제 myObj origin객체의 복제 객체를 만들기 위해 생성자에 "kniz"를 인자로 넣는다.
- myObj객체가 일단 복제가 되고나서, 생성자에 kniz를 넣는다.
- 생성자 안쪽에서 name으로 되어있던 a의 값을 kniz로 고친다.
- temp에 복제된 객체가 들어간다.

* 복잡해 보이긴 하지만, 하나 하나가 다 규칙 4가지에 의해 파생된 것이다.
    - := 는 새로운 식별자를 정의한다는 뜻이다.
    - def는 다음 줄에 intent 되어 멤버의 정의가 시작된다. 정의가 주입된 새로운 origin객체가 만들어진다.
    - 멤버의 정의는 origin객체가 만들어질때 1번만 수행된다.
    - 식별자()는 생성자를 의미하며, 원본으로 부터 복제된다.

```namu
temp := def myObj("kniz") := obj("unname")
```
* 복잡해 보이지만, 실상은 다음과 별만 다를바가 없다.

```namu
temp := intValue := 55
```


##### [v] 만약 def 가 한줄에 2번 등장한다면?

이제 expr로 개발자가 착각할 수 있기 때문에 "from" 키워드로 변경되었다.
def가 2번 등장할 일은 없어졌다. 가독성도 좋아졌을 것이다.

* namu 버전
```namu
def myApp
    temp := def myObj("kniz") from obj("unname")
        myObj(str new): a = name
        _a := "name"
```

* 같은 내용의 자바 버전
```java
class myApp {
    class myObj extends obj {
        private String a = "name"
        public myObj(String new1) {
            super("unname")
            a = new1;
        }
    }
    public myObj temp = new myObj("kniz");
}
```







### [v] def는 새로운 origin객체를 정의한다는 것은, 인터페이스를 추가한 새로운 객체를 생성한다는 것을 뜻한다.
* 새로운 인터페이스의 추가/재정의를 의미한다.
* def 문법에 나온 객체는, 선언된 scope에 영속적으로 소속된다.

#### [x] def가 없이 메소드의 정의를 할 수 있다.
* def가 없다면 메소드의 추가가 아닌 재 정의를 의미한다.
```cpp
def A
	_in := ""
	name := str // name은 str의 refer이다.
		get: in // get() 되면 this 대신 in을 내보낸다.
	name1 := str? // name1은 str refer이며 null이 들어가있다.
	age := int? // int null --> int 0
```

### [v] def로 정의된 중첩 origin 객체는 외부의 origin객체에 자동으로 소속된다는 것을 잊지말자.
```cpp
def A
	def nested
    mem := def nested1 // mem은 origin객체를 가리키고 있다. nested1은 그리고 sharable이다.
        void say()
            c.out(age)
    mem2 := nested()
    mem3 := def nested2() // mem3은 origin객체로부터 복제된 객체를 가리키고 있다.
                          // 생성자 초기화 문법에 의해서 mem3 := .... 는 A(int new) 생성자 안쪽에도 들어간다.
        void say()
            c.out(age)

    A(int new): age = new
    _age := 5

A.nested // ok
A.mem // ok
A.mem2 // ok

a = A(25)
a.nested // == A.nested
a.mem // != A.mem
a.mem2 // != A.mem2

A.mem.say() // 5
a.mem.say() // 5
a.mem3.say() // 25

A.nested()
```

* 따라서 만약 def를 사용하고 싶은데, 그 객체가 모든 객체가 공유해야 한다면 경우라면 굳이 def문법으로 복제객체까지
  생성할 필요가 없다.






# [x] 연기된 바인딩 문법
## 동기
* 다른 언어에서 람다를 자주 사용하다보면, 람다는 메소드 호출 괄호안에서 정의되기 때문에
  람다의 내용이 길어질수록 가독성이 떨어지는 것을 경험할 수 있다.

```java
button.setOnClickListenerAndDoSomethingSerious(v -> {
    blablabla
    blablabla
    blablabla
    blablabla
}, (whenNot, date, time) -> {
    blablabla
    blablabla
}, onHoeverEvent -> {
    blablabla
    blablabla
    blablabla
    blablabla
});
```

* 가독성이 떨어지는 이유는, 함수의 시작과 끝이 한줄에 끝나지 않고 개행으로 이어지기 때문에
  개행된 줄의 구문이 함수에 속한 것인지, 람다에 속한것인지 바로 알 수 없다는 것에 기인한다.
* 가독성을 높여보자.

## [x] 1안 함수의 정의를 미리 적고, 람다를 나중에 채워넣는다면?

### [x] 1-1안 키워드를 사용해서, 실수 인지 나중에 나올 변수인지 구분하자.

* def 는 헷갈리므로, later 라든가 lazy 든가 같은 키워드를 사용하면 더 좋을 것이다.
* 단, 람다 문법은, 이 예제에서는 사용하지 않는다.

```namu
bt.setOnClickListenerAndDo(later onClick, later whenNot, later onHover);
    def onClick(v):
        blablablabla
        blablablabla
        blablablabla
    def whenNot(whenNot, date, time):
        blablablabla
        blablablabla
        blablablabla
    onHover := listener.hoverEventMethod // 이 부분만은 굳이 later를 쓰지 않아도 된다.
```

* 람다문법은 아직 정해지지 않았다. 하지만 이 방법은 기본적으로 변수의 이름을
적어줘서 구분을 하는 방법이기 때문에 람다를 적용하기가 쉽지 않을 것이다.


#### [v] 미리 정의를 해놓고 쓰는 기존방법과 라인수에서 차이가 없다.
```namu
def onClick(v):
    blablablabla
    blablablabla
    blablablabla
def whenNot(whenNot, date, time):
    blablablabla
    blablablabla
    blablablabla
bt.setOnClickListenerAndDo(later onClick, later whenNot, listener.hoverEventMethod)
```

### [x] 1-2안 링킹 판단 미루기

* 링킹 오류인지를 일단 판단을 유보하는 것이다.
* 그래서 해당 메소드의 안쪽에서 정의가 되어있다면, 에러를 내보내지 않는다.
* 물론 그 멤버는 정의된 expr의 scope를 따른다.

```namu
bt.setOnClickListenerAnd(onClick, whenNot, onHover) // 여기까지만 적으면 컴파일 에러다.
// 왜냐하면 이 expr 위쪽으로는 onClick, whenNot등이 없기 때문이다.
    void onClick(View v):
        blablablabla
        blablablabla
        blablablabla
    void whenNot(not, date, time):
        blablablabla
        blablablabla
        blablablabla
    onHover := listener.hoverEventMethod
```

* 정리하면,
    * 정의된 식별자는 소유하고 있는 멤버들이 즉각적으로 visible 하게 된다.
* 위 한줄만 spec 에 추가해두면 된다.


* 다음처럼 사용도 할 수 있다.

```namu
a := obj[] {myObj(5), myObj(7), def another() := myObj
    void say(): foo("hello world") // 자 딱봐도 delayed binding 문법을 사용하지 않으면 가독성이 낮아 보인다.
    // 그러나 허용은 해줄 것이다. 룰에서 벗어난 것이 아니므로.
}
    def myObj := obj
        myObj(int val): ...
        void foo(str msg)
            blabla
```

* 역시 1-1안과 마찬가지로, 가독성이 나쁘다고 판단한 이유는, 메소드 호출 인자리스트 안쪽에서 개행이 일어나기 때문이다.
* 그러므로 미리 객체를 def 하고 나서 그걸 인자에 적으면 된다.


## 결론
* 메소드 안쪽에서의 def를 가독성을 높이고 싶다면 "람다 객체 정의 문법" 같은걸 만들어야 한다.
* 이 방법은 오히려 일반적인 독해방법인 "정의가 먼저 나오고, 사용이 나온다"를 역순으로 타고 가는 것이므로 가독성이 더
  나빠질수 밖에 없다.









# [v] 객체의 내부 구조

## [v] 최적화를 위한 scope의 인덱스 상수화
### 요구사항
바인딩시 name을 scope에서 일일이 뒤지면 시간이 오래걸린다. 최적화가 끝나면 상수로 scope에 접근이 가능해야 한다.

* 즉, 언제 실행했던 그 멤버는 항상 같은 인덱스에 있어야 한다.
* scope의 구성은 "this중복문제" 문서에 정한 구성을 따른다.
	* locals : local scope의 배열
	* objects : object scope의 배열
		* 대개, 새로운 object가 call되면, object는 이전의 object scope을hidden 처리시킨다.
		* 그러나 이 object가 자신이 inner일 경우는 outer를 그대로 유지시킨다.
		* 모든 inner 객체는 outer를 변수로 가지고 있다.
		* 모든 object는 sub를 변수로 가지고 있다.
	* globals
	* 예를들면, 다음처럼 구성된다.
		* locals
			* local[1] : visible
			* local[0] : visible
		* objects
			* object[3] : visible // inner
				* 부모클래스의 모든 멤버를 포함해서
			* object[2] : visible // outer
				* 부모클래스의 모든 멤버를 포함해서
			* --------------- hidden - marker ---------------
			* object[1] : hidden
			* object[0] : hidden
		* globals

### 고찰
* scope가 추가된다는것은 풀네임을 생략한다는 것이다. with 문과 똑같다.
* 새로 추가한게 pushBack이 되면 매번 index가 바뀌게 된다. (앞에 재귀를 많이 돌리면 index가 커짐) 따라서 pushFront가 기본이 되어야 한다. local scope은 대개 이걸로 대체가 가능하다.
* object scope은 언제 실행하던 항상 index구성이 똑 같아야 한다.
	* object의 멤버가 일종의 call을 하려고 하면 (get/set/생성자 모두 포함) 자신을 소유한 owner인 object의 scope 추가를 명령한다.
	* object는 scope가 추가 cb이 왔을때 자신의 owner가 있다면 그 owner에 대해 scope추가를 먼저 cb한다.
	* 지역변수는 owner가 없다.
	* 변수는 object이며, method 는 Node의 일종이다.
	* method는 this가 될 수 없다. 그러나 method안의 method는 outer인 method를 접근할 방법은 알 고있어야 한다.
* with에 의해서 확장된 경우는 해당 식별자만 scope 추가하면된다.
	```cpp
	def P
		void foo()
	def C := P
		void boo()
		def inner
			void say()
	with C.inner
		say() // O
		boo() // X C.inner.owner.boo()
		foo() // X C.inner.owner.foo() or C.inner.owner.super.foo()
		// owner, super는 scope에 자동 추가 되지 않는다.
	```
* 멤버변수가 접근되었을때도 scope는 추가되지 않는다.
* 오직 메소드가 호출 되었을때만  owner가 없을때까지 재귀적으로 추가된다.
* 최적화는 나중에 생각하자.

### 검증
```cpp
def A
	void do()
		foo()
	void foo()
def B := A
	=>void do()
		c.out("B")
		in.do()
	_in = def inner() := A
		void foo()

def C := B
	void boo()
		foo()

c = C()
c.boo()
/*
	C.boo()
		[Method]C.boo은 object이므로 this인 C를 load시도
			[Object]C는 outer가 없으므로, 자기의 members만 object scope에 load.
		[Method]C.boo은 자신을 load 완료.
			(Method는 자신의 static, 인자리스트, class 등을 load한다)
		[Method]C.boo은 함수가 끝나면 자신을 unload.
		[Method]c.boo은 this에 unload시도
			[Object]C는 outer가 없으므로 자신을 바로 unload.
	.boo
		C.getMember("boo")
		boo.get() 호출
	boo.get()
		[Method] boo.get()은 this인 boo를 scope에 로드시도
			[Method] boo는 this인 c.boo()를 load 시도.
				[Object] c는 outer가 없으므로 자신을 load
			[Method] boo는 자신을 load
		[Method] boo.get()은 자신을 load.
		Method boo.onLoad()는 this인 boo
	boo()

*/
c.boo()
```

























# [v] 프로퍼티

## [v] 아래의 이어질 프로퍼티의 결론을 여기에 미리 쓴다.
* 프로퍼티는 다음과 같이 작성한다.
```namu
def objA
    _realAge := 0
    age := prop prop1 from int(5)
        =>@get: realAge + got // =>를 하면 prop이 물고 있는 int객체로부터 값이 나온다.
        @set: realAge = new
    age1 := prop1
```
* def와 마찬가지로 prop의 name은 생략이 가능하다.
* prop은 사용하든 안하든 지정한 타입의 참조자를 하나 가지고 있다.
  개발자는 이 참조자를 => 를 통해서 값을 넣어두거나 꺼낼 수 있고, 사용하지 않을 수도 있다.
* 사용하지 않은 prop의 내부참조자는 컴파일러가 최적화 한다.
* def처럼 prop()을 하게 되면 참조자는 공유되지 않고 복제된다.
* def와 prop이 다른 점은 prop은 새로운 객체를 만드는게 아니라 새로운 참조자를 만드는
  것이다.
* prop내에는 @get, @set만 있을 수 있으며 그 반환형과 인자는 반드시 상속받은 타입이 된다.

### [v] 아마도 왜 이렇게 되었는지 하게될 질문들
* Q. prop 키워드를 꼭 넣어야만 했냐?
    * A. 네. 왜냐하면 def는 새로운 객체가 output으로 나오고 prop은 지정한 객체에
    기생하는 객체가 output으로 나오기 때문에 둘이 너무 다르기 때문이다.
    만약 def를 가지고 @get, @set을 정의하면 다음과 같은 상황들에 직면하고,
    어떻게 회피하려고 해도 결국은 실패한다는 걸 알 수 있을 것이다.
        1. @set 의 인자는 int로 받아야 한다. prop이 올수는 없다.
        --> 그러면 개발자는 @set(int new) 식으로 매번 정의하도록 하면 되지.
        
        2. 좋아. 그러면 이어서 @get의 반환형도 int가 되어야 한다.
        --> 왜? prop은 어짜피 int를 상속했다. prop이 반환형이 되어도 될건데?

        3. 그렇다면 int가 주어졌을때 prop으로 만들 수있느 방법을 제시해야만 한다.
        이게 없다면 사용자는 int를 반환할 수 없다.
            prop from int
                @get: retfun realAge // 이게 안된단 말이다!

        prop을 사용자가 만들면 자동으로 int를 받는 생성자를 만들어주자는 생각을
        할지도 모른다. 그러나 잊었나? 우리는 지금 prop이라는 키워드를 제거한다는
        전제로 얘기를 하고 있다. def만 있는 것이다. 컴파일러는 def 안쪽에서 @get,
        @set이 보이면 자동으로 부모클래스에 대한 생성자를 추가해야 한다는 괴상한
        얘기가 된다.
        자기도 모르게 원치않는 생성자가 추가되며, 사용자는 이것을 진작에 지식으로
        알고 있지 않으면 절대로 눈치챌 수 없다.

        4. 또한 def에서 @get을 사용할 수 있도록 한다고 했을때, @get의 활용도는
        매우 제한적이라서 프로퍼티 용도 외에는 딱히 없다는 것도 큰 문제다.

        5. 그리고 프로퍼티처럼 사용하고 싶다면 def 뒤에 반드시 부모클래스를 명시해야
        한다. 명시안해도 되게 해주겠다면.. 아마도 예외 문법들이 쏟아져나올 것이다.

        6. 종합해보면 이렇다.
        def시 @get을 하는 것은 프로퍼티 용도외에는 눈을 씻고 찾아도 없는데,
        단순히 prop이라는 키워드를 추가 하고 싶지 않다고 해서 사용자에게
            1. @get을 쓰면 반드시 부모클래스를 써야 함.
            2. 그리고 그 부모클래스를 받는 생성자를 넣어야 함
            3. 그리고 @get의 반환형은 This가 아니라 이상하게도 Super일것임.
        등을 주입시켜야 한다는 얘기다.

        7. 단순히 prop이라는 키워드를 넣으면 모든게 해결되는데 말이다.
        이래도 def를 그대로 써보겠다는 얘기를 해볼테냐? 엉?



```cpp
import console

Person
	void print(): console.out("Person.print()")


app
	Person p1
	// 프로퍼티property: 타입 프로퍼티명 get <블록문> set <블록문>
	// 인스턴스 인터페이스 확장 문법을 사용해서 get, set 메소드를 확장하면,
	// 변수를 정의하는 대신, 변수처럼 동작하는 메소드 2개를 지닌 객체인 프로퍼티를
	// 만든다. 다음의 규칙을 따른다.
	//	1.	프로퍼티는 sharable 타입이다.
	//		refer로 감싸지지 않은 채 raw인 채로 멤버에 추가되기 때문에 직접 get, set을
	//		다룬다. 이 프로퍼티에 op=이 호출되면 set이 수행된다.
	//	2.	<Type> get(), <#Type> #get(), res set(#Type new) 3개의 메소드중 선택
	//		에서 오버라이딩 하면 프로퍼티로 인식한다. (set의 인자는 반드시 const
	//		이다.)
	//	3.	예외적으로 프로퍼티 선언과 인터페이스의 확장을 같이 할 수 없다.
	//		e.g.	app
	//	            	str _name
	//					str name
	//						void print(): console.out("extended")
	//						str get(): _name
	//				// 컴파일 에러: name은 print 인터페이스 확장과
	//				// 프로퍼티선언이 같이 됨
	//
	//			왜 같이 할 수 없는가:
	//			말이 안되기 때문이다. 인터페이스 확장된 타입을 정의한 곳과, 그
	//			인터페이스를 가지고 있어야할 객체를 반환하는 부분이 서로 독립적이다.
    //			객체를 반환하는 곳은 어떤 인터페이스가 확장되었는지 100% 알게 만드는
    //			방법이 없다. (인터프리터에 인공지능이라도 없는 한..)
	//
	//	4.	프로퍼티에서 상속받은 중첩클래스를 정의하는 것이기에, 안에서
	//		정의된 get, set 메소드에서는 해당 프로퍼티를 소유한 클래스 scope를 갖는다.
	//	5.	<Type> get(), res set(#Type new)은 get, #get, set 으로 단축할 수 있다.
	//		set의 파라메터는 #This 타입에 new라는 변수명을 사용한다.
	//	6.	기본적으로 const get()은 get()의 반환값을 반환하도록 정의된다.
	//		즉, get()만 정의한 경우, const get() 따로 정의할 필요가 없다.
	//		또한 const get()만 정의한 경우는, get은 기본적으로 정의되기 때문에
	//		const get 만 가지게 된다. 따라서 외부에서는 항상 const get만 받게 된다.

	Person p2
		#get
			console.out("p2.get()")
			return p1

		res set(#Person new) // set {  과 동일하다.
			console.out("p2.set()")
			p1 = new;
			return rok() // rok는 타입이므로, return rok는 rok의 객체를 생성하는 것이
		 				 // 아닌, ok라는 타입을 반환한다는 뜻이된다.

	void main()
		//Person p3 = p2 // 컴파일 에러. p2은 항상 const Person으로만 나간다.
		p2 = p1

	B
	    // get: return A // "class" 는 타입을 정의하는 키워드이지, 타입 그자체가 아니다.
	    // 따라서 프로퍼티가 될 수 없다.

/*결과:
    p2.set()
*/
```

## [v] 프로퍼티를 쉽게 표기하는 방법

### [x] 1안 새로운 특문 < > 추가
```java
def A
	<age = 3 // set 만 가능
	>name = "kkk"
```
* 헷갈린다. 부등호처럼 보인다.

### [v] 2안 get set 표기
```java
def A
	age = 3
		_get=> // get은 되는데, 외부에서는 호출 불가란 뜻.
	name = "kkk"
		_set=>
```
* const 로 표기한 경우는 readonly인 걸로 간주하고 set은  없는걸로 한다.

### [x] 3안 1안의 개선
```java
def A
	<<age = 3 //
	>>name = "kkk"
	void say()
```
* 좀더 알아보기는 쉬운데, 이렇게 하면 const 표시할때 항상 <<로 해야 한다.

### [x] 4안 "#" 는 const.

### [x] 프로퍼티에서 활성화/비활성화/일부만 private/리다이렉션 하는 법

#### [x] 동기

* 이걸 세밀하게 할 수 있어야 진짜로 setter/getter를 대체할 수 있게 된다.
* 또한 정의가 번거롭지 않으며 편해야 한다.
* 논리가 중언부언하지 않고 예외가 많지 않고 깔끔하며 편해야 한다.
* 때로는 기능을 생략하거나 합치는 것이 답이 될 수 있다.

#### [x] 구체화

|  #   | 변수명                        | 분류                                                         | 문법          |
| :--: | :---------------------------- | :----------------------------------------------------------- | ------------- |
|  1   | wav_path                      | - public 완전 open                                           | 프로퍼티 아님 |
|  2   | _sound, _name, _pos_x, _pos_y | - 일부만 open <br />- 위의 여부 관계없이 get,set에서 특정 동작 | 프로퍼티 아님 |
|  3   | getLabel()                    | - 일부만 open                                                | 프로퍼티      |



```cpp
class KeySound {
public:
    void play() {
        if(wav_path == "")
            return;

        Mixer::open(wav_path);
        Mixer::play();
        Mixer::close();
    }

    string wav_path; //
};

class Key
{
public:
    Key() {}
    Key(int new_pos_x, int new_pos_y) : _pos_x(new_pos_x), _pos_y(new_pos_y) {}

    int getPosX() const { return _pos_x; }
    int getPosY() const { return _pos_y; }
    char getLabel() const { return _name[0]; }
    const string& getName() const { return _name; }
    void setName(const char* new_name) {
        _name = new_name;
        _updatePos();
    }
    const KeySound& getSoundSource() const { return _sound; }

private:
    void _updatePos() {
        switch(_name[0])
        {
            case 'a': _pos_x = 10; _pos_y = 10; break;
            case 's': _pos_x = 15; _pos_y = 10; break;
                .
                .
        }
        return;
    }
protected:
    void _setSoundSource(const KeySound& rhs) {
        _sound = rhs;
    }

private:
    KeySound _sound;
    string _name;
    int _pos_x;
    int _pos_y;
};
```

#### 기능을 쪼개면,

* 변수가 있는가, 프로퍼티 인가
* getter/setter중 일부만 open 되었는가?
  * open된 것은 구현이 포함되어 있는가? 아니면 단순히 접근자를 표현하기 위해서만 정의되었는가

#### 일단 만들어볼까?

```cpp
KeySound,
    play(void)
        if wav_path == ""
            return;

        Mixer.open(wav_path)
        Mixer.play()
        Mixer.close()

    wav_path = ""

Key,
    Key(void): nothing
    Key(int new_pos

```

#### [x] 위의 건에서 찾은 의문

#### [v] 메소드 정의시 타입을 안넣으면 안될까? --> 응 안됨.

```cpp
app
    print(msg)
        c.out(msg)
```

* 아무리 쉬운 코드라도, 타입유추할 껀덕지가 없다면 동작하지 못한다.
* 게다가 오버로딩이 동작하지 못한다.

#### [v] 타입 정의 문법을 바꾸면?

```cpp
[ ]1: YoungHee Cheolsoo
[v]2: CheolSoo = YoungHee
```

* 2안의 변형안을 최종 선택했다.
* def CheolSoo from YoungHee

##### [x] 좀 더 시험해볼까

  ```cpp
  age = 25
      print(void)
          c.out("hello, I'm ${this} aged")
  he = age
  he.print()
  // he = 26 // he는 int가 아니다. occupiable =가 될 수도 없다.
  he.print()

  Person // #Person이 되면 name을 수정하지 못하게 한다는 뜻이다.
      say(void)
          c.out("hello")
      _name = ""
  Chelsoo1 = Person // Chelsoo1은 Person을 가리키는 refer다.
  Chelsoo = Person // Chelsoo는 Person으로부터 상속받은 새로운 타입객체다.
      Chelsoo(): name = "Chelsoo"
      => say(void)
          c.out("and my name is ${name}")

  Chelsoo2 = Chelsoo() // Chelsoo2는 Chelsoo로부터 복제된 객체다.
  Chelsoo3 = Person() // 이것은 Person에 정의된 모든
      say(void)
  ```

- 인터페이스의 추가가 없다면, 그것은 기존 객체에 대한 복제와 완전 동일한것이다.

- 하지만 할당은 꼭 복제처럼 일어나지는 않는다.

- a = b 를 없앨 수는 없다. 이것은 너무 친숙한 문법이니까. 고로 a b 를 a = b 로 대체할 수 없는가부터 생각해봐야 한다.

- 1번과 2번은 완전히 동일한 기능인가?

  - occupiable일 경우 동일하다.

  - sharable일 경우, 1번은 refer의 정의를 뜻하나, 2번은 refer 할당을 뜻한다.

    ```cpp
    Person p
    p = getSomeone()

    Person p
    p = Person()

    Person p()
    ```

- a = b로 Person p를 표현할 수 있을까?

  ```cpp
  Person
      name = "unknown"
      print(void)
          c.out("name=${name}")
  p = Person
  p.print()
  p = Person()
  p.name = "Chales"
  p.print()
  ```

  - 위의 시나리오는 가능하다.
  - a = b 일때, b가 sharable이라면 a는 refer의 정의가 된다.
  - b()는 b의 터미널메소드("()")를 호출하고 이는 객체의 생성으로 이어진다.

  ```cpp
  1: age = int    // int는 occupiable이므로 age는 int 객체로부터 복제.
                  // age = int()와 같다.
  2: grade = 3.5    // 3.5는 #float이 복제된 것이다.
  ```

- 타입은 항상 복제가 상속을 대체한다. 즉 const를 물려받지 않는다.

- 문법에 따라 확장으로 표시할 수도 있다.

  ```cpp
  #Person
      name = "unknown"
  cp = Person // cp는 const다. 원본을 가리킨다.
  p = Person() // p는 const로부터 복제된 nonconst 객체를 가리킨다.

  #Chelsoo = Person // Chelsoo Person으로 하면 에러가 된다.
      say()
          c.out("name=${name}")
  cc = Chelsoo // const
  c = Chelsoo() // nonconst

  YoungHee = Person()
      say()
          c.out("I'm ${name}")
  y = YoungHee
  yy = YoungHee()
  ```















## [v] 프로퍼티 가독성 문제

### [v] 문제예제

```java
def Lock
  get: true
```
- 개발자도 get을 보고 직접 타입을 유추해야 한다.
  어떻게하면 더 쉽게 쓰고, 더 새로운 문법 추가 없이, 개발자를 위한 가독성을 높일 수 있을까?
- 개발자는 사실 Lock이라는 객체를 만들고 싶었던 것이다. 그런데 오해석되었다.

### 요구사항

[v] 객체가 존재하는데, get,set만 오버라이딩 한 상황을 표현할 수있어야 한다.
[v] 객체가 없는데 redirection만 한 것을 표현 할 수 있어야 한다.
   1. 이때 get/set의 반환값은 그 객체다.
   2. 컴파일이 가능해야한다.
   3. redirection만 하는 경우는 메소드를 추가할 수 없다.
   4. 이 객체는 별도의 메모리를 차지하면 안된다.
3. 새로운 문법을 추가하는 건 피하고 싶다.

### [x] 예제

```cpp
def A
1:  _in := 0
    def age
      get: in // X: get의 반환형은 age이지, int가 아니다.
      set: in = new

def A
  def age := 0 // X: int의 인터페이스만 변경하고 싶지, integer를 메모리에 두고 싶은 것은 아니지만 객체마다 별도의 메모리를 차지하고 있다.
        get=>:
    set=>:
```





### [x] 1안 - 타입을 명시해야만 프로퍼티를 쓸 수 있다.
다음의 규칙을 정한다.
* 프로퍼티처럼 쓰려면 set/ get을 overriding 하는 것이다. 둘중 하나만 override하면 흔히아는 프로퍼티처럼 동작하게 한다.
* 새로운 메소드를 추가할 수 없다.
* wrap을 할 타입을 상속하듯이 반드시 명시한다.
* get / set의 반환형은 그 wrap한(상속한) 타입이 된다.
```java
def B
  def A
    void say()
    age = 22

  def a := A
    get: A()
    _set

  def age := A.age
    get: A.age
    set: A.age = new1
```
#### 평가
* def를 기반으로 하기 때문에 정의가 된다. 정의는 1개만 나오는 전역 scope에 속한다. 고로 모든 객체B마다 하나의 age가 나오진 않는다.
* def를 쓰면 다른 메소드를 쓸 수 없다는 사실을 눈치채기 어렵다.


### [x] 1-1안 최신 def 문법을 활용해서 1안을 변형해본다.
* 최신 def 문법에 의하면, 1안의 문제점을 많이 해결할 수 있어보인다.
    * def와 동시에 복제 객체를 생성하는 initializer syntax가 추가되었다.
    * def 동시에 메소드를 정의한 그 자체가 새로운 타입으로 만들어 본다.

```namu
def B
    def A
        void say()
        age := 22

    _age := def() from A.age // 이름을 생략할 수 있다.
        get: A.age
        set: A.age = new
        //void print(): c.out(A.age) // get,set이 붙은 경우에는, base 객체인 A에 등장하는 메소드만 등장할 수 있다.

    _age1 := def from int // 이렇게 해도 된다. age1은 origin객체만 가리킬것이며, A.age는 int이므로.
        get: A.age // int가 반환되야 한다. from int 이므로.
        set: A.age = new
```
#### def 후 복제 객체를 만드느냐가 굉장히 중요하다.
* B.age는 모든 B 객체마다 1개씩 소유된다.
* B.age는 integer에서 상속받아 set/get이 추가로 정의된 어떠한 origin객체(= ?)의 복제본이다.
* 그러나 B.age는 A에서 모든것을 상속받았기 때문에 age를 가지고 있게된다.

* B.age1은 이름없는 새로운 origin객체을 모든 B의 복제객체들이 공유한다. 따라서 B.age1은 모두 1개의 origin 객체를 가리키게 된다.
* 그 B.age1은 age를 멤버로 한개 반드시 갖게된다.
* B.age1이 성립되는 이유는 outer객체의 this를 필요로 하지 않기 때문이다. getter/setter에서 origin객체의 this를 참조하기 때문이다.

* 결론적으로, outer객체의 this를 필요로 한 경우에는 _age 처럼 정의해야 한다.
* 그리고 이 경우 비록 사용하지 않을지라도, this와 함께  멤버변수를 갖게 된다.(= 여기서는 A.age)
* 최적화시에, 컴파일러가 만약 outer this를 사용하지 않는 프로퍼티를 발견한다면 추가적인 멤버변수를 만들지 않도록 할 수 있을 것이다.

* getter/setter가 붙어버린 경우, 이 객체는 추가적인 public 메소드를 정의할 수 없다.
* getter의 반환형과 setter의 인자는 이 객체의 base origin 객체가 된다.


### [v] 1-3안 최종 안
* 1-2안은 1안의 문제점을 많이 보완하였지만, 다음의 문제 2개를 해결하지 못했다.
    * def문법에서 from을 적지 않은 경우 get,set 문법은 실패한다.
    * set,get은 메소드명으로 겹칠 가능성이 크다.

#### 수정안
* set, get, 생성자, op= 같은 특수한 메소드들은 앞에 @를 붙여 구분한다.
    * 개발자는 @가 붙은 메소드를 커스텀하게 정의할 수 없다.
* set은 사용자가 오버로딩 할 수 있다.
* get은 반드시 get 메소드가 정의된 origin객체로 반환형이 정해진다.
* 프로퍼티라는 문법은 없다. get,set 문법만 존재하며 개발자는 이걸 이용해서
종래의 언어의 프로퍼티 문법을 흉내내는 것이다.


#### 예제
```namu
def outer
    @ctor() // 생성자
    @dtor() // 소멸자

    @set(outer new) // @는 축약된 메소드명. 사용자가 미리 만들어놓은 것 중에서 써야.

    @set(int new) // 오버로딩 가능

    @get() // 반환형은 outer로 고정. 생성자가 그리하듯, 굳이 명시하지 않는다. 항상 뻔하기 때문에.

    // 프로퍼티로 사용하는 방법1:
    _age := 0
    def prop from int
        @set(int new): age = new
        @get(): age // 반환형은 prop. prop은 int에서 api를 복제했다.
    prop1 := prop

myAge := outer.prop1 + 3 // outer.prop + 3으로 된다. prop은 int에서 복제되었고, int는 op+(int)를 가지고 있으므로 myAge는 int가 된다.


    // 방법2: def 생성과 복제를 동시에.
    // prop2는 모든 outer 객체마다 1개씩 별도로 생성된다.
    prop2 := def() from int
        =>@set(int new)
            c.out("set $new")
            ret retv
        _@get() // get은 하지 못함.

outer().prop2 = 55 //ok
outer.prop2 = 55 // ok
c.out(outer().prop2) // err


    // 방법2의 예제2:
    prop3 := def // prop3은 이름없는 origin객체
        cnt := 0 // 필드도 만들 수 있다.
        @set(int new)
            age = new + ++cnt

        //@get(): age // err. get의 반환형은 이름없는 오리진 객체.

outer().prop3 = 5
c.out(outer.prop3.cnt) // 1
// outer.prop3은 복제가 되지 않았으므로 공유되고 있다.
```

#### 고찰
##### [x] @get
* worldlang은 공변은 지원하지 않기 때문에 (무공변;invariant) 모든 메소드는 virtual.
* 따라서 인자리스트가 없는 get은 반환형이 부모의 것으로 고정이 되어야만 한다. 이는 Node를 뜻하게 된다.
* 그러나 get에서 return시 This 타입이 나오도록 컴파일러가 검증을 한다. (실제는 반환형은 node지만 월드문법상에서는 This인 것이다)
* 컴파일러는 get의 반환형이 This 라는 것 뿐만 아니라 super.get()이 어떤 타입이라는 것도 알고 있어야 한다.
* [?] super.super.get()도?
* get(This a) 처럼 인자를 둬서 구분하자는 아이디어도 있었지만 그럴려면 super.get(b) 같은 식으로 개발자는 super의 인자가 무엇인지 알고 있어야 하며,
  저 인자는 사용되지 않는 인자인 것이다. 역시 좋은 생각은 아니다.
* native는 일단 생각하지 말자.

* get은 오직 to() 로만 호출된다. to는 일단 This.get()을 호출한 뒤, 반환된 node 객체를 들고 주어진 타입 T에 대한 생성자에 넣을 수 있는지를 판단한다.



##### [x] @set으로 sharable, occupiable을 구분하자.
* set은 인자리스트가 존재하므로 공변 문제에서 자유롭다.
* set은 operator=()와 동일하다. operator=를 native에서 visible하게 한 경우 namufrx은 "@set" 이라는 이름으로 변경해서 내보낸다.
* set은 reference가 변경될때는 호출되지 않는다. set은 객체간 할당이 일어나는 순간에만 외부에서 호출된다.
```namu
def me
    @ctor(): c.out("me @ctor:")
    age := 22
    @get()
        c.out("me @get")
        ret this

    @set(me new)
        age = new.age
        c.out("me @set: age=$age")

def superInt from 5
    @ctor(int new): super(new)
    =>@set(int new)
        c.out("superInt @set(int): new=$new")
    =>@set(superInt new)
        c.out("superInt @set(superInt): new=$new")
    =>@get()
        c.out("superInt @get retv=$retv")
        ret this

def app
    void foo(me old, superInt val)
        c.out("app.foo():")

        old = me()
        val = superInt(55)
        val = 55

    void main()
        //foo(me(), 55) // err
        foo(me(), superInt(33))

```
* 결과

    me @ctor
    me @get
    superInt @get retv=33
    app.foo():
    me @ctor
    me @get

[v] : 본래 sharable인 me는 set이 불리지 않을 것이다.
      하지만 여기에서는 set()을 개발자가 만들어 놓았다.
      불리는가? 불리지 않는가? --> 안불린다. sharable이므로.
      set()를 개발자가 정의했는가 아닌가로, sharable, occupaible을
      구분 할 수 있는가? --> 구분X

* 초안에서는 구분해주자 였다.
- 컴파일러는 파싱단계에서 현재 파싱중인 클래스에서 개발자가 set을 정의하였는가 여부는 알 수가 있다.
- [v] 한번 set을 정의하면 그것은 occupiable로 고정이 된다? --> set과는 관계 없다.
```namu
def base // sharable이다.

def A // occupiable이다.
    @set(A new)

def B from A // B는 occupiable이다.

base := base()
base = base() // base는 base()를 가리킨다.
b := B()
base = b // base는 B()를 가리킨다.
b = B() // b는 B()로 할당된다.
```
- [v] 단점은, 일단 한번 occupiable이 되면 다시 sharable로 돌릴 수 없다.
      set을 구현하면서도 sharable로 쓸 수는 없다. --> 맞다. 그래서 이방법은 쓰지 않는다.
- [v] 동작이 아무래도 sharable처럼 동작하는지 occupiable로 동작하는지 알아먹기가 힘들다.
      이것이 복잡한 코드의 경우 독해가 힘들게 될 수 있을까? --> 힘들게 된다. 매우.
      어떠한 객체가 occupiable인지 sharable인지를 알려면 클래스 정의를 열어서 @set을 찾아야만 한다.
      [x] 만약 개발자 입장에서 occupiable인지 sharable인지가 로직에 영향을 미치지 않는다면은 이 문제가
          크게 문제가 되지는 않을 것이다.
          당연히 신경쓴다. JAVA는 대부분은 sharable 방식이니까 괜찮은 것이지 C++에서 포인터와 객체가 구분이 안간다고 한다면 지옥일 것이다.
          ```namu
            def base
            def A from base
                age := 0
                @set(A new): age = new.age

            b := base()
            a := A()
            a1 := a
            a.age = 27

            if a1.age > 20 // 자 보아라. 신경쓰지.
          ```

- 따라서 대부분의 객체는 sharable를 기반으로 되어 있어야만 한다.
  하지만 이럴 경우, sharable에 @set을 달아도 @set은 호출이 되지 않는다. 객체간의 할당이 일어나지 않았기 때문이다.

- [?] sharable 객체인 경우 @set을 호출하는 것과 관계없이 sharable 처럼 동작하는 것이 100% 보장된다면 어떨까?
어떤 구조를 만들면 100% 보장하면서 @set을 호출하는게 자연스럽게 될 수 있을까?

- [x] 1안 단순히 refer가 새로운 객체를 가리키기 직전에 set을 한번 호출 해줌
- 이경우 개발자는 set에 주어진 인자를 this에게 할당을 한다고 하더라도 의미가 없게 된다.
```namu
def a
    age := 3
    @set(a new): age = new.a + 5
a1 := a()
a1 = a() // a1.@set(a()) 가 호출된다.
```
- @set에서 new는 a()이다. a1.age = 3 + 5 = 8이 되며, 이후, a1은 new를 가리키는 것으로 변경되므로,
  a1.age는 5가 된다.
- 좀 헷갈리겠는데.

- [?] 2안 set()은 할당을 하기 위한 메소드가 아니라 일종의 콜백인 것이다.
```namu
def a
    age:=3
    @set(): age += 5
a1 := a()
a2 := a()
a2.age = 8
a1 = a2 
```
- a1를 감싸고 있는 refer는 새로 생성한 a2 객체를 가리킨다.
- 그리고 refer는 a1.@set()을 호출한다.
- 결과 a1.age는 13이 된다.

- [?] 프로퍼티처럼 사용이 가능한가?
```namu
def outer
    age := 3
    inner := def from int
        @set(): age = this
        //@get()은 생략할 경우 ret this 가 된다.

o := outer()
o.inner = 5
c.out(o.inner)
```

- [?] 가장 큰 문제점은 set이 자동으로 이루어지기 때문에 @set()이 불리기 전에 이미 외부에서 주입된 int는
inner에게 할당이 되어있다는 것이다. 어떻게 해결할가?

    - [x] 1안 개발자는 실질적으로 변수에 값을 set 할지 안할지를 set() 안해서 결정할 수 있도록 하자.
    ```namu
    def outer
        age := 3
        inner := def from int
            @set()
                //super.@set() 을 하면 inner는 변수 int가 할당된다.
                //=>@set() 을 해도 inner에 int가 할당된다.
                c.out("me")
    outer.inner = 33
    ```
        - @set에서 사용자가 할당하려고 한 inner 객체가 무엇인지 알지 못한다.
        - inner는 int를 받을 수 없다. 이름 모를 객체 def가 @set에 인자로 들어와야 한다.
          문법적으로 잘못되었다.
        - 설사 된다고 하더라도 outer.inner의 결과가 33이 할당되지 않는다는 건 혼란스럽게 만든다.


    - [?] 2안 할당은 반드시 된다. 인자로 할당되고 난 뒤에 객체가 들어간다.
    ```namu
    def outer
        age := 3
        inner := def from int
                @set(This new) // set(This)를 한 경우 반드시 =>를 넣어야 한다? 혹은 set(This)는 이미 끝마치고 난 뒤에 이게 불린다?
                @set(int new)
    outer.inner = 33
    //outer.inner = 3.5 //err. inner에 @set(float)은 없기 때문이다.
    ```

    - [x] 3안은 1안을 거의 따라가되, 개발자의 책임으로 미룬다.
    ```namu
    def person
        name := "wow"

    def outer
        age := 3
        inner1 := def from int
        inner2 := def from int
            @set(int new): age = new

        inner3 := def from int
            @set(This new): inner3 = new
            @set(int new): age = new

        inner4 := def from person()
            @set(str name): this.name = name

        @set(str name): this.name = name

o := outer()
o.inner1 = 55
o.inner1 = outer().inner1
o.inner2 = 55
o.inner2 = outer().inner2
o.inner3 = 55
o.inner3 = outer().inner3
o.inner4 = 55
o.inner4 = outer().inner4

```

```namu
def A
    fakeAge := def() from int
        @set(int new)=>
            c.out("retv=$retv")
            ret retv

        @get(): ret this

    realName := ""
    fakeName := def name from str
        @set(name new): realName = new

a := A()
a.fakeAge = 5
```

- 프로퍼티처럼 사용하려면 반드시 특정 타입을 지정하고 from으로 복제해야 한다.
- set의 인자는 그 특정타입이다. 변수명은 자유롭게 정한다.
- set에 =>를 하게 되면 프로퍼티 자신이 들고 있는 변수에 할당한다.
- 프로퍼티가 들고 있는 변수에 값을 할당하지 않으면, 최적화된다.
- get의 반환값은 프로퍼티 자신이다.

* @set의 범위를 제한해서 프로퍼티처럼만 사용하도록 하자는 것이다.
* 평가전략에서 반드시 성공하는 조합일 경우에만 cb을 호출하기 때문에 모호함이 없게 된다.
* 동작도 심플하고, 프로퍼티 클래스 같은걸 C++에 만들어 놓고 컴파일러는 프로퍼티를 보는 순간
  그 클래스로 우겨넣으면 되지 않을까?
  그 클래스에 to()가 호출되면 @get()를 실행하고,
  그 클래스에 operator=나 


[x] 2번째는 @set(This)를 만들지 못하게 막는다. 나머지는 풀어둔다.
    ```namu
    def A
    def B from A
        @set(A new))
    def C from B

    a := A()
    b := B()
    a = A()
    b = a

    c := C()
    c = a
    c = C()
    b = c

    ```

    [v] 일관성을 가진다면 정의된 @set은 overloading도 가능해야 하며, 상속도 되야 한다.
        따라서 c = C()와 b = c가 문제 케이스가 될 수 있다. 생각을 해보자.
        ```namu
        def base
            void foo(base new): c.out("base")
        def deriv from base
            void foo(deriv new): c.out("deriv")
        def dderiv from deriv

        b := base()
        d := deriv()
        d.foo(d) // deriv
        d.foo(b) // base
        dd := dderiv()
        dd.foo(d) // deriv
        dd.foo(b) // base
        ```
        Members는 FILO 구조다. 가장 최근에 추가된 메소드가 젤 먼저 매칭된다.

        마찬가지로 c = C(), b = c에 적용을 해보자.
        ```namu
        def A
        def B from A
            @set()
        def C from B
        b := B()
        c := c()

        c = C() // c.@set(C)
        c = b // c.@set(A)
        c = a // c.@set(A)
        b = c // b.@set(A)
        ```

        일단 말은 되는거 같다. 구현이 좀 어려울 것 같다.


    superInt @set(superInt): new=55
    superInt @set(int): new=55


[x] : 복사 생성자나, 그밖에 할당이 이루어지는 경우도 @set이 대신 호출이 되야 하는가?

[x] 생각을 다시 정리해보자.

[v] 목표를 달성하기로만 한다면 쉬운 문제다. prop이라는 키워드를 만들면된다.
```namu
def complex
    name := ""
    age := 0

def A
    _real := complex()

    fake := prop from complex
        @get(): real
        @set(complex c): real = c

    fake2 := prop() from complex
        @get()=>: c.out("wow!")
        @set(complex c)=>: c.out("set!")

    fake3 := prop() from int
        @get()=>: c.out("fake3")
        @set(int new): c.out("ignore")

    fake4 := prop() from complex
        _@set(complex c) // block.
        //@get()은 open

a := A()
a.fake = complex()
a.fake2 = complex()
a.fake3 = 55
a.fake3 // "0"
//a.fake4 = complex() 에러.
a.fake4.age // null
```

* 정리하면 prop은 다음의 규칙을 갖는다.
    * prop은 반드시 기반 클래스를 필요로 한다.
    * prop은 nested에서만 사용이 가능하다.
    * prop은 임의타입 T에 대한 refer다.
        * 밖으로 나갈때는 T의 refer로써 나간다. 들어올땐 T로써 받는다.
        * 따라서 새로운 public 인터페이스를 정의할 수 없다.
        * refer이므로 @get,@set을 기본적으로 prop이 들고있는 refer에 할당을 해준다.
        * 내장된 refer를 전혀 사용하지 않는다면, 컴파일러가 최적화타임에 이걸 감지하고, 제거한다.

* 충족된 조건은,
    * 문법이 지극히 심플하고, 혼란의 여지가 없다.
    * 직관적이다. prop이라는 키워드를 보는 순간, 어떠한 용도로 사용될것인지 명확하다.

* 개선하고 싶은 점은,
    * prop, @set, @get 3개나 키워드가 추가되었다.
    * 무언가 새로운 객체를 정의한다는 점에서는 prop과 def 는 닮았다.
    * 좀 더 일반화된 문법을 제시할 순 없는가?
    * 단, 명확성이 일관성보다는 우선되어야 한다.

* 본질을 찾아보자.
    * prop은 refer에 대해서 get, set 시점을 콘트롤 하고자 하는 것이다. 객체를 컨트롤 하는 것이 아니라는 점을 명백히 해야 한다.
    * prop은 절대로 T에 대한 객체나 T에 대한 객체의 상속객체가 될 수 없다.
        * prop은 owner객체의 라이프사이클과 동기화 된다. 그러나 prop의 사용법 중에는 새로운 객체 T를 만들어 밖으로 내보내는 일도 가능해야 한다.
        * 반환된 T객체는 prop과는 무관한 객체가 되어도 괜찮다.

            ```namu
            def A
                real := complex()
                fake := prop from complex
                    @get(): complexJob()
                    @set(complex c): updateJob(c)

                complex _complexJob(): complex()
                void _updateJob(complex c)
            ```

            * 그러나 만약 prop.@get이 T(complex)가 아니라 prop 자체였다면...
            ```namu
                fake := prop from complex
                    @get(): complexJob() // complex -> prop으로 변환이 가능해야 한다.

                complex _complexJob(): complex()
            ```

    * prop을 없애고 싶다면 T를 prop으로 자동 반환하는 방법을 찾아야 한다.
        * 만약 위의 @get문제를 해결해서 어떻게든 complex -> prop으로 변환해서 반환하는 방법을 잘 찾는다면,
          이제 prop에는 def 처럼 인터페이스를 추가할 수 있게 될것이다. def와 prop의 차이가 미비하므로, prop을 없앨 수 있다.

          * [x] def로 prop을 구현할 수 있는가? // 안된다. Node::run()을 재정의해야 하기 때문에.
          * 따라서 def와 prop은 새로운 인터페이스를 정의할 수 있다고 하더라도,
            prop은 설사 T와 관련이 전혀 없는, 복제 객체가 아니더라도 msg를 route 해줘야 한다는(= refer처럼) 동작상의 차이가 있다.


* [v] 결론
    * def는 객체를 커스터마이징 하는 것.
    * prop은 임의의 객체 T 에 대한 refer를 커스터마이징 하는것.
    * 따라서 둘은 절대로 하나의 문법이 될 수 없다.











### [x] 2안
```java
def My
  _inner_age = 23
  prop age := inner_age
    get=>: c.out("get age!")
    set=>: c.out("set at super!")

  prop age2 := int()

  get: // 이 get과 prop.get은 반환형이 다르다.
```
* prop이란 키워드를 추가한다. prop은,
  * +get, set만 추가하도록 유도할 수 있다.
  * +메소드의 정의(def)임과 동시에 반드시 하나의 prop객체가 모든 객체에 할당된다.
    * ":=" 연산자를 bind로 해석한다.
  * +이미 존재하는 객체에 대한 wrapper도 될 수 있을 뿐더러, 새로 생성된 객체의 wrapper도 될 수 있다.
  * +문법이 간결함과 동시에, 가독성도 좋다.

  * -새로운 키워드가 추가된다.
  * -이걸 def로 해결하려면, 객체의 def와 객체의 정의를 같이 하는 문법을 먼저 고안해보자.
    * 근데 쉽지 않을껄.
    * prop의 대체하기 위한 조건들
      1. 객체의 def와 동시에 객체는 반드시 클래스 멤버로 존재해야 한다.
      2. 이 prop이 어떤 변수를 대상으로 하는지가 직관적으로 보여져야 한다.
      3. bind가 별도로 필요하다.
      4. 1줄로 깔끔하게 나와야 한다.
      5. 본래 get의 반환형은 This다. 그러나 wrapper는 그게 달라야 한다.

### Q1. get의 반환형은 본래 자기 자신이어야 하는데?
#### [v] 1안 FRX 적으로 강제로 그렇게 만든다. 다른 개발자는 이렇게 할 수 없다.

* 고찰을 통해, 오직 prop 만 그렇게 사용할 수 있다.

#### [x] 2안 개발자도 이렇게 가능한 문법을 지원해준다. 그리고 그걸 재사용한다.

### [x] Q2. 다른 개발자들도 get의 반환형을 자기마음대로 하는게 옳은가?
* 당연히 안된다.  독해가 너무 어렵다.
* 어떤 타입이 나오는지가 사실 그 객체의 무엇인지를 결정한다.
  * 그 객체가 A라는 타입이라는 걸 아는 존재가 아무도 없다면, 그것은 A라는 타입이 아니다.
  * 당연히 A타입이라고 쓰는 순간 컴파일 에러가 쭉 나온다.

### [x] Q3. 그럼 부모클래스로 get의 반환형으로 하는건 옳은가?
역시 안된다. 일반적으로 def A := B 만 봐서는 당연히 "A라는 타입이구나" 생각할 것이고 A라는 타입 안에 새로운 메소드를 사용하는 순간 에러가 난다.
그리고 부모의 부모 클래스를 get으로 하는 순간 더 심각해진다.
정 이걸 하고 싶다면 get의 반환형을 부모클래스로 한 경우에는 overrideing만 가능! 이라는 조건을 달아야 한다. 근데 그게 prop이라는키워드란 말이다.

### [x] 3안 wrap클래스를 만든다.
```java
def My
  _inner_age = 23
  age := wrap<int>(inner_age)
    get=>: c.out("get age!")
    set=>: c.out("set at super!")

  age2 := wrap<int>(int())
```

* 여기서 만약 wrap<int>를 타입 유추로 할 수 있다면
```java
def My
  _inner_age = 23
  age := wrap(inner_age)
    get=>: c.out("get age!")
    set=>: c.out("set at super!")
  age2 := wrap(int())
```

#### [x] 평가

* 2안의 모든 장점을 가지면서도 새로운 키워드 추가도 없다. 그리고 정의만 봐도 무슨 데이터로부터 의존하는 건지 확 들어온다.
* 이겁니다. 여러분 이거예요.


### [] Q4 set의 인자를 오버라이딩하지 않고 hiding 하면?
wrap<T>는 기본적으로 이렇게 해야 하는데?

#### 제약조건
* 오버라이딩은 반환형은 포함되지 않는다.
* get()은 call()에서 1회 호출된다. 따라서 보통은 재귀되지 않는다.
* Mgd 어떤 클래스도 get, set을 오버라이딩 할 수 있다. 이것만 해두면 된다.
* Native 클래스를 get, set이 되도록 직접 wrapper를 만들고 싶다면 call(), onGet, onSet 외에도 cast도 오버라이딩 해야 한다.
  * 그러니 잘모르면 하지 말라. 있는 wrap 써라.
* Mgd에서 wrap을 쓰면 의존 관계가 잘 들어나며, 원하는 동작이 기본으로 이루어지며, Native에서도 호환된다.



#### [x] 알고리즘
```cpp
// 만약 Refer가 visible 할수만 있다면 매우 깔끔하게 끝날것이다. Wrap하고 Refer는 하는게 똑같다.  2222
class Wrap : public Refer
{
public:
  virtual Node& onGet() {
    return _origin.get();
  }
  virtual Res& onSet(const Node& rhs) {
    return _origin->operator=(rhs);
  }
  virtual Refer onCast(const Class& cls) {
    return _origin->cast(cls);
  }
  virtual Refer call(const Msg& msg) {
    return _origin->call(msg);
  }

private:
  refer _origin;
};
```
2.
#### [x] Mgd에서 get/set을 오버라이딩 한 경우,

* get은 오버라이딩 할 수 있으며 모든 것은 개발자의 책임이다.
* wrap을 world객체로 짜는 경우
  * def wrap<T>
    * T get(): inner
    * res set(T new1):
    * T _inner
* 구현 자체의 동작은 매우 단순하다. Refer wrap::onGet() 안에서 target인 객체를 대신 반환하면 되며
* onGet의 반환형을 T로 명시하면 된다.
* 그리고 call()이 호출되면 onGet().call()로 redirection 한다.
* call을 통하지 않는 native 메소드들은 모두 찾아내서 rediection 하도록 잘 짠다.
* 문제는 컴파일러
  * 일반적인 컴파일 알고리즘은 먼저 이렇다.
    * 메소드는 input type과 메소드 type을 들고있다.
    * canConsume()이 호출되면 주어진 argument를 각각 input type으로 casting 한다.
    * Object.cast(ㅔ)는 먼저 onGet()을 호출한 뒤에, 이걸 cast 한다.
      * onGet() 결과가 this와 다를 경우는 재귀적으로 onGet을 또 불러준다.
    * 모든 걸 성공적으로 cast 했다면 이 호출에 문제는 없는 것이다.
    * 필요시 바깥으로 반환형을 내보낸다.
  * Node::getMember()는 내부에서 객체를 가져와 onGet을 재귀적으로 호출한다.
  * a.foo() 인, wrap a 객체가 있을 경우,
    * scope["a"]["foo"].call("run"); 으로 해석된다.
    * scope도 Node의 일종이므로 getMember()를 타게 된다.

### [x] 4안 refer를 공개한다면?
### [x] Q5. Origin과 TClass를 통합해야 한다. --> 새로운 문서

#### 제약조건
```cpp
class refer : public node {
  TStrong<obj> _org;
  virtual const obj& getType() = 0;
};
template <typename T = obj> // 기본적으로 ? 타입이다.
class tRefer : public refer {
  virtual const obj& getType() { tRtti<T>::getOrigin(); }
};
```
* refer는 refer를 wrap할 수없다. refer가 가지고 있는 obj를 wrap하는것이다.
* refer는 onGet, onSet, cast 외에는 모두 MGD에서 호출 할 수 없다.
* type이 존재한다.
* 대상이 존재한다.
* Refer는 Object가 아니지만 visible해야 한다.

### [v] Q6. Instance에 있는 getId()도 visible 할 수 있는가? --> 별도의 항목

### [x] Q7. Object가 아니어도 refer를 visible 하게 할 수 있는가? --> 별도의 문서를 통해서 refer를 명시적으로 visible하게 하지 않고도 해결 할 수 있었다.


### [x] 5안 def의 의미를 변경하자

* def는 인터페이스의 추가를 의미한다.
* def가 없어도, 인터페이스는 유지하되 구현의 변경은 가능하다.

```cpp
def device // 새로운 타입의 선언
  name = "?"
    void say()
      c.out("name=$name")

// 임시객체 정의 문법:
device1 := device() // def가 없음. 따라서 origin객체로써 사용은 불가능함.
            // overriding만 가능.
    get: // overriding이므로 get의 반환형은 device임.
    =>void say() // 컴파일러에게 이 객체에 나온 모든 심볼들을 overriding임을 명시.
      c.out("let's call device.say()")

def app
  void says(device[] devs)
        d = device1 device() // device1의 origin은 device임.
        // d = device device()로 해석됨.
      for d in devs // for에서는 타입유추로 인해 iterator는 타입이 필요없음.
        d.say()

def A
  age := int?
    get=>: c.out("get=$this")
```

```cpp
def A
  age := 0 // 컴파일러는 0이 사용되지 않는다면 제거하는 최적화를 수행한다.
      get=>: c.out("val=$val")
  dev := device?
        get: $inner = device() // get의 반환형은 device
    _set
  void _calculate(int seed)
  def unknown // 이건 새로운 origin객체 uknown으로 인식된다.
    set(int new): calculate(new)
a = A()
a.unknown = 5
```

* get은 객체가 null이어도 호출이 가능하다는 걸 잊지말라.

### [x] 6안 ?? 문법을 새로 추가한다.

prop이나 int?? 이나 아무튼 새로운 문법이 필요하다.
그리고 Refer 클래스에서 의해서 wrapping 되도록 한다.
refer는 별도의 메소드를 가질 순 없지만 onset, onget에 대해서 처리를 할 수 있다.







## [x] null 된 프로퍼티의 구현방법
### 요구사항
```cpp
def A
	name := str?
		get: class.getName()
		_set
```
* A["name"] == Refer(str* null) 인 상태이다.
* 그리고 get은 this가 null이어도 호출이 가능하다고 우린 이야기 했었다. (get/set만 예외)
* get에서는 owner도 존재하며 this도 사용이 가능하다. 단 this를 사용하는 순간 높은 확률로 죽는다.
* set은 operator=() 이며, get은 C++의 onGet() 이다.
* 따라서 null.operator=() 와 nullptr.onGet()을 해야하는 상황이다. 이게 가능한 것인가?
* 혹시 안된다면 프로퍼티 문법을 구현할 다른 방법은 없을까?

### [x] 1안 get, static의 규칙을 바꾼다.
다음의 5가지 규칙을 새로 만든다. 이것을 조합하면 된다.

* static 메소드는 this가 없는 것이다. static 메소드를 호출하면 항상 origin의 메소드가 호출된다. (즉, 엄밀한 의미에서 this는 origin이다. 그러나 FRX에서 this를 scope에 안 넣는다.)

* occupiable은 non static set이 있을 경우에만 해당한다.
	* 반대로 얘기하면 static set이 있으면 기존 클래스의 특징을 유지한다는 것이다.
	* 의미를 생각해보면 명확한 것이다. static은 this가 없으므로 occupiable을 결정하는데 영향을 줘선 안된다.

* static 객체란 항상 origin객체에 속해있다.

* inner origin객체의 모든 member는 sharable이건 occupiable이건 static이건 관계없이 항상 owner가 존재한다.
	* static 객체는 origin객체가 항상 owner다.
	* non static객체는 복제될때 owner가 새로 할당된다.

* get의 반환형, set의 인자형은 자동으로 고정된다. 개발자는 그것이 static, const여부만을 수정할 수 있다.

#### 종합하면 이렇게 된다.
```cpp
def myObj
	_name = ""
	name := str?
		$get: _name
		$set: _name = new
```
* name은 str? 에 대해 def가 아니므로 overriding 상태가 아니다. 그러므로 get의 반환형과 set의 인자는 모두 str 이다.
* get과 set은 모두 static이다. 따라서 refer인 name에는 null이 들어가 있어도 문제없이 get()이 불려진다.
#### [x] $get은 static여부와 관계없이 inner객체이므로 어쨌건 owner는 존재한다.  refer는 null을 들고 있지만 refer 자체는 myObj에 있으므로 refer의 owner는 myObj.... 일까?
```cpp
def myObj2
	void foo()
	void $boo()

def myObj
	o1 := myObj2?
	_m := myObj2()
	o2 := myObj2?
		$get: m
	void foo()
		o1.foo() // 에러
		o1.boo() // 에러 : o1은 null이므로 null.get()이 불가능
		o2.foo()
		o2.boo()

m := myObj()

o3 := m.o2
o4 := myObj.o2
o4.boo() // o4는 this가 null이나 o4.owner가 주입된 상태에서 o4.get()이 호출.


o3.boo() // o3는 this가 없다.
o3 = myObj.o2()
o3.boo()
// scope["o3"]가 성공 -> refer("this") this담긴 refer 받음.
// 이 refer.get()을 호출
// refer는 origin객체가 $get()이므로, 바로 origin객체인 o2.$get()을 호출한다.
//		이때 owner는 과연 무엇인가?
//			refer는 새로 생성된 myObj가 owner.
//			this도
```
* 안되는 이유1
	* static 메소드는 정적이므로, 컴파일러는 어떠한 객체의 메소드인지 확정된다는 것이다. 	origin객체지. 언제나 그 객체가, 유일한 그 객체가 불려지게 된다.
	* 따라서 $get()할때 불려질 객체인 o2는, 아무리 o2 객체가 사방에 널려있다고 해도 처음 등록된 origin객체인 o2 그거 하나뿐이다.
	* 따라서 owner도 언제든, 어느때든 항상 유일한 1개 뿐이다.
* 안되는 이유2
	* def를 넣지 않는 경우 interface가 고정인, origin객체가 아닌 객체가 생성되는 것이다.
	* 따라서 static 메소드를 넣을 수가 없다. static은 알다시피 origin객체 자체에 들어가는것이지, 상속이 불가능하니까.


### [x] 2안 아예 get은 static이 기준으로 한다면?
* 1안으로 생각을 해봤는데, 결국 컨셉이 너무 더럽다. 예상이 어렵다. 더 규칙을 단순하게 할 필요가 있다.

* 그래서 get을 static으로 하면 어떨까? 애초에 get이 non static여야만 가능한 케이스가 있을까?

* static 메소드가 owner를 가질 수있다는 얘기가 된다. 다음과 같이검증결과 말이 안된다.

  ```cpp
  def test
  	name := ""
  	def in
  		void $koo(): c.out("name=$name")

  def app
  	void main()
  		test.in.koo() // name=
          test.name = "wow"
          test.in.koo() // name=wow
          new := test()
          test.in = new.in
          new.name = "new"

          test.in.koo() // name=wow
          new.in.koo() // name=new

          // 봐라. 예측이 안된다. this가 2개있는것처럼 보인다.

  ```

#### 고찰

* 분명히 무언가 객체는 존재해야 한다.
  * 그 객체의 this는 owner를 가지고 있다.
  * 객체가 다른걸로 교체되면 owner도 교체가 된다. 그래야 예측이 쉽다.
* 그 무언가는 Refer가 아니다.
  * Refer는 메소드를 가질 수 없다.
* static 메소드는 this도 없으며 따라서 owner도 없다.
  * owner는 this에 있다.
* static 메소드는 객체가 null일지라도 호출이 가능하다.
* 한줄만 보고도, 이 프로퍼티는 어떤 타입을 내보내리라는 걸 알 수 있어야 한다.
* non-null인 프로퍼티와 문법의 차이가 적어야 한다.
* get의 반환형과 set의 인자형은 개발자가 마음대로 지정할 수 없다.

* 따라서 반드시 무언가의 별도의 객체나 문법이 필요함을 알 수 있다.



### [x] 3안 - 문법의 추가 없이 해결

```cpp
def test
	name = ""
1:	def in := wrap<str>
2:	in := str?? // str null이 아니다.
		// str??은,
		//	1. refer와 비슷한 역할을 하지만 객체다.
		//	2. 객체이므로 this는 물론 owner도 있다.
		//	3. set과 get의 반환형이 T로 고정되어있는 특수한 객체다.
		//	4. 외부에서 봤을때는 마치 T처럼 사용한다.
		//	5. str?은 str null이다.
    __age := 5
    def age := int??
        get: _age
        set: _age = new
        void say()
			...

	myObj = dxHandle[]?

t := test()
a = t.age + 5

```

* 제일 깔끔하다.
* 애매하지도 않다.

#### [x] 구현방법
* 다음의 조건을 만족하는 FRX c++ 클래스를 만들면 된다.
	* occupiable이어야 한다.
	* Object의 일종이다.
	* set/get의 인자/반환형이 worldlang에서 개발자가 지정한  타입이다.
	* getMember(n) 안에서 call(Msg("onGet")) 을 호출한다.
	* Native에서 프로퍼티로 내보내는 방법은 --> 별도 문서 참조












## [..] 프로퍼티를 native에서 wrapper하는 방법
### 요구사항
* worldlang은 getter/setter를 프로퍼티로 대체하고자 한다. 따라서 native에서도 대부분의 getter를 프로퍼티로 대체할 수 있도록 해야 하므로 이를 반드시 지원해줘야 한다.
* 다음의 샘플 코드를 떠올려보자.
```cpp
class myDX : public obj {
	NAMU_CLASS(myDX, obj,
		OVERRIDE(foo)
		FUNC(getName)
		FUNC(setName) // 이 둘을 합칠 수 있는 방법은?
public:
	virtual void NAMU_OVERRIDE(foo) (myDX* dx, int screen_n);
	str getName();
	void setName(str new1);

private:
	str _name;
};
```

* PROP의 set/get/은 overriding 을 염두해 두 수 있어야 한다.
	* native 개발자는 overriding을 표시하기 위해 FUNC, OVERRIDE 매크로를 그대로 쓸 수 있었으면 좋겠다.

### 이상적인 코드
```cpp
class myDX : public obj {
	NAMU_CLASS(myDX, obj,
		PROP(name, FUNC(getName), OVERRIDE(setName))
	)
public:
	str getName();
	virtual void NAMU_OVERRIDE(setName) (str new1);

private:
	str _name;
};

def DX := myDX
	name := str?
		=>set: c.out("DX!")
c.out("$DX.name")
DX.name = "kkk"
```


### [..] 1안
* PROP은 별도의 NAMU_CLASS가 되어야 한다.
```cpp
class myDX : public obj {
	NAMU_CLASS(myDX, obj,
		PROP(name, FUNC(getName), OVERRIDE(setName))
	)
	class nameProp : public prop<str> {
		NAMU_CLASS(nameProp, prop<str>,
			GET, _SET)
		virtual ref<str> onGet() {
			return ref<str>(getOwner().cast<myDX>()._name);
		}
	};
public:
	str getName();
	virtual void NAMU_OVERRIDE(setName) (str new1);

private:
	str _name;
};

def DX := myDX
	name := str?
		=>set: c.out("DX!")
c.out("$DX.name")
DX.name = "kkk"
```















## 프로퍼티의 구현

### [x] 1안 

def Property := Obj

- Refer를 가지고 있다.
  - worldlang으로 onGet, onSet을 추가할 수 있다.

- class tprop<T> : public prop
  - 템플릿으로 자동으로 T onGet(), onSet(T)가 추가되며 NAMU_CLASS 매크로로 이 2개가 NativeWrapper로 등록된다.

```cpp
class myObj : public obj {
	NAMU_CLASS(myObj, obj,
		PROP(ver)
	)

	class ver : public tprop<Int> {
		NAMU_CLASS(ver, tprop<Int>, FUNC(onGet))
		Refer<Int> onGet() {
			//myObj& own = getOwner().cast<myObj>();
			//return getLengthh();
			return getVer();
		}
	};
	int getLength();
	static int getVer();
}
```



### [v] 2안
* set,get은 외부에서 호출하는 것이다.
    * 만약 proptected accessor가 붙이면 호출이 불가능해진다.
* overriding이 가능하다.
* set은 overrloading이 가능하다.
* get은 반환값이 항상 정해져 있다.
* get은 Thing.to<T>()를 통해서 호출된다.
```cpp
Refer<T> Thing::to<T>()
{
    Refer res = run(Msg("get"));

    //res를 T의 생성자에 넣으려고 시도.
}
```

* set은 operator=()를 통해서, Refer의 operator=를 통해서 불려진다.

```cpp
class MyClass : public Object {
    public:
        NAMU_CLASS(MyClass, Object,
            SET()
                // operator=를 namu의 "set"이라는 메소드로 wrap한다.
                // MyClass& set(const MyClass& rhs) {
                //  return operator=(rhs);
                // } 도 만들어 놓는다.
                // 이걸 만드는 이유는 operator=가 overriding이 안되기 때문이다.
                // C++은 왜 operator=가 overriding이 안되게 했는가?:
                //  상속받은 클래스에서 virtual로 오버라이딩한 경우,
                //  인자로 반드시 상속된 객체가 와야 하기 때문에 RTTI를 
                //  쓰게 되기 때문이다.
                //  class A {
                //      virtual operator=(const A& rhs) = 0;
                //  };
                //  class B : public A {
                //      int age;
                //      virtual operator=(const A& rhs) {
                //          만약 rhs가 정말로정말로 A객체였다면
                //          age = rhs.age;를 할 수가 없다.
                //      }
                //  };

                // 그러나 우리는 node 기반으로 가고 있고 모든것은 
                // 실행이 될 수도 있고 안될수 있다는 전제를 안고 있다.
                // 대신에 명시적 캐스팅이라는 짐을 덜어낼 수 있었다.
                // 그러므로 할당연산자도 기반타입으로부터 받을 수 있도록
                // 하여 짐을 덜도록 해야지, 안그러면 operator=에 앞서서
                // 개발자는 반드시 타입캐스팅을 해야 할 것이다.

            SET(int new1)
        )

        MyClass& operator=(const MyClass& rhs) { // SET()
            if (this == &rhs) return *this;

            // do somthing..

            return *this;
        }

        MyClass& operator=(int new1) 
            ....
        }
};
```

```namu
my := MyClass()
my = MyClass() // ok
my = 3 // ok
```






# [v] 프로토타입 기반에서 생성자가 의미가 있는가

```cpp
def Part
    _name = ""
    name
        get: _name
        set: _name = new

    Part()
    Part(str newname): name = newname

```

* 프로토타입은 복제를 통해서 객체가 생성된다.

* 자바스크립트를 공부하고 났더니 해결이 되었다.

  * 자바스크립트는 순수 프로토타입 기반 언어다.

  * 그래서 동적으로 메소드 추가/삭제가 가능하다.

  * 객체의 생성은 함수를 통해 이루어지고 함수 정의할때 "생성자"속성을 부여하면 해당 함수가 prototype이라는 프로퍼티를 추가로 갖게 된다.

  * prototype 프로퍼티는 프로토타입 객체로써 동작하며,

  * 생성자가 수행되면 프로토타입을 link로 건 새로운 객체가 생성되고 해당 생성자 함수를 통과하면서 새로 프로퍼티가 추가되거나 삭제된다.

  * 알고리즘을 짜면 이렇다.

    ```javascript
    var My = function() {
        this.age = 20
    }
    My.prototype.name = "My"
    ```

    ```cpp
    class Proto {
    public:
        Proto() { name = "My"; }

        string name;
    };

    class My {
    public:
        My(Proto* org) { age = 20; proto = org; }
        int age;
        Proto* proto
    };

    My* My() {
        static Proto inner;
        return My(&inner);
    }
    ```

    1. 컴파일시, 프로토 객체(= 부모객체)로 부터 상속을 받은 뒤, 고유의 멤버변수/메소드를 추가한 origin 객체를 정의한다.

    2. 생성자가 호출되면, 일단 origin객체를 복제한다.

    3. 그 뒤에, origin객체에 대고 생성자를 호출한다.

    4. 생성자내에서는 이미 생성된 멤버변수에 대해서만 조작/assign만 하게 된다.



  **즉 포인트는, 객체의 생성은 이미 프로그램이 런 하기전에 끝나있다. 생성자는 객체를 생성하는 역할이 아니라, 멤버변수를 조작하기 위한 이벤트의 일종이다.**

고로 생성자는 의미가 있다 !



# [v] 프로퍼티의 구현의 초안

요구사항을 뽑아보자.

1. public, private를 표현 할 수 있어야 한다.
2. 그저 또다른 객체의 define과 동일하다.
3. Q. Origin 객체라고 볼 수 있는가?
4. 타입 유추에 기반한 문법을 사용해야 한다.
5. 문법이 괴기스럽지 않아야 한다.
6. 가능하면 새로운 키워드나 특문의 추가는 없어야 한다.
7. 모호성의 오류는 없어야 한다.
8. 끼워넣기 다형성이 동작할 수 있어야 한다.
9. 동작상 추가가 없는 경우, 기존 get,set을 명시하지 않아도 물려받았다는 걸 표현할 수 있어야 한다.

## [v] 본질을 찾아보자.

프로퍼티란,

* 변수 행세를 하는 것.

* 변수란 get, set 2가지 메소드를 제공하며 내부에 데이터를 소유하는 객체.

* 모든 origin 객체는 기본적으로 get, set 메소드를 가지고 있다.

* 이 get, set은 직접적으로 호출되지 않으며 컴파일러/월드 시스템에 의해서 간접적으로 호출되는것이다.

  ```cpp
  def Part Mouse
      // 자동으로 아래의 2메소드를 만들어준다.
      Mouse get(): this
      res set(Mouse new)
          if Mouse.sharable?
              this.refer = new
          else
              this = Mouse(new)

  m1 = Mouse() // Mouse.get() called
  m2 = m1 // m2.set(m1) called
  ```

* 핵심은 멤버객체란 데이터를 get 혹은 set 으로 제공해주는 객체다.
* 변수 + 프로퍼티 = 멤버객체
* 프로퍼티의 핵심은 get/set 다형성, nested class를 이용해서 다른 데이터를 가공/route해서 제공하는 데 있다.
* 어떤 것이든지, get혹은 set을 제공하면 멤버객체다.
* 프로퍼티는 get/set을 overriding하는 것일뿐, 덮어써도 되고, add를 해도 된다.

### [x] 1안

```cpp
def Part #Mouse
    age = 20
    def int age1
        get: age
        set: age = new: c.out("age=$age")
// get에 의해서 타입유추가 일어난다.
// 캐스팅 문법과 동일하게 def 뒤는 origin 객체가 추출&치환 된다.
    // 이걸 풀어주면 헷갈릴 수 있다는 걸 이미 우리는 다뤘다.
    int getAge(): 20
        def getAge() age1 // age.val은 20일 거라고 착각한다는 것이다.
            void say(): val // 실제로는 0이다. 타입만 가져왔지, 값을 가져오진 않았다.

// 인터페이스의 변경이다. 고로 새로운 origin 객체를 정의하는 문법을 따라야 한다.
// 정말 origin인가?

mouse1 = Mouse()
//props = [mouse1.age1, Mouse.age1()] // #Mouse.age1으로 유추됨
//props = [mouse1.age1(), Mouse.age1()] // Mouse가 #이면 Mouse.age1()도 # 다.
props = [mouse1.age1(), Mouse().age1()]
props.each(e->$n=0: e=++n)
    // Mouse() 객체는 소멸되지 않는다. props가 age1을 물고 있고, age1은 Mouse()를 물고
    // 있다.
    // 결과:
    //    age=1
    //    age=2

// 프로퍼티는 소유클래스에 강하게 결합되어있다. 따라서 소유클래스의 객체가 반드시 필요하다.
```

이렇게 프록시처럼 실체가 따른곳에 있고 그걸 routing만 하는 경우라면 쉽게 될 수 있다.

문제는, 프로퍼티 자체가 변수를 소유하고 있는 경우는 어떨까?

```cpp
def Part #Mouse
    def age = 20
        set=>: c.out("age=$age")
```

* 이런 요상한 문법이 된다.
* age는 변수이므로 동적요소와 정적요소를 모두 갖는다. 정적 요소는 타입유추로 메꿔진다.
* 하지만 동시에 문법에 추가가 존재하기 때문에 origin 객체가 된다.
* 그러니 origin 정의임을 암시하는 def가 앞에 붙는다.

생각을 좀 해보자.

* 변수의 정의는 쉽게말하면 복제이다.
* 복제일때만 타입유추를 쓰도록 했었다.



[x] 아예, def 문법을 뜯어고치면?

```cpp
def Mouse = Part // Part의 복제된 상태에서 출발한다.
    def age = 20 // 20은 origin객체가 int. 이걸 복제한 상태에서 출발한다.
        set=>: c.out("new value=$new")

    def body = Body("for gaming")
        set=>: c.out("new's name is $new.name")

def Mouse = Part("mouse") // Mouse는 Part에 mouse 넣어진 생성자로 만들어진 객체에서 출발.
    // Mouse() 이경우 생성자를 만들 수 없다.
    //      super()
    //      c.out("constructor")

Part getPart(str msg): with msg
    is "mouse": Mouse()
    is "body": Body()
    default: null

def Mouse = getPart("mouse")
    // Mouse는 Part 기반으로 origin 객체가 생성됨.
    // 근데, 이거 봐라. 이거 무한 재귀잖아.

mouse1 = Mouse() // Mouse객체가 생성될때 getPart("mouse")가 실행됨.
```

타입 정의는 정적요소. 근데 거기에 동적요소를 끼워넣는다는게 헷갈리기 쉽고 설명하기 어렵고 예측하기 힘듬. 좋은 아이디어가 아니다.

굳이 하려고 한다면, 객체를 생성해서 값을 넣는 경우는 "생성자를 정의 할 수 없다" 는 규칙을 끼워넣으면 괜찮다.

```c#
def Part
def Mouse = Part
    Mouse(): c.out("생성자")

// 이건,

def Mouse
    =>Mouse()
        c.out("생성자")





Part getPart(str type): with type
    is "mouse": Part("mouse")
    default: null

def Mouse1 = getPart("mouse")
    age = 20
    Mouse1(int newage)
        c.out("생성자")
        age = newage

    Mouse1()
        c.out("생성자")

arr = [Mouse1(), Mouse1(33)]

// 이것은,
def Part
    Part()
    Part()

def Part Mouse1
    Mouse1(Part super)
        Super()

    def age = 20
        // age(): c.out("생성자")
        // Q. int도 생성자가 있어야 하는가?
    def body = Body get_part("body")
```

### 알고리즘1

1. 컴파일을 시작한다.

2. Origin 객체로부터 상속 구조를 만들어낸다. 그리고 메소드 / 멤버변수를 추가한다.(Mouse1 -> Part) 초기화 수식은 실행하지 않는다. 각 멤버변수들은 default 상태로 구성된다. 멤버변수는 절대로 삭제되거나, 여기서 추가되지 않는다. 이를 OriginShell이라 하자.

3. origin shell을 바탕으로 컴파일 validation을 진행한다.

4. 프로그램 시작 도중, static변수 초기화처럼 origin객체들을 모두 생성한다.

    1. origin객체가 생성시 from 뒤의 expr를 실행한 객체로부터 set()이 호출된다.

5. 각 origin 객체 마다

   1. scope에서 찾는다.

      1. 없으면 초기화에 들어간다. origin shell을 생성하고 scope에 넣는다.

      2. [x] **origin_shell.assign(expr) 한다.**

         1. [x] **반환한 객체가 null이면 에러.**

            **origin_shell 기준으로 assign이므로 expr의 객체가 origin 객체 이상의 멤버변수/메소드가 있다면 자연스럽게 무시된다.**

      3. 멤버변수의 초기화식은 모든 생성자에 앞부분에 명시된것으로 간주한다.

      4. origin객체의 완성. 확정짓는다.

   2. 있으면 scope에서 바로 반환한다. 초기화 중이건 상관하지 않는다.

6. 사용자가 생성자를 호출하면, origin객체를 복제한다.

7. 복제한 객체에 생성자를 수행한다.

8. 생성자 체인 내부에서는 이미 생성된 멤버변수들에 대해 조작만 가한다.

[x] prop을 제거함으로써, **딱 1개의 step만 더 생기 도록 만들었다.**

음.. 일단 될것 같은데. 문제는

* [x] prop을 사용한 경우와 알고리즘을 비교해보자. 어느쪽이 얼마나 복잡한가?

* [x] Q. 더 최적화 요소는 없는가? 상속구조는 버림?  --> 최적화 했다. 이제 버리지 않는다.







### [v] C-REPL시 어떻게 되는가?

  * [x] 가장 이상적인 시나리오는 SMART하게 동작하도록 하는 것이다.

    * 만약 메소드 내부를 고쳤다면 ->
      * 가장 쉽다. 메소드 내부의 컴파일 수행한다. 생성된 메소드 객체를 기존과 교체한다.
    * 클래스 내부 인터페이스가 변경되었다면 ->
      * 변경된 인터페이스 부분들을 수집한다.
      * 해당 부분들만 컴파일 한다.
      * 링킹 validation을 돌린다.
      * 최종 완료된 객체들을 origin에 교체한다.
      * 그리고 쉽게 생각하면 관련된 모든 인스턴스들(origin의 복제 객체 뿐만 아니라 수정된 인터페이스를 사용하는 모든 인스턴스들)를 교체 한다.

  * [v] **절충안 : 속도도 같이 고려한다.**

    * 핵심

      * origin객체 명세가 바뀌면, 복제 객체들은 어떻게든 쓸모가 없어진다. 어떠한 방법으로도 기존 복제 객체들을 그 값의 유용성을 유지한 채로 새로운 명세의 객체로 보완할 수 없다.
        * 무슨말인고 하니,
          * def Person
            * age = 20
          * p1 = Person()
          * 일때,
            * age = 19
          * 로 바뀌었다고 하자. 그럼 단순히,
            1. Person을 다시 검증, 생성해서 orign을 교체한다.
            2. Person origin로부터 생성되었던 p1의 값을 새로운 Person의 객체로 교체한다.
          * 면 될 것 같을 것이다. 그러나 이건 잘 못된건데,
            * p1 = Person()
            * p1.age = p1.age + 30 // 49
          * 위와 같을때 Person의 age의 초기값이 20으로 바뀌었다. 가장 올바른 값은 p1.age가 20으로 초기화된 상태에서 수식을 다시 돌린 p1.age == 50이 답이다. 그러나 이를 유추할 수 있다면 이미 현세대 언어가 아니다. 불가능하다.
        * 따라서, 애초에 100%가 불가능 하므로 이걸 limitation으로 앉고 간다. 일체 지원하지 않는 쪽으로 한다.
        * origin객체에 변경이 일어나면 관련 복제 객체들은 모두 제거하거나, 그냥 놔둔다.
          * [디폴트] 항상 제거 옵션을 선택하면, 최신 코드/명세가 적용된 객체만 HEAP에 있게 된다. 안심할 수 있다.
          * 옵션을 끄면,
            * 임의의 값이 할당되었다고 가정하고 테스트를 해볼 수 있다. 그러나 실제로는 가능성이 없는 값일 수 있다.
            * 코드상 존재하지도 않는 객체를 놓고 씨름할 수 있다.
        * 객체의 생성은 전적으로 사용자를 통해서 이뤄줘야 한다. 생성자에 복잡한 파라메터가 들어가야 할때가 있기 때문이다.
      * 메소드 안쪽이 변경된 경우는 구현만 교체하므로 복제 객체는 사라지지 않는다.

    * 알고리즘

      * SMART방식

        * 사용자가 수정한 code line을 text로 인터프리터에게 알려준다.

        * 인터프리터는 코드 자체를 대조해서 어느 라인이 변경했는지 diff 한다.

        * 컴파일단계

          * 인터프리터는 해당 변경점에 영향을 받는 최소한의 객체범위를 탐지한다.
            * 예)  1: def Part
              * 2: age = foo(20, 30, // 30이 20으로 변경한경우
              * 3:     getText())

          * 2, 3번 라인이 객체 생성 가능한 최소한의 코드 범위다.
            * 예) stmt 1줄, origin 명이나 상속구조를 수정했다면 그거 자체.
          * 인터프리터가 파싱 후, 객체(메소드/origin객체/멤버변수) 생성한다.

        * 링킹단계

          * 사전에 외부에 영향을 갖는 "인터페이스 객체"(= origin객체의 메소드와 멤버변수, 전역변수)와 "origin 객체" 간의 관계를 매핑해두고 있다.
          * 그 매핑테이블로 해당 객체와 연관이 있는 모든 객체에 문제가 없는지 validation을 돌린다.
            * 사전에, 연관 정보를 다 기록해둬야 한다.
            * 이 정보는 C-REPL 시에만 필요하다.
          * 이상이 없다면 origin 트리에 병합한다.

        * 정합성 단계

          * C-REPL시 origin객체는 또한 복제객체들을 모두 알고있다.

          * 수집해둔 변경된 인터페이스 객체들 목록을 순회하면서 각 원소별로 매핑테이블의 관련 origin객체들의 모든 복제객체들을 싸그리 제거한다.

            1. 검증1: 다음 같은 시나리오는 문제가 되지 않는다

            ```cpp
            1: def Part
            2: def Part Body
            3: def Part Mouse
            4:       body = Body()
            5: // 에서 Body가 BBody로 이름 변경된 경우
            ```

            이 경우, 바뀐건 2번 라인이지만, 4번 라인에 body = BBody()로 바꾸지 않을 경우 링킹단계에서 실패하게 된다.

            사용자가 4번 라인을 바꾸게 되면 멤버변수 body가 바뀐것이므로 2번 라인과 4번 라인은 서로 병렬적으로 돌게 된다.



    * prop 대비, 더 하는 건 없다. 왜냐하면 추가된 부분은 origin 객체를 런타임에 초기화 할때 일어나는 것이지 빌드시 일어나는게 아니니까.

* [v] expr 수행시에 무한 재귀를 비롯해서 예상치 못한 에러는 없는가?

  ```cpp
  def #Part
      Part()
      Part(str name)
      def name = ""
          get=>: c.out("name=$name")
          _set=>:

  def #Mouse = app.getPart("mouse")

  def app
      Part getPart(str name): with name
          is "mouse": Mouse()
  ```

  * 다음의 규칙을 추가한다.
    * scope에 origin 객체가 없으면 바로 생성후 scope에 추가한 뒤에 초기화에 들어간다.
    * **이후, scope에 origin 객체가 있으면 초기화중이건 되어있건 신경쓰지 않고 초기화가 되어있다고 간주하고 반환한다.**

  * 그럼 다음과 같은 문제는?

    ```cpp
    def #Part
        Part()
        Part(str name)
        def name = ""
            get=>: c.out("name=$name")
            _set=>:

    def #Mouse = app.getPart("body")
        name = "mouse"
    def #Body = app.getPart("mouse")
        name = "body"

    def app
        Part getPart(str name): with name
            is "mouse": Mouse()
            is "body": Body()
    ```

    * [v] 흐름

      1. 컴파일: Part, Mouse, Body, app이 각각 origin shell이 만들어진다.
      2. 링킹: 코드 validation을 통과하고 origin shell을 keep 한다.
      3. 런타임 진입
         1. Part origin 객체를 완성한다.
         2. Mouse origin 객체에 접근하지만 아직 생성되지 않았다.
         3. expr(app.getPart("body")) 수행한다.
         4. Body에 접근하지만 아직 생성되지 않았다.
         5. app.getPart("mouse")를 수행한다.
         6. Mouse는 생성은 되었다. 초기화중이다. 그럼 origin shell이 나간다.
         7. Body.name = Mouse.name = "" 가 들어간다.
         8. Body의 초기화 수식이 돌아가서 Body.name = "body"가 된다.
         9. Mouse.name = "body"가 된다.
         10. 초기화 수식이 돌면서 Mouse.name = "mouse"로 된다.

    * 결론

      * 상속 관계를 원형으로 만들면 expr 수행시 각 멤버에게 null 값이 들어가게 된다.

      * 이렇게 하는게 잘못이다. 코드를 잘 짜야 한다.



* [x] 실행 순서를 보장 못하는 것이다. 늦은 초기화 인데, 일반적인 언어의 static과는 동작이 다르다. 문제는 없을까? -> static과 동일하다. origin객체는 static과 다를게 없다.



* [x] 메소드도 복제시키면 안된다. 최적화 하자.

  ##### 아이디어1 - origin 객체는 shared를 갖고 있는다.

* origin 객체 구성 알고리즘

  1. 컴파일이 시작된다.

  2. origin으로 삼을 ManagedObject를 하나 만들어 scope에 넣는다.

     1. 부모Origin 객체를 찾아, assign 한다.

        ```cpp
        uniques = parent.uniques.clone()
        if C-REPL
            shared = new Chain()
            shared->chain(*parent.shared)
        else // optimization
            shared = new Array()
            *shared = parent.shared->clone()
        ```

     2. Unique한 멤버변수들은 origin에 바로 담고, sharing 할 것들은 origin이 binder로 가리키는 shared에 담는다.

  3. origin shell이 완성되었다.

  4. 프로그램이 시작된다.

  5. origin 객체를 scope에서 찾는다. state가 "초기화 완료" 가 아니라면 초기화를 수행한다. 초기화가 완료된다.

  6. 사용자에 의해 origin 객체가 복제되면, 복제객체도 Unique와 shared를 분리해서 가지고 있게 된다.

* [x] 중첩클래스와 프로퍼티가 구분이 안간다.

  * 중첩클래스는 1개만 존재하며 공유하는 것.
  * 프로퍼티는 모든 객체가 갖는 것.
  * 근데 문법이 같다.

  ```cpp
  // U: 객체마다 1개씩
  // S: 모든 객체가 1개를 공유
  def Person
      age = 20 // U

      def $Sayable // S
          void say()
              c.out("age=$age")
      sayable = Sayable() // U

      def $name // S
          get: org.name
          _set:

      def grade = 3.5 // U
          get=>: c.out("grade=$grade")

  (p1, p2) = [Person(), Person()]
  p1.age = 1: p1.sayable.say(): p1.name
  p2.age = 2: p2.sayable.say(): p2.name
  ```

  #####     [x] 아이디어1 - expr에서 객체를 생성하나, 객체를 route 하냐의 차이로 결정한다.

  ```cpp
  def Person
  def Student = Person
  def Teacher = Person()
  ```

  ##### [x] 아이디어2 - $를 쓴다.

  * $를 원래 써왔고. 이럴때 쓰라고 만들어 둔게 맞다.

  * 정리

    * def 객체를 정의함으로써 *생성*하는 것이다.

    * 중첩된 def도 마찬가지로 origin 객체는 실제로 독립적인 객체를 소유한 것으로 origin객체가 복제되면 중첩된 origin 객체들도 복제가 되는게 맞다.

      ```cpp
      def A
          def B
          b = B()
          b1 = B null
          // B나, b나, b1이나 모두 *객체* 다.
      a = A() // a.B는 A.B로부터 복제된 객체다.
      ```

    * 메소드는 별다른 명시가 없어도 static으로 간주한다.

    * global scope에 있는 def 의 경우 $를 붙이지 않아도 된다. def에 $를 붙이는 경우는 중첩클래스일때 뿐이다.

* [x] get/set이 정의된 origin객체가 있을때도 정상동작 하는가?

* [x] 생성자에서 다른 생성자를 호출하는게 가능한가? -> expr은 생성자가 호출되기전 origin이 초기화될때 수행된다. 생성자는 복제 객체가 만들어질때.

* [x] expr이 일반 sharable 일 경우와, occupiable일경우 모두 문제 없는가? -> 네

  ```cpp
  def A = getAge("35")
      int $#getAge(str val): int val // 명시적 캐스팅일때만 int화
  a1 = A
  ```

* [x] 프로토타입 기반 언어라고 할 수 있는가? -> 순수는 무리지만 그렇다고 클래스도 아님.

### [x] 알고리즘2

1. origin 객체를 뽑아내서 상속구조를 만든다.
2. 컴파일 완료
3. 객체를 생성하면 정적타입 기반으로 객체를 만든다.

### [v] 알고리즘3

1. 컴파일시, origin객체를 뽑아내서 간이 상속 구조를 만든다. 따라서 어떤 메소드, 멤버변수들이 있을 것인지 예측 가능하다.
2. 1번에 생긴 심볼테이블을 들고 에러 검사를 실시한다.
3. 런타임시, origin객체를 런타임에 생성한다.
4. expr를 수행해서 나온 객체를 super() 대신으로 한다. 만약 예측한 상속 구조보다 더 많은 메소드가 있을 경우, 잘라낸다.
5. 이제, 이 origin 객체에 추가된 인터페이스를 여기에 추가해서 origin객체를 확정한다.
6. 이후 origin객체에 대한 복제가 일어나므로 위의 expr 수행은 1번만 수행되게 된다.

### [x] 알고리즘4

1. 컴파일시, origin 객체를 뽑아내서 expr은 컴파일타임에 수행할 수 있다는 전제로 수행해서 origin객체를 완성한다.

### [x] 알고리즘5 - 일단은 가장 유력하다.

1. 새로운 문법을 만든다.

   1. prop <변수명> = <expr>
      1. get
      2. set

2. def 문법에서는 set, get을 사용할 수 없다.

   ```cpp
   def Part
       prop name = "unknown"
           get=>: c.out("getting $name")
           _set=>

       prop orgname
           // get=>: 에러 =>를 쓸 수 없다.
           get
               cls = this.class
               return cls.name
           //get: class.name
           _set

       void init()
           name = "init"

   with Part()
       name = "abc" // 에러
       init()
       c.out(name)
   ```

* 왜 이게 젤 나은가?
  * def 에서는 get/set이 필요가 거의 없다. 있으면 좋긴 하다.
  * def 는 정적요소를 위한 것으로 동적 요소인 expr를 끼워 넣으면 구현이 더럽게 될 수 밖에 없다. (아니면 신기한 아이디어가 있던가)



# [x] 프로퍼티에서 readonly를 const 로 대체 가능한가?

```cpp
def Part
    prop name = "unknown"
        get=>: c.out("getting $name")
        _set=>

    prop #name = "unknown"
        get=>: c.out("getting $name")
```

다르다.

* 1번은 남은 못 씀. 나는 씀.
* 2번은 나도 못 씀.











# Getter & Setter

## 컴파일러는 onGet의 반환형을 감지해서 컴파일에러를 어떻게 내는가.

isConsumerable을 static컴파일 용으로 사용할 생각이라면
그 함수는 null객체인지 여부를 따져서는 안됨.
그리고, 이렇게 될때, refer.isConsumerable()은 _bean.isConsumerable()로 redirect하고, Wrapper는 membervariable인 refer.isConsumerable()로 redirect하면 됨.

```cpp
a := b
	get:
```
이런 문법(overriding만 가능한)은 없음. 지원 안할꺼임.

* 그리고 null된 프로퍼티에 별도의 다른 메소드를 넣는 경우 warning 처리.
* 왜냐하면 onGet의반환형이 이 프로퍼티가 아니므로 메소드 호출은 영영 불가능.

### 이제 onGet은 Refer에만 있는 것이다. 물론 컴파일 체크도 가능할 것이다.







## [v] get의 구현

### 개념 정의

* get은 run()을 호출했을때, 안쪽에서 msg를 순회하기전에 불려지는 cb이다.
```cpp
Node::run(Msg msg) {
	caller = this;
	Refer<This> r;
	if( get이 있다면)
		r = _run(onGet()); // onGet을 호출한다고 또 run을 타면 안된다.
		caller = r.get();
	caller._run(msg);
}
```


  * 예) say(void) // 메소드의 접근
  * 시, get은 메소드의 this를 내보내는 것이지 메소드의 호출이 아니다.
* 반환된 결과를 this에 재주입한다.
* 기본구현은 this를 그대로 반환하는 것이며, 별도의 정의가 없으면 이렇게 되어있는것처럼 동작한다.

	* 실제로 메소드를 만들어주지는 않는다. 최적화때문에.
* 당연히 overriding 되지 않는다.  되어서도 안된다. 반환형은 항상 This 이기 때문이다.
* overriding이 서로 다르기 때문에 ADT만 손에 쥘 수 있는 FRX에서는 c++로 호출이 거의 불가능하다. 자연스럽게 run()을 사용하게 된다.

* run(Msg("onGet")); 을 하면 onGet()이기만 하면 되는 메소드를 찾아 실행한다.

* 예)

  ```java
  a // scope["a"]
  /* def a
      a onGet(): this
  */
  ```

  * scope에서 객체 a에 접근한 뒤, 이 객체 a를 반환한다. a를 반환하는 부분이 get이다.

  예)

  ```java
  a.age // e.g. in c++, a.getMembers("age")
  /* def age = int
      int onGet(): this
  */
  ```

  * 객체를 통해 sub객체에 접근하는것 또한, 그 sub객체 중에 "age" 라는 이름을 붙은 것들을 찾아, 그것에게 onGet()을 호출하는 것이다.



  예)

  ```java
  a.age.foo // foo는 메소드.
  /* def foo = Method
      Method onGet(): this;
      float op()()
          // 이게 함수 호출
          return ...
  */
  ```

### 알고리즘

* 외부에서 Node::get(n)이 호출되면, 일단 객체를 찾아, 꺼내기 전에 해당 객체에 대해 Refer onGet()을 호출한다.
* Mgd에서도 get(n)을 사용하고 native도 get(n)을 쓸 것이므로 양 쪽 환경에서 동일한 결과가 나오는걸 보장할 수 있다.
* Refer onGet()
  * 해당 객체가 onGet()를 호출하는게 아니라는게 포인트다. 외부에서 그 객체에 접근할때 onGet()을 하는거다.
  * 메소드든, 변수든 객체를 찾으려면 항상 Node::get(n)을 사용한다.
    * scope또한 Node이므로 역시 이에 해당한다.
    * Node::get(str name)도 내부에서는 Node::get(n)으로 redirect 시킨다.
    * refer::onGet()은 _proxy->onGet()으로 redirection 되므로 역시 이에 해당한다.
  * Refer로 반환한다.
* Node::get(n)은 받은 refer를 반환한다.

### 최적화

* 일반적으로 함수 호출하려면 객체에 접근해야 되고, 객체의 접근 또한 함수의 호출이 되었으므로 함수 1개분의 호출이 더 늘어난 셈이된다. 속도가 걱정된다면 다음의 안을 생각해볼 수 있다.
* 본질적으로는 어떻게 하면 onGet()의 load를 줄일 수 있을지 생각해 보는 것이다.
* 최적화는 반드시 모든 개발이 끝난뒤에 소극적으로 적용해나가야 한다. 구조를 해치는 최적화는 안된다. 속도보다는 빠른 생산성과 편의성!
* 1안 onGet() 무시
  * 객체가 onGet()을 정의하지 않았다면 onGet()을 호출하지 않는다.
* 2안 FRX에서 호출하는 __frx_get(n) 을 만들고 반환형을 Node&로 한다.
* 3안 onGet()안에서 Refer를 local scope에 등록하고 그것에 대한 node& onGet()를 반환한다. Node는 적절한 시점에 local scope을 free할 것이고 그때 같이 해제된다.


### 다시 만들어보자
### 1안 get-set은 프로퍼티만의 것
* 대부분 언어가 이렇게 함.
* get-set을 다시 정의하는 것은 프로퍼티 용도로 사용하려는 케이스만 존재.
* 그러나 getset문법을 다른 객체에 사용할 수 없다는 제약이 있음. 사용자는 이 문법이 오직 프로퍼티만을 위한 것이라는걸 알아야 함.
* 구현은?
	* class ReferBase
		* Type
		* class Refer
		* class PropBase
			* class MgdProp
			* class PropWrapper
				* NAMU_PROP(....)
* null이 아닌 프로퍼티를 만들 수 있는가?
	* 아니오. 불가능하다.
	* 그러나 null이 아닌 프로퍼티를 만들려는 이유가 무엇인가?
	* 그것은 멤버변수를 일종의 interface화 시켜서 멤버변수를 getter 없이 바로 public으로 공개하고자 하는 것이다.그러한 문화를 만들고자 하는 것이다.
	* world는 멤버변수도 overriding을 지원한다. 단 반환형이 동일해야 하므로 멤버변수를 다른 멤버변수로 overriding 하는 것은 의미가 없다.
	* 대신에 멤버변수를 프로퍼티로 만드는 것은 가능하다.
	* 그러므로 단순 getter(의미도 없이 바로 return 멤버변수 하는 애들)를 만들지 말고 바로 public으로 반환하라.



##  [..] Native와 onGet

### 정의
* Get도 똑같이 SEAL로 나가면 된다.
* 단, Get의 경우 반환형이 항상 This여야 한다. 이걸 체크하는 기능이 매크로에 있어야 한다.

### Native에서의 실행
* MgdObj를 가져오려면 반드시 getMember(n)을 통해야 하므로 문제가 없다.
* 문제는 getMember(n)가 아니라 별도의 과정으로 객체를 획득한 경우.
```cpp
class myObj : public obj {
	NAMU_CLASS(myObj, obj, GET(___GET___fuckyou_its_myname))
	This ___GET___fuckyou_its_myname() {
		....
	}
}

class kk : public obj {
public:
	NAMU_CLASS(kk, obj,
		FUNC(foo)
	)

	myObj* foo();
	myObj value;
}

void koo(kk& k) {
	kk.foo();
}
```

### 1안 안되게 한다.
* get은 run()을 했을때만 적용이 된다.
* native에서 NAMU_OVERRIDABLE이 안된 일반 메소드를 호출할 경우는 onGet이 불려지지 않는다.

### 2안 get은 이제 refer에만 존재하는 메소드이다.
* 이 경우 "get의 구현" 문서를 보면 알겠지만 PropWrapper의 onGet, onSet 2개의 메소드를 c++ 코드로 overriding 하는 매크로를 만들기만 하면 된다.
* Native에서 Node로 주어진경우 Refer수 있으니 반드시 to()로 가져와야 하는 제약이 이미 있다.
* 프로퍼티는 Refer의 일종이므로 이 제약 1가지만 가지고도 Native에서 그대로 사용가능해졌다.
* get을 범용적으로 했을때는 모든 Object, Node, 에 대해서 반드시 to()를 써야 했으므로 큰 차이가 있는 것이다.



## [v] set의 구현
### 요구사항
* set은 op=와 동일하다. 다만 get은 기존 operator에 없는 메소드이므로 이름의 쌍을 맞추기 위해 set으로 하였다.
* 객체 입장에서 봤을때는 일종의 cb이다.
* sharable을 구현하기 위해 다음처럼 우리는 하고 있다.
  * 모든 객체는 일단 한 번은 refer에 의해 씌워져 있을것. refer에 씌워져있지 않다면 sharable을 구현할 수 없다.
  * refer만 가지고 소통 할 것
  * refer는 pointer인 _bean만 교체함으로써 sharable을 구현 할 것.
* 그러나 문제는 set이 놓여진 곳은 refer가 아니라 대상 클래스 이며, refer의 존재는 코드 상에 나타나지 않는다는 점이다.

### 알고리즘

#### 사전 준비

* MyObject::operator=(const MyObject& rhs)는 set(#MyObject) 로 visible 된다.
  * MyObject::operator=()는 Super::operator=()를 호출하도록 해야한다. 이건 개발자의 책임.
* Node::operator=()는 set(#Node)로 visible 된다.
* Object와 그 자식클래스들은::operator=()에서 occupiable을 전제로 구현한다.
* Refer::operator=()에서는 그런데, bind만 수행한다.
* bool Node::isOccupiable()은, Object보다 자식클래스에서 set을 정의 했다면 true를 반환한다.

```cpp
class myObj : public obj {
  NAMU_CLASS(myObj, obj,
    FUNC(operator=) // 이걸 visible하게 하므로 myObj는 occupiable이다.
  )
    This& rhs operator=(const This& rhs) {
    if(&rhs == this) return *this;
        Super::operator=(rhs);

        _grade = rhs._grade;
        return *this;
    }
  float _grade;
};
```

#### 실행

```cpp
o1 = myObj()
def child := myObj
  //This set(This new)
  set=>: name = new.name // 이건 없어도 자동으로 해준다. set이 있으므로 occupiable이다.
  name := "child"

c1 := child()
c2 := child()
c1 = c2

def my
  name := "wow"
m1 := my()
m2 := my()
m1 = m2
```

* 컴파일러는 객체 정의시, origin.isOccupiable()을 질의한다.
  * true이면 바로 scope에 넣고
  * false이면 Refer에 씌워서 넣는다.
* 모든 객체는 occupiable/sharable 관계없이 operator=()가 호출되면 객체가 할당연산에 들어간다.
  * sharable의 경우, 다음 중 하나다.
    * Mgd객체였고, set은 재지정되지 않았다.  ==> 이 경우 기본 set이 대신 사용된다. 이것은 C++ operator=()와 동작이 똑 같을 것이다.
    * Native객체였고, operator=()을 만들지 않았다. ==> 역시 위와 같은 케이스이다. c++의 operator=()를 대신 사용한다.
    * Native객체였고, operator=()을 만들었으나 visible하게 하지 않았다. ==> operator=()는 system에 의해서 호출될 수 있다. 그러나 Mgd에서 개발자에 의해서 명시적으로 호출되진 않을 것이다. 이 경우는 복사생성자가 호출될 것이다.
* Mgd 에서 "a = b" 구문은 항상 a.set(b)로 치환된다.
  * set은 overriding, overloading, hiding이 모두 적용된다.
* Native에서 "a = b" 구문은 a::operator=(b)를 역시 호출하게 된다.
  * c++은 operator=()에 대해 overloading, hiding만 허용한다.
* set()을 파생클래스에서 overriding할 수 있게 조치가 필요하다.
  * 기본적으로 최적화를 위해서 worldfrx의 메소드들은 seal 처리 된다.
    * worldlang spec에 seal이란 기능은 없다.
    * seal visible 매크로와 일반 visible 매크로 2종류가 존재하며 visible매크로만 3rd에 공개된다.
  * 3rd개발자가 operator=를 visible 한 경우에는 worldlang 메소드 이름을 set으로 해야하며 overriding 가능하도록 해줘야 한다. 그렇게하면 native에서 operator=()를 하는 경우, run(Msg("set", {args}))를 대신 호출하도록 한다.
* 한가지 한계점은 멀티메소드가 안된다는 점이다.
  * mgd/C++에서 operator=()를 할 경우, 파생클래스의 operator=() 가 호출되는게 아니다. 따라서 온전히 객체가 할당되지는 않는다.
  * 따라서 c++에서 mgd 객체를 받아와 operator=()를 호출 하는 경우 mgd의 set()이 불리지 않게 된다.
  * mgd에서 객체 parent를 가져와 op=()를 하는 경우

### Q1 [v] 오버라이딩을 지원하는가?

```cpp
def parent
  age = 3
  res set(parent rhs)
      age = rhs.age

def child = parent
  name = ""
    ret=>res set(parent rhs)
      c.out("NO WAY!")
      ret

  ret=> res set(child rhs)
      c.out("GOOD WAY!")
      name = rhs.name
      return ret

p1 = parent(), p2 = parent()
pc1 = parent child()
c1 = child pc1, c2 = child()

p1 = p2 // show nothing
p1 = c1 // show nothing
pc1 = p1 // NO WAY!
p1 = pc1 // show nothing
pc1 = c1 // NO WAY!
c1 = pc1 // NO WAY!
c1 = p1 // NO WAY!
c2 = c2 // GOOD WAY!
```



### Q2 [v] 하이딩을 지원해야 하는가? --> 별도의 항목으로

* hiding을 지원하지 않으면??

* 지원하지 않으면 구체클래스 일 수록 많은 set등을 가지게 된다.

* 해결 하는 방법 1안은 상속시 멤버들을 private로 받을지, public으로 덮을지 결정하는 특문을 추가한다.

* 해결 방법 2안은 속이 빈 메소드를 정의한다. 프로그램 동작시에는 2개의 메소드가 있지만 최적화를 하면 1개로 통합 가능하다.

* [v] 해결 방법 3안 --> 별도 문서 참조

  ```cpp
  def parent
    age = 0
    void say(int)
  def child = parent
    void _say(int)=>
    void say(float)

  p = parent()
  c = child()
  ```



### Q3 [v] 지원해야 한다면 sharable과의 동작은 어떻게 되는가?

밑에 서술한 대로 set이 없어야 sharable로 인식한다.



### [v] 1안 set이 있다는 것은 occupiable을 의미한다.
#### Refer의 동작
* 기존대로 모든 객체는 refer에 의해 감싸져 있다.
* refer는 대상이 되는 type을 object로 들고 있으며 _ptr이 type의 자식 클래스임을 world 컴파일타임에 보장한다.
* refer.set()이 호출되면 refer는 type에서 "set"을 찾는다.
  * set이 없을 경우, refer의 기본동작을 대신 수행한다. sharable 이다. ptr = rhs.ptr만 하면 된다.
  * set(type) 이 있을 경우, set에 ptr를 넘기고 반환된 refer를 리턴한다.
* occupiable 객체일 경우 컴파일러 혹은 FRX에서 소유한 모든 멤버를 그대로 복사하는 set() 만들어준다.
  * set()이 있으므로 컴파일러는 occupiable로 판단한다.

#### 사용자 클래스
* worldlang에서 set 이라고만 적으면 set(This rhs)와 같은 것이다. 안에서 자유롭게 연산을 하건 메소드를 호출하건 해서 This 객체를 넘기기만 하면된다.

### [v] Q4. native의 경우는 어떻게 set을 정의할까?

* set 은 c++의 operator=()와 같다.
* c++개발자는 operator=를 visible하게 할지 선택한다. visible하게 하면 occupiable로 동작한다.
  * 만약 base는 occupiable이었는데 derive는 operator=를 빼지 않으면 base::operator=()만 호출 될 것이다. 이는 Mgd도 동일하다.
* operator=는 visible하게 하든 안하든 항상 부모클래스::operator=를 호출하도록 해야 할 것 이다. world에서 부모클래스::set도 호출해주지는 않는다.
* visible하게 하지 않아도 operator=는 당연히 존재한다. C++컴파일러가 채워주니까. 다만 이 경우 native에서만 사용된다. Mgd에서는 사용되지 않을 것이나, FRX는 사용할 수 있다는 얘기다.
* operator=로 한 visible이 있을 경우 bridge 컴포넌트는 set()이름으로 변경할 수 있어야 한다.

### [v] Q5. 변수가 정의되지 않은 프로퍼티는 어떻게 만들 수 있을까?

* 먼저 객체에 멤버변수 정의 하는 방법을 다시 짚고 가자.

  ```cpp
  def myObj
  def A
    age = null // age에는 0이 대신 들어간다.
    myObj = null // A["myObj"]는 refer이며, refer의 값이 null인 상태이다.
  ```

* sharable obj 여부는 origin 객체가 갖고 있고, origin객체는 여부를 질의당하면 자신에게 set()이 존재하는가(set은 상속되지 않음)를 놓고 반환한다.

* origin객체에 새로운 멤버변수가 추가될때 파서는, 해당 변수가 sharable이면 refer를 대신 넣어두는 식이다.

* refer는 set(Node) 를 가지고 있다. 어떤 타입이 오건 타겟이 set이 있다면 그리로 redirection을 시도한다.

  * isConsume()시에도 이걸 탐지할 수 있다. 에러로 내보낼 수 있다.

* 따라서 sharable에 한해, 우리는 변수가 정의되지 않은 프로퍼티를 만들 수 있다.

  ```cpp
  def myObj
  def #A
    age = null
      __myObj = myObj()
      def my = myObj null
        set(myObj rhs): _myObj = rhs // 이 set은 my 라는 origin객체에 있는것.
                       // A["my"]에는 my라는 origin객체가 아니라
                       // Refer(OriginObj("my"))가 들어있다.
      def age1 = int
        =>set(int rhs): c.out("newval = $rhs")

  A.my = A.my()
  A.age1 = 5
  ```

### [v] Q6. def my = myObj null: set(my)가 맞지 않나?

* 맞는데 set은 개발자가 타입을 마음대로 지정할 수 있음.
* set이 하나라도 있으면 occupiable로 지정됨.
* 컴파일러는 refer로 들어온 객체가 set으로 들어갈 수 있는지를 판단가능하므로 에러를 내보낼 수 있음.



### [v] Q7. set은 상속이 되는가? --> 된다. 그러나 컴파일러가 occupialbe 객체는 set을 만들어준다. 반환형은 마음 껏 해도 된다.

### [x] Q8. occupiable인게 sharable이 될 수 있는가?

### [x]  Q9. sharable인게 occupiable이 될 수 있는가?

### [v] Q10. occupiable이었다가 sharable이었다가 다시 occupiable이 되도 되는가?

* 당연히 안되어야 정상이다. occupiable, sharable은 속성이다. 그리고 속성은 상속이 된다. 부모가 occupiable이면 자식도 다 occupiable이다.

* occupiable은 set의 존재의 유무에 의해 판정된다.

* 따라서 부모에 set이 있다면 자식은,

  1. 자식도 부모의 set을 사용한다.
  2. 자식은 고유의 set을 사용한다. 컴파일러가 채워넣어주기도 한다. 이경우 부모의 set이 대신 호출되지는 않는다.

### [v] Q11. sharable로 하고 싶고, 논리적으로 문제가 없어도 occupiable이 되버리는 한계점이 존재한다.
```cpp
def SharingObj
	name := ""
	age := 3
	..
	..
def child := SharingObj
	set=>: c.out("just print something!")
```
* 개발자는 sharable의 op=을 그대로 가져가고, 대신 전혀 관계없는 로직(printf)만 추가적으로 수행하고 싶었을 뿐이지만 컴파일러는 이를 occupiable로 받아들인다.
* 결과 막대한 members 할당연산이 수행되어진다.
* 컴파일러 최적화를 통해서 멤버변수, nonconst 메소드를 호출하지 않는다면 sharable을 유지하도록 할 수 도 있을것이다.
* 일단은 known issue로 안고 가자.


* 고찰

  ```cpp
  def parent
    age = 0
      name = ""
    set(parent rhs)
        age = rhs.age
        name = rhs.name
  def child = parent
    //1: set()이 없을 경우
      /*2: ret => set(child rhs)
        c.out("wow!")
        return ret*/

  p1 := parent(), p2 := parent()
  c1 := child(), c2 := child()

  p1 = p2
  p1 = c1
  c1 = p1
  c1 = c2

  ```

* 결론

  * 어느쪽이든 이론적으로 망하는 케이스는 없다. 1번은 개발자에게 전적으로 책임을 넘기는 것이며 2번의 경우는 편의를 위한 기능을 추가하는 것이다.

  * 2번으로 가는게 맞을 것이다. 당장 필요한 기능은 아니므로 나중에 지원을 해주면 될것이다.

  * overriding시 공변타입은 조건이 아니다.

  * => overriding 재지정 연산자에 대한 문법 구체화

    * 반드시 인자가 일치하는 부모가 아니더라도 넘길 수있어야 한다.

    ```cpp
    def child := parent
      ret => res set(child rhs)
        c.out("wow")
          return ret
    ```

    는 다음과 같다.

    ```cpp
    def child = parent
      res set(child rhs)
        super(rhs) // parent.set(parent) 가 호출된다. 인자리스트가 다르다는 점이 point!
          c.out("wow")
          return ret
    ```





### [v] Q11. null refer의 set() 호출 문제

```cpp
def myObj
  def isEnable := bool null
    get: super.getState("enabled")
    _set
```

* bool은 occupiable이므로 set이 이미 있다.
* 그러나 bool의 refer인 isEnable은 _ptr이 null이므로 bool.set()을 여기서 호출해도 크래시가 날것이다.

#### 요구사항

1. nested일경우, owner.this를 가지고 있어야 한다.
2. occupiable일지라도 refer가 물수 있어야 하며, 실체가 없어야 한다.
   1. 이때 이 refer에 대해 op=가 되면 어떻게 되는가?

- Q1 a := bool null을 한 경우, a는 어떻게 동작해야 하는가?
  - occupiable이므로 a는 null -> false가 할당된다.

#### [x] 1안 static으로 하게 유도한다.

```cpp
def myObj
  def isEnable = bool null
      $set: super.getState("enabled")
  def getComplexObj := ComplexObj null
        $get: $inner := ComplexObj()
```



#### [x] 2안 :=와 =를 차이를 둔다.

```cpp
def #myObj
  _age := 30
  void say(): c.out("age=$age")

def #child := myObj
child.say() // 30

def #child2 := myObj
```



#### [x] 3안 null을 의미하는 특문을 이용한다.

* 타입? 을 사용한다?
* 규칙에 의하면 a := int null 를 했을지라도 a는 occupiable로써 false가 들어가야 한다.

#### [v] 4안 최적화에서 제거한다.

* 어짜피 컴파일러 최적화는 받드시 필요하다.
* 컴파일러가 보고 이 경우에는 무시하도록 한다.

```cpp
def #myObj
  _age := 30
    void say(): c.out("age=$age")

def child := myObj
  def age := int? // int? == int null
    set: myObj.this.age
        arr = int[][str]?
    name = str?
```



### [v] Q12 get의 반환형은 super여야 한다? --> def 문법을 재해석해서 해결

```cpp
def A
  str _getClassName()
  def name := str?
        get: _getClassName() // 반환형은 name? str?
        _set=>

def A := Obj?
  def $instance := A?
      get: $A() // get의 반환형은 A
        _set=>
    void $say(A a)
            c.out("a.name=$a.name")
  name = "A"
A.instance

def B := A
  get: $B() // get의 반환형은 B.
B
```

* 본래 get의 반환형은 위와 같은 경우 name이 된다.



### [x] This로 나가면 안 될까?

* C.F. _set=> 부분도 컴파일러가 최적화해서 Super.set을 private로 접근자만 바꾸도록 해주면 더 좋겠다.
* Super로 나간다고 해도 문제는 된다. null로 나가는 경우가 그러하다.

```cpp
def A
    def name := str?
1:    get: class.getName() // 에러. getName()은 str이지만, get의 반환형은 name이다.
2:    get: name(class.getName()) // 개발자 의도가 1,2중 어느건지 모른다.
3:    str get(): class.getName()
```

#### 1안 전부다 써라

```cpp
def A
  def n1 := str
1:    get: return "wow" // X: get은 기본적으로 This다.
2:    get=>: c.out("wow")
      void say()
A.n1.say()
3:    str get: return "wow"
      void say() // WARN: we can't access this method.
```



#### [x] 2안 새로운 문법을 만든다.

```cpp
def A
  def n1 := str // n1은 str에서 상속받은 것.
    get=>: c.out("val=$val")

  def n2 = int // n2는 refer인데 get/set만 다른것.
1:    get=> // X =>를 붙일 수 없다.
2:    get: 5 // O. get의 반환형은 int.
    set: rOk

  def n3 := str?
        get=>: "wow"// X. get의 반환형은 str이다.

  def n4 := str? // n4는 str에서 상속받은 null이 할당되어 있다?
        void say() // --> 새로운 문서로
A4.n4.say()
```



#### [x] 3안 그냥 새로운 키워드

```cpp
def A
  def n1 := int
    get=>: c.out("val=$val")
  prop n2 := int
    get=>: 5
```





#### 검증

```cpp
def A
  age := 22
  set(A rhs)
    age = rhs.age
```

```cpp
def A
  _in := 22
  def age = int
    set(int rhs)
      in = rhs.in
```

```cpp
def A
  _in := 22
  def age = wrap(int)
    set(wrap rhs)
      in = rhs.ptr
```

```cpp
def myObj
  def age := int
    // =>는 기본적으로 자동으로 부모에서 넘어온걸 다시 return 까지 해줌.
    =>set: c.out("new age = $new")
    // =>는 이미 super()와 파이프라인이 연결된 상태에서 개발자가 코드를 끼워넣는다..
        // 라고 이해하면 편하다.
        get=>: c.out("get: age=$age") // 이렇게 하면 get의 반환은 age인가 int인가

  def isEnable := bool null
    get: super.getState("enabled")
    _set // bool은 occupiable이므로 set이 이미 있다.
    // occupiable인 bool에 null이 들어갔으므로 isEnable = false 가 된다.

  def complexObj := complex? // complex null과 같다.
        set: // complexObj는 null이 들어가 있다. set 안에서 complexObj.this를 사용하는 순간 런타임 에러가 날것이다. 물론 런타임 도중에 myObj.complexObj = complex()로 문제를 해결할 수 있다.
```



## [v] frx에서 worldlang cb을 호출하려면
```cpp
// My.cart
class My : public Object{
public: virtual void foo();
};

// MyMy.box
def MyMy = My
    void foo()

My a = MyMy
a.foo()
```

### [v] Q1. a.foo()가 되면 worldfrx는 어떻게 MyMy.foo()를 호출하나?

* native 객체 생성 호환성 문서를 통하면 MyMy는 My::foo()와 MyMy::foo() 모두를 갖는 1개의 객체로 나오게 된다.
* worldfrx은 a.foo()를 보면 이를 scope["a"].get("foo").run(msg) 로 치환하므로 동작한다.

### [v] Q2 위의 케이스는 namu stmt를 통해서 동작하기에 문제가 없다. native에서 동작하는 경우는?

```cpp
Object& obj = scope.get("a");
class Node {
    public:
    Node& get(string name) {
        Node& sub = iterate_do_something(name);
        return sub._onGet();
    }
    virtual Node& _onGet() { return *this; }
};

def MyNode = Node
    onGet(): $MyNode
```

* 어떻게 하면 C++의 _onGet()의 호출이 worldlang의 onGet()이 불려지도록 될 수 있는가?


### [x] Q3.  이런 메소드의 목록이 무한정 있다면 이 방법은 반드시 실패한다. 어떤 메소드들이 있을 것인가?

* 포인트는 caller코드가 frw에 있느냐 이다.

  * e.g. Node::getName() 이 있을 경우, 이를 override 해도, 항상 worldlang에 의해서만 호출된다면 문제는 되지 않는다.

* 모든 기본 클래스에서 기본적으로 메소드들이 해당되는 건 아니다.

### [v]Q4. 가장 문제되는 건 native 메소드에서 worldlang이 구체클래스를 던지는 case이다.
```java
struct MyClass : public Object {
	int getAge() { return 55; }
};
class Foo : public Object {
	void letsgo(MyClass& my) {
		my.getAge();
	}
};

def MyClass = MyCpp
	int getAge()=>: print("hello age!")
Foo.letsgo(MyClass) // hello age!가 나와야 하지만, 실제로는 나오지 않는다.
```
* 위 시나리오의 문제 원인 서술
	* letsgo()는 Wrapper에서 의해서 Method화 되어서 Foo라는 Object의 shared member에 들어가게 된다.
	* parser는 "Foo.letsgo(MyClass)" 라는 문법을 보고,
		* scope["Foo"][letsgo].run( Msg("()", scope["MyClass"]) );
	* 처럼 stmt를 구성하며, 이 실행에 의해서 letsgo wrapper에 MyClass라는 Object가 인자로 넘어간다.
	* letsgo wrapper::run()은 Msg에서 받은 Object를 들고 cast<MyClass>를 시도하며 이는 TClass<T>에 의해서 타입이 판단된다.
		* Tclass<T>는 MyClass&를 Refer로 감싸서 반환하고
	* letsgo wrapper는 받은 Refer에서 MyClass를 꺼내려고 시도한다. 성공하면 그걸 c++의 letsgo()로 넘긴다.
	* c++ letsgo() 에서는 MyClass& 를 받는다. 그리고 이것에 대해 getAge()를 호출한다.
	* 그럼 짜잔! C++::getAge()가 호출될뿐, **worldlang의 getAge()가 호출되진 않는다.**

#### [x] 1안 .run()을 사용한다.

```java
class Node {
    public:
    Node& get(string name) {
        Node& sub = iterate_do_something(name);
        return sub.call(Msg("onGet"));
    }
};
```

* 반대로 말하면, 이런 메소드들을 미리 찾아내서, 그것들에 한해서 FRW 코드에 박아넣어야 한다는 것이다.


#### [v] 2안 어떻게든 C++에서 일반 메소드를 호출했는데 world 메소드가 호출되도록 한다. --> 별도의 항목으로

### [v] Q5. 알고리즘3 -->  별도의 항목으로


### [x] 3안 항상 call()을 생활하 한다.

### [x] 4안 다른 언어들 처럼, C 함수 위주로 다시 설계한다.

* c, c++ 개발자들은 namu_get_method() 이런 API를 통해서 메소드를 얻어와서 호출하거나 해야 한다.
* 클래스는 내보내거나 받기가 쉽지 않다. 그냥 객체로써 주고 받고 된다.

### [x] 5안 매크로를 사용해서 항상 wrapper로 감싼다
* 근데 이럴 경우, 개발자들은 wrapper로 감쌀지 안감쌀지 선택할 수 있어야 한다.
* 그리고 그 여부가 worldlang에 공개가 되어야 하므로 worldlang 개발자도 선택할 수 있어야 한다.

### [x] 5-1안 annotation으로 해결한다. --> 별도의 항목

### [x] 6안 Native만 wrap여부를 선택할 수 있다.
* 퍼포먼스적인 측면에서만 "seal" 기능을 추가한다.  Native개발자는 wrap할 메소드를 seal할 건지 정할 수 있다.
* seal 되면 그 여부를 Method는 가질 수 있다.
* 그래서 IDE를 통해서 고지도 가능하다.
* worldlang에서는 이 seal을 둘 수 없다.
* 컴파일러는 seal 된 메소드를 overriding 여부를 검사하며, 이때 에러를 고지한다.
* seal은 worldlang에 의해서 만들어질 수없으므로 C-REPL과는 관계없게 된다. 이것에 대한 증분빌드를 할 필요는 없다.

### [v] 7안 worldfrx만 항상 seal.
* 퍼포먼스적인 측면에서만 "seal" 기능을 추가한다.  worldfrx는 seal로 wrap하는것과, nonseal로 wrap하는 매크로 2종류를 준비한다.
* seal이라는 개념은 worldlang(컴파일러포함) 존재하지 않는다.
* worldlang 개발자에게 worldfrx의 메소드를 override하지 말것을 고지한다. (일부 메소드 제외)
* native 개발자에게는 항상 nonseal 버전만 공개한다.

#### 결과
* 구현이 간단하다.
* 모든 개발자에게 1가지 사실 (worldfrx를 wrap하지 말라는 예외)만 고지하면 모든게 해결된다.

### [v] Q6. 왜 worldlang에서는 불가능한가?
1. 문법이 더러워지기 때문이다.
	* 먼저 추가적인 특문을 할당해버리면 특문이 너무 많게 된다.
		```java
		def A
			void _$#@foo() // private, const, static, seal
		```
	* 그렇다고 seal만 글자로 하는 것도 이상하다.
		```java
		def A
			seal void _$#foo();
			// seal private static void foo() const;
		```

	```

	```
2. 오직 이 이유때문에 seal 이라는 키워드를 추가하는게, 문법을 추가하는게  마음에 들지 않는다.
	* 명백히 seal은 효용도가 떨어진다.
	* 가능하면 문법을 줄이고 간편하게 하고 싶다. worldlang의 철학은 20% coverage를 위해서 80% 더러움이 필요하다면,
	* 그 20%를 버리는것이다.





















# Null

## [v] null을 없앨 수 있을까?

### [v] 요구사항

* 함수의 동작이 에러인지 아닌지는 알 수 있어야 한다.
* 에러일 경우에, null check를 일일이 하는 걸 없애고 싶다.

### [v] 고찰

* null을 두는 이유는, 객체를 반환하는 메소드에서 객체를 반환할 수 없기 때문이다. 이것은 throw를 하는 이유와 어느정도 일맥상통한다.
* 만약 메소드가 복수의 값을 반환하거나, 반환한 값이 유효한지 여부를 별도로 체크할 수 있다면 문제가 해결될 수 있다.
* 그러나 위처럼 해결한다고 하더라도 여전히 반환된 값의 유효여부는 체크를 해야 한다. null체크와 다를게 없는 것이다. 반환된 값을 사용하기전에 사전 체크.
* 따라서 정말 이문제를 해결하기 위해서는, "과연 반환된 값을 사용하기전에 사전체크하는 과정을 없앨 순 없는가?" 를 먼저 생각해봐야 한다.

### [x] 1안 null 키워드 자체를 없애버린다.

* null은 2가지 의미가 있다.
  * 귀찮아서 초기화를 안함.
  * wrapper는 있는데, 당장 객체는 없음.
* 객체가 없는 이유는 객체를 생성 혹은 가져오는게 실패했기 때문이다.
* 가장 큰 문제는, 추상클래스를 작성하는 개발자는 자신의 것을 어떻게 구체클래스로써 내보낼 수 있느냐는 점이다.

```cpp
// 추상클래스라는 걸 없애버린다.
def ADT
  void say() // void say() {} 와 같음.
  int say() // 없으면 return <각 타입의 기본값>
  unit say() // return unit()

def core
  core $get()
      if rand() % 2
      return core! // error인 core객체.
        core()

  __build = build()
    build getBuild()
    return _build

env := Core.get().getBuild().getEnv()
if env.isError return;
sum := env.getLength()
res := env.calculate()
```



### [x] 2안 getter인 경우 null exception은 무시한다.

* getter인지 여부는 get이 맨 앞에 있는지로 구분한다.
  * camel을 모두 써야 한다.
  * gettisburg 이런건 인식안된다.
  * isEnable 도 getEnable로 적어야 한다.
  * getter안에 추가적인 비지니스 로직 관련된 동작이 있으면 실패한다.

```cpp
env := Core.get().getBuild().getEnv()
sum := env.getLength()
res := env.calculate()
```



### [x] 3안 ?. 지원해준다.

```cpp
env := Core.get()?.getBuild()?.getEnv()
if env == null: return
sum := env.getLength()
res := env.calculate()
```



### [x] 4안 일괄적인 null exception 무시 문법을 제공한다.

```cpp
1: env := ?{ Core.get().getBuild().getEnv() }
```



### [x] 5안 property getter에서는 null이 무시된다.

* 이 아이디어는 wreckpattern에 기초하고 있다.

  * wreck pattern처럼 구성했을때 객체를 연이어서 접근해야 하므로 null체크도 연이어 등장한다.

  * "값의 사전체크와 null체크를 없애는 건 불가능하다." 를 전제로 한다.

    따라서 pyramid of doom 모양이 나오게 된다.

  * getter의 경우느는 null이 무시가 가능하다. 그러나 메소드만 봐서는 컴파일러는 그것이 getter용도인지 getter처럼 보이는 일반 메소드인지는 구분이 불가능하다.

    ```cpp
    a := getVal().calculate() // calculate는 연산결과를 가지고 있는 변수 calculate를 반환하는 getter였다면?
    b := getVal().getSurface() // getSurface()는 안에서 새로운 Surface객체를 생성해서 반환할 지도 모른다.
    ```

* 100% getter에만 null무시를 허용해야 한다는 것은 아니다. 그래야만 하는 요구사항이 있는것도 아니다. 그러나 모든 메소드에 대해서 null을 무시할 수 있도록 해주는 것은 정적타입 답지 않다. 문제는 메소드만 가지고 판단할 경우, 그것이 getter용도로 사용될지 여부는 전적으로 알 수 없다는 점이다.

* 따라서 판단근거로써 프로퍼티의 get()을 이용한다.

  * 메소드와 달리 변수에 접근하는 것은 100% getter다.

* 다만 getter안에 별도의 복잡한 로직이 있을 수는 있을 것이다.

* worldlang개발자는 getter를 직접 만들지 말고 프로퍼티를 주로 사용해야 한다.

#### 결과

* 문법의 추가가 없다. (?.)
* getter에서만 null이 무시되므로 의도와 거의 높은 확률로 부합한다.
* 더 편리하다.
* 프로퍼티 사용으로 유도할 수 있다.




### [v] 6안 safe-navigation과 nullex를 지원한다.
* 다음과 같은 문법이 있을때
```namu
activity := getActivity()
if activity == null: retfun

context := activity.getContext()
if context == null: retfun

resources := context.getResources()
if resources == null: retfun
resources.getString(R.string.name)

```
* @warn(rNull)를 사용하면 다음과 같이 사용 가능하다.
```namu
with
    @warn(rNull)
    getActivity().getContext().getResource().getString(R.string.name)

// 혹은 safe navigation을 사용한다.
getActivity()?.getContext()?.getResources()?.getString(R.string.name)
```




## [..] 사용자의 cpp 코드에서는 null을 사용자가 직접하지 않도록 가능한 해야 한다.

cpp 코드에 의해서 멋대로 crash가 나서는 안된다.
FRX이 막아줘야 한다.


















# 객체의 생명주기

## Deep and Shallow

```cpp
mouse1 = Mouse()
mouse2 = Mouse(mouse1)
mouse3 = mouse2(mouse1)
mouse2 == mouse3 // false
mouse2.equal?(mouse3) // true
mouse2 = mouse3 // shallow
mouse2.assign(mouse3)
```













## 객체의 라이프사이클

- worldlang은 지역변수와 HEAP변수의 차이가 없다. 지역변수를 함수 밖으로 꺼내버리면 그것은 함수가 끝나도 죽지 않는다. 이는 메소드delgator에 object가 캡쳐된 상황도 마찬가지다.
  - 예)
    - class A
      - void print(int age)
        - Console.out(age)
      - static void(int) boo()
        - A temp
        - return a.print
    - void(int) fp = A.boo() // temp는 이미 죽어야 했으나 죽지 못한다.
    - fp(35) // 출력 "35"
- 따라서 객체가 언제 해제될지는 보장하지 못한다.
- *[x] 이건 어떠한 문제를 낳게 될까?*
  - 대부분의 언어는 이렇게 동작할 것으로 보인다. 문제는 없을 것 같다.
  - 있더라도 지금 예상은 불가능하다.


import console

def Plant
	_age = 5
	Plant()
        console.out("constructor. age=" + age)
		age = 20
	Plant(#str msg)
		console.out("Plant(#str)")

    // 인라인 지정자inline-specifier:	<keyword has blockstmt>: stmt
    // 	":" 는 inline 지정자(specifier)로써,
    //	뒤에 stmt 1개를 블록문 없이 사용 가능.
    ~Plant(): console.out(name + " destructor")
    name = "herb"
    int getName(): return name
    void $test(Plant p, str new_name): p.name = new_name

def app
	void main()
		p = Plant() // 기본생성자로 Plant 객체 정의
		p_null = Plant null // Plant로 캐스팅된 null

		if 1
			p1 = Plant("Where is my santa?") // Plant(#str) 생성자로 객체 정의
			p1.getName() == p.name // "herb" == "herb"

			p2 = p1
			p2.name = "chikery"
			p1.getName() == p.name // "chikery" == "chikery"

			// p1이 소멸된다.
			// GC(a.k.a GarbageCollection):
			//	모든 객체(int, str의 primitive 변수 포함해서)는 refcount 기반의 제한적인
			//	GC에 의해 해제된다.
			//	제한적인 이유:
			//		1. 다음의 java 코드는 worldlang으로 구현할 수 없다.
			//			in java)	new Daemon(); // 자바는 ref 없이 생존할 수 있다.
			//		2. GC의 한번쯤은 들어봤을, 유명한 원형-참조circular reference 문제.
			//			(현재 limitation. 해결방안 생각중)

		else: console.out("no") console.out("p.age is " + p.age)
		// 인라인 지정자 뒤에 바로 다음 구문을 붙여쓰고 있다. 유효한 문법이다. 권장 안하나, 허용한다.

		Plant.test(Plant(), str("5.5")) // 이름-없는-객체nameless object 를 생성가능하다.
		console.out("end of program")

/*	결과:
	constructor. age=5
	constructor. age=5
	chickery destructor
	p.age is 20
	constructor. age=5
	5.5 destructor
	end of program
	herb destructor
*/
```




## 객체의 순환 참조 문제

- class A
  - B b
- class B
  - A a
- void foo()
  - A a
  - B b
  - a.b=b
  - b.a=a
- void main()
  - foo()
  - // 이제 foo안의 지역변수 a와 b는 어떻게 될까?
- 답은 둘다 살아있는다. 이것을 해결하려면,
- [x] 1안 무식한 방법 : 순환참조가 되었는지를 직접 계산한다
  - A의 ref cnt가 줄어드는 순간 A를 참조하는 모든 객체를 조사해서 그것들도 A를 서로 바라보는 것인지 확인한다.
  - [v] 불가능하다 : A가 직접 binder를 들고있는 경우라면 그나마 손쉽겠지만 A가 소유하는 객체안에 그 객체 안에 또 그 객체안에 객체가 binder를 들고있는 상황이라면.....
- [] 2안 주류에서 벗어난 것인가만 따진다.
  - 주류라고 하는 것은 내가 만든 용어로 즉, 객체를 유지시켜야한다고 주장하는 거대한 실행 줄기다. 그것은 stack도 가능하고 전역변수도 가능하다.
  - 이 아이디어의 핵심은, "HEAP에 저장해둔 메모리는 계속 살아남는다고 해도 결국은 그 HEAP을 사용하는 외부사용처가 아무데도 없다면, 의미가 없다는 데 기안한다.
  - world는 사용자가 힙에다 명시적으로 객체를 만들 수 없으므로 결국 객체가 이를 대신한다.
  - C++처럼 힙에다 뭔가를 만든다고 하여도, 아무런 끈 없이 프로그램의 줄기와 동떨어진 무언가를 만드는 것이 아니다. 지역변수던 전역변수던, 혹은 또다른 heap에 속한 것이던 포인터가 그것을 가리키며, 포인터가 일종의 라이프 사이클을 관리하는 역할을 하게 된다.  즉, 라이프 사이클 관점에서 본다면 HEAP 메모리에 올라간 변수는 결국 포인터의 라이프사이클과 동일하다고 보면 된다.
  - 이처럼, 모든 메모리는 언젠가는 해제가 되어야 하며, 그 해제가 되는 시점은 함수의 종료(또는 함수의 종료로 인한 객체의 소멸)로 인해 연쇄적으로 발생하게 된다.
  - 이 함수는 일종의 stack처럼 겹겹히 되어있으므로 이 함수들의 종료로 인하여 메모리가 소멸되는 것을 그림으로 빗대어 보면 거대한 나무 줄기(즉, 주류)에 메모리 소멸을 상징하는 작은 잔가지들이 맞물려있는 모습을 생각할 수있을 것이다.
  - [][] 어떻게 주류인지를 판단하는가?
    - 내가 전역변수(메소드 안의 static 변수포함) 객체이면 나는 주류이다.
    - 내가 단 하나라도 주류의 객체로부터 binded 되거나 포함되어있으면 나는 주류이다.
    - 주류인가 아닌가는 Instance 관리에서만 사용하므로 InstanceManager가 들고있는 InstanceBlock에만 기록하고 있으면 된다. 이는 int로 주류카운터로 보관한다.
    - 내가 지역변수라면 메소드가 나를 놓아주기 전까지만 나는 주류이다.
    - 주류인 내가(메소드 포함) bind를 할때는 해당 instance의 주류카운터를 +1 한다.
    - 주류인 내가 unbind를 할때 해당 instance의 주류카운터를 -1 한다. 이때 주류카운터가 0이되면 그 객체가 소멸될 수 있도록 한다.
    - [] 위의 조건을 다시 잘 생각해보면 이미 있는 strong ref count를 +1/-1 하는 조건을 더 세밀하게 해서, 내가 주류인지 아닌지를 구분하게만 하면된다.
    - [] 만약 모듈개발자가 Refer로 변수를 만들어서 바인딩한 경우는 주류구분이 어떻게 되나?







# 기본 타입

## 스트링 매크로

​```cpp
age = 33
name = "Chales"
c.out("he's $name and $age years old.")
c.out("he's ${name} and ${age}years old.")
c.out("it's \$1,000 dollors.")
```





## res 타입 설계

- \1. 에러를 복수개 report할 수있어야 하고, 외부에서 result를 받으면 함수 안쪽에서 반환한 모든 report를 모두 확인할 수 잇어야 한다.
- \2. result에 추가적인 정보를 담을 수 있어야 하며
- \3. 이것을 호출하는데 비용이 절감되어야 한다.
- \4. managed와 native모두 공통의 API를 사용하도록 해야 한다.

```cpp
import console

app
	res boo(res result)
		// 결과타입res:
		// 메소드의 결과를 표현한다. 동작의 성공 여부, 결과의 메시지, 결과의 카테고리
		// (warn, info, err), src 값들을 확인 할 수 있다. res는 ADT이며 동시에
		// occupiable 타입이다.
		//
		// result pretypes:
		// res로부터 상속받은 다양한 결과타입들이 pretypes로써 정의되어 있다. prefix "r"
		// 을 사용하며, 다음은 그 목록이다.
		//    1. rok:    성공적으로 이상없이 수행됨. res의 기본값이다.
		//    2. rfile:    파일 관련 에러
		//    3. rperm: 권한 관련 에러
		//    4. rsuper:기반 클래스에서 발생한 에러로 더 이상 현 메소드에서 진행이 불가
		//                하다.
		//    ...추가예정...

		// 어떻게 res는 ADT이며 occupiable이며, 기본값이 ADT가 되는가?:
		// 앞서 설명한 듯 occupiable의 동작은 매우 심플하다.
		//    1.    월드의 모든 변수는 기본적으로 refer에 의해서 감싸져wrapping 있다.
		//    2.    refer는 할당연산 요청이 왔을때 대상(wrapping하는)이 occupiable
		//			타입일 경우, 그 대상에 복제생성자를cloning 수행한다.
		//    3.    반대의 경우에는 단순히 대상을 교체한다.
		//    4.    구체타입이며 occupiable일 경우에는 최적화에 따라 refer가 없도록
		//			코드블럭을 구현한다.

		ret = rok
		console.out("ret=" + ret + ", code=" + ret.code) // res=rok, code=0
		return ret

	res foo()
		ret = boo(rsuper(rwarn)) // Warning으로 새로운 rsuper객체를 생성한다.
		// 출처src:
		// 주어진 심볼(변수, 메소드, 클래스)이 어느 원전(code)에서 기원하였는지를
		// 기록한다. 파서가 구문문석을 하면서 그 src객체의 정보를 채워넣으며
		// 모든 객체는 sharable 타입인 src의 객체를 공유하게 된다.
		s = ret.src
		console.out(s.method.name + "#" + s.line + " at " + s.file.name) // app.foo()#12 at res.namu
		return ret

	void main()
		ret = foo()
		if ret == rsuper() // 기존 규칙대로라면 이게 맞는 비교문이나,
			console.out("ret == rsuper()")
		if ret == rsuper // 편의를 위해, ret는 클래스인 rsuper도 체크할 수 있다.
			console.out("ret == rsuper")
		if ret.isSub(rsuper) // 위의 "== rsuper"는 이것과 같다.
			console.out("ret.isSub(rsuper)")
		if ret.isWarn()
			console.out("ret.isWarn()")
		if ret.isNormal() // ==> (! ret.isWarn() & ! ret.isErr())
			console.out("ret.isNormal()")
		if ret // ! ret.isNormal()과 같다.
			console.out("ret")

/* 결과:
	ret=rok, code=0
	app.foo()#12 at res.namu
	ret == rsuper()
	ret == rsuper
	ret.isSub(rsuper)
	ret.isWarn()
	ret.isNormal()
	ret
*/
```


## var
* ?(var) 는 ducktyping

```cpp
import console

def app
	int foo(? unknown)
		// node:
		//	? 는 node 라는 타입으로 동적바인딩DynamicTyping or DuckTyping 된다.
		unknown += "world!"	// node 타입이 포함된 구문은 binding validation이 되지
							// 않는다. 런타임에 에러가 판별된다.

		console.out(unknown) // 결과가 return 된다.

	void main()
		success = false
		ret = if success: 35; else: "wow" // 결과에 따라 success나 35 혹은 "wow" 중 하나가 반환된다.
		// ret = int if success: 35; else: "wow" 는 컴파일 에러.
		// 잘못된 묵시적 형번환 str -> int를 요구하기 때문이다.

		// ret의 타입은 ?(node)다.
		// 35와 "wow"를 모두 포함할 수 있는 타입은 node 뿐이다.
		ret1 = ret 	// ret는 node 이므로 validation은 무시된다.
					// success가 false일 경우, int = str 이 되므로 런타임에러가 된다.

/* 결과:
	helloworld
	<런타임 에러로 프로그램 종료>
*/






# [v] 이름없는 메소드와 객체
​```cpp
def abc
	name = ""
	void foo()
		return str boo()
			return name
	void foo1()
		// Q1. 이름없는 boo를 내보내려면?

	abc koo()
		// Q2. abc를 상속해서 foo()를 오버라이딩한 객체를 내보내려면?
```

## 1안 ?로 대체.
```cpp
void foo1()
	return str ?()
		return name

abc koo()
	return ? := abc
		void foo()=>
			c.out("wow!")
```
## 제약사항
* ?는 이미 int?에 쓰이고 있다. 때문에 int?와 int ? 는 구분이 되어져야 하며 개발자는 반드시 타입뒤에 ?를 붙여야 한다.
* ?는 정의에서만 사용된다. 그외의 코드에서 나오면 안된다.
```cpp
void ?(int a)
	dosomething...
?(3) // 에러.
```









# scope확장

## this, me

-   모든 코드는 함수 안에서만 실행된다. 함수는 항상 객체 안에만 있다. 따라서 모든 함수에는 this와 me 라는 기본 포인터가 2개 제공된다.
    -   this 는 C++의 this이다.
    -   me는 현재 Method를 지칭한다. 이는 Nested Method에서 사용될 수 있다.
-   식별자 탐색시 Scope 알고리즘대로 interperter LocalSpace가 이 식별자를 갖고 있는지, this가 갖고 있는지, me가 갖고 있는지, GlobalSpace가 갖고 있는지 총 4번 알아보게 된다.
    -   Scope라는 객체를 만들어서 이게 4가지를 다 들고 있게 하자.
    -   찾은 식별자가 2개 이상 존재할 경우 인터프리터는 모호성의 오류를 내뱉게 된다.
-   코드블럭이 완성되면 me 인지 this인지 local인지 인터프리터가 명시해두므로 탐색할 필요가 없게 된다.
-   this는 생략이 가능하다. 고로 다음의 코드는 모호성의 오류가 없다.
    -   class A
        -   void foo()
            -   getClass() // foo가 아니라 A가 반환된다.
            -   // foo(void).getName() 라고 해도 된다.
            -   // me.getName() 라고 해도 된다.


## with 문

```cpp
import console

def app
	// 확장 가능한 블록문Blockstmt: with <Opt:확장될 식별자> <stmts>
	// 실행가능한 구문의 명시적 집합으로, with 키워드와 들여쓰기indent로 표현한다.
	// 주어진 식별자를 현 범주scope로 확장할 수 있다. 해당 식별자의 모든 멤버를 객체와
	// 접근연산자("."dot) 없이 호출이 가능하게 된다.
	// 다음의 규칙을 따른다.
	//	1.	블록문에서 정의한 식별자(메소드, 변수, ...)는 해당 블록문에서 유효하다.
	//		(블록문을 사용하면 변수의 라이프 사이클을 제어할 수 있다.)
	//	2.	블록문은 독자적인 프로그램 흐름에 대한 제어권을 갖지 못한다.
	//		메소드와 달리, 블록문 내에서 return을 하게 되면 블록문 뿐만 아니라 메소드
	//		자체를 벗어나게 된다. 이는, 블록문이 독자적인 흐름을 갖지 못하기 때문
	//	3.	문법적으로 블록문을 변수에 할당하거나 소유할 수 없다.
	//		(클로져를 대신 사용하라)
	//	4.	키워드(if, for, ...)에 의해 블록문을 사용할 경우를 묵시적 블록문이라 한다.
	//	5.	with 키워드 뒤에 식별자를 붙이게 되면 해당 블록문 안쪽에서 그 식별자의
	//		소유한 멤버들이 확장된다.
	//	6.	이렇게 확장된 인터페이스들은 this보다는 상위의, 지역변수보다는 하위의
	//		우선순위를 갖는다. 이름 중복 허용 규칙에 의해 동일한 이름이 scope내에 복수
	//		존재하는 경우 우선순위가 가장 높은 개체가 선택된다.
	//	7.	블록문을 통한 인터페이스 확장은 중첩될 수 없다. 즉, 최대 this를 포함해서
	//		2개까지 이다.
	//	8.	식별자는 생략 가능하다. 이 경우, 별다른 확장을 수행하지 않는다.
	//	9.	확장된 식별자는 블록문에서 it 이라는 별칭을 갖는다.
	void foo() // 메소드도 블록문을 기본적으로 가지고 있다.

		with // Rule#8
        	local = 5
        	updateAge(local) // Rule#2

        	int updateAge(int new_age) // 클로저의 정의
    			#age = 20
	    		return age // Rule#2: return시 updateAge메소드만 종료된다.

        // updateAge(20) // Rule#3: 접근 할 수 없다. 블록문에서 벗어났기 때문이다.
        with
	    	return // Rule#1: {, } 을 가지고 있는 foo() 메소드에서 벗어난다.
        console.out("can't reach here.")

	p = Person null // p에 Person으로 캐스팅된 null이 할당된다.
	void eat(): with console // console은 클래스지만, 이 또한 식별자이므로 유효한 코드다.
		out("app.eat()") // console.out("app.eat()") 과 동일하다.

    int getSome(): return 5
    void doSwitch(int val): with val
        // 다중분기문is: <확장된블록문>
        //					is <식별자와 동일한 타입의 값>
        //						<블록문>
        // switch에 대응하는 문법으로, 다음의 규칙을 따른다.
        //  1.  with 안에서만 사용 가능하다.
        //	2.	주어진 식별자에 대해, 값이 일치하는 경우 속한 블록문을 수행한다.
        //		만약 다른 비교연산자를 사용해야 하는 경우, if-else를 사용해야 한다.
        //		(is는 사실 if it == 3 elif it == doSwitch() .. 와 동일하다.)
        //	3.	is의 값은 반드시 확장된 변수와 동일한 타입의 값으로 평가evalutate
        //		될수 있어야 한다.
        //	4.	else는 그 이외의 경우 수행된다.
        is 3 // if it == 3
            console.out("we got 3.")
		is getSome() // else if it == getSome() // 함수 호출도 가능하다.
			console.out("doSwitch")
		else
			with str getString(#str msg)	// 클로저도 표현식이기에 문제없다.
            	return "hello " + msg
				is "he"
				is "lo" // "he" 이거나 "lo" 이면,
                    console.out("can't")
                    console.out("execute")
				is "hello world": console.out("correct.")
				else: console.out("this line.")

    		/* 	2.4 절에 의해 메소드의 정의는 expr이다.
    			위 사항을 이용하여 개발자가

    		예) func1 = str getString(#str msg)
    				return "hello " + msg
    			ret = func1(" world")

    			그러나 정의한 객체에 바로 접근하는 것은, 문법적으로 불가능하다.

    		예)	str getString(#str msg)
    				return "hello" + msg
    			("world")
    			// 1번줄과 2번줄이 method 객체와 문법적으로 동일하므로 문법 상 3번
    			// 줄은 getString메소드와 관련이 없는 구문이 되버렸다.
    			// 위의 예제는 실상 다음과 같이 컴파일러가 받아들인다.

    			개발자의 의도는
    				<getString로 정의된 객체>("world")
    			처럼 사용하려는 것이었으나, 구문은 개행에 의해 구분되기 때문에
    			개행 자체를 정의 문법에 말미에 포함시킬 수 없다. 결과 정의문법에
    			종속되는 문법은 개행의 여부 관계없이 명세가 불가능하다.

    			위 규칙에 의해 컴파일러는 다음과 같이 인식하였다.

    				<getString로 정의된 객체>
    				("world")

    			만약, 개행 자체를 정의 문법에 말미에 포함시킨 경우, 위의 사례시
    			Tuple 혹은 메소드 호출로 인한 모호성 오류ambigious error를 낼 수
    			밖에 없다.
    		*/


	void main() with p // 객체 p에 대해 인터페이스가 확장된다.
		foo()
		print() // p.print()와 동일하다.
		eat() // Person.eat은 this.eat()보다 우선된다.
		void fly()
			console.out("am I a bird?")

		fly() // local에 등록된 fly()는 클래스scope를 가진 Person.fly()보다 우선된다.
		name = "Chales"
		console.out(p.name)

		doSwitch(4)


def Person
	void print()
		console.out("my name is unknown.")
	void eat()
		console.out("I'm eating.")
	void fly()
		console.out("I'm not a bird.")
	name = "Michel"

/* 결과:
	my name is unknown.
	I'm eating.
	am I a bird?
	Chales
	correct.  */
```






# Shareable

| 타입명                                                       | Occupiable / Sharable |
| ------------------------------------------------------------ | --------------------- |
| primitive types:<br />int, str, bool, char, float, byte, res, void | O               |
| pretypes:<br />rok, rfile, rperm, ...                        | O                     |
| 배열(int[]), 맵(int[str])                                    | S                     |
| 튜플()                                                       | O                     |
| type                                                         | S                     |
| 사용자 class의 객체                                          | S                     |

```cpp
import console

//	Sharable & Occupiable:
//		sharable과 occupiable은 할당연산시 원본인가, reference를 할당하는가만 다르다.
//			sharable:	(by reference) 	말그대로 할당된 변수들 끼리 같은 원본을 참조한다.
//			occupiable:	(by value)		각각의 변수들은 독립적인 원본을 따로 소유한다.
//
//		*) immutable & mutable과는 다르다. occupiable이라고 해도, 데이터를 변경할 수
//		있다.

def Person // 사용자가 정의한 class는 모두 sharable.
    _age = 5
    int getAge(): age
    _grade = 3.5
    float getGrade(): grade
    void setGrade(float new): grade = new // implicit 할당인 void = float 은 무시된다.

def app
    void proxied(Person p, str name, float grade, float[3][str] list)
        p.setGrade(age*grade) 		// Sharable 	외부의 Person객체에도 영향을 미친다
        name = "Sissel from Norway"	// Occupiable
        grade *= 2					// Occupiable
        list["vector_x"] = (0.1, 0.1, 0.1)

    void main()
      	p = Person()
        name = "unknown"
        grade = 3.0
        list = [ [0.1, 0.0, 0.0] : "vector_x",
      		[0.0, 0.1, 0.0] : "vector_y" ]
    	// 명시적 타입 정의:
    	list2 = float[][str] [ [0.1, 0.0, 0.0] : "vector_x",
                             			[0.0, 0.1, 0.0]:"vector_y"] //, 뒤에는 indent 무시 가능

		proxied(p, age, grade, list)
    	// ... 3개 구문 뒤에 붙이면 구문을 자를 수 있다.
    	// ... 뒤에 공백whitespace이 오면 안된다.
    	name[0]="I": name[1]="m" // name은 occupiable과 관계없이 const 아니므로 변경 가능.
		console.out("p.getGrade()=" + p.getGrade() + ", name=" ...
			+ name + ", grade=" + grade)
 		console.out("vector_x:" + list["vector_x"][0] + ", " + ...
 		list["vector_x"][1] + ...
		list["vector_x"][2]) // 0.1, 0.1, 0.1

// 결과:
//	p.getGrade()=15, name=Imknown, grade=3.000000
//	0.1, 0.1, 0.1
```

## [x] Shareable의 기본

- **고찰과정**

  - 변수를 생성하기 전에 그 클래스가 nonconst immutable이라면 파서는 객체를 바로 생성하고 이걸 owner나 scope에 등록한다.

  - 그 이외에는 파서는 새로운 객체를 가리키는 Reference를 만들고이걸 owner나 scope에 등록한다.

  - v World 내 구현

    - Occupiable은 상속되는가?

      상속된다. 상속이란 부모의 특성이 모두 물려받는 걸 의미하기 때문이다.

      - 한번 "이 클래스는 immutable" 이야! 라고 선언하게 되면 이 클래스로부터 나오게된 모든 객체는 다 immutable이야 한다. 하지만 이를 클래스의 "상속"에 적용할 수 있는 문제인가?
        - 조합을 생각해보자.
          - P는 부모, C는 자식
          - OK : P=mutable C=mutable
          - P=immutable C=mutable
          - X: P=mutable C=immutable
            - 이건 말이 안된다.
            - 만약 이게 말이 되게 하려면 그냥 mutable이 아니라 immutable이 가능하나 mutable이 되지 않는 것이라고 해야 하나?
          - X: P=immutable C=immutable
            - C가 엄청나게 크기가 무거워진 게 될 수도 있다. 이것은 아니다.
        - 단순히 생각해보자.
          - Integer는 부모가 Type일 것이다.
          - Type은 immutable인가?
        - 용도적으로 생각해보자.
          - immutable의 용도는 값복사가 항상 일어나야 하는 객체가 필요하기 때문이다.
          - int a = b 라고 했을때 b와 별도의 a라는 값이 주어져야 하기 때문이다.
          - 왜 이런것인가? 이 질문이 아마 이 문제를 해결할 수 있는 가장 근본적인 물음이다. 이걸 답해야 한다. 왜이런것인가? 왜 이렇게 해야 하나?
            - 용도에 따른것이다. int, float은 다른 값을 참조하는 것보다 복사하는데 더 자주 사용된다.
            - 이것들은 작고, 가볍다. 단순하다. 그렇기에 원본의 값을 변경해야할 필요가 없다. 동기화를 필요로 하지 않는다. 어느 구조나 책임을 담당할 만한 부피가 아닌 것이다. 그저 작은 부품. 작은 부품에 지나지 않는 것들이다.
            - 자료형이라고 하는, "동작의 책임" 도 없으며, "다른 인스턴스를 관리" 하는 책임도 주어지지 않는 그저 자료형의 하나인것들이다.
            - 반례를 들어 반론한다
              - Object를 들어보자. 이것은 내부 멤버변수가 없다. 이것도 immutable인가?
                - ADT다. 객체 생성이 아예 안된다.
              - class Stream {
                - int fd;
                - initializeFileDescriptier();
              - };
                - 작은 사이즈를 지녔다. 하지만 책임이 존재한다. 함부로 복사가 일어나서는 안된다. 물론 그 사실은 개발자만 알 수 있다.
              - String은 데이터가 대개 크다. 하지만 자료형중 하나다. immutable인가?
                - 애매하다.
                - string a = "hello"
                - string b = a
                - a = "ok"
                - 이때의 b는무슨 값을 가지고 있을거라고 보는가?
                  - "hello"인가, "ok"인가.
              - IntegerArray {
              - } immutable인가?
                - 아니오. 매번 복사가 일어날 수 없다. 복사되는 매체인 원소는 공유되어야할 가능성이 있다.
      - 상속문제 --> occupiable은 상속으로 해결된다.
        - 현재는 occupiable을 개발자에 재량에 맞기자. 이다.
        - x 상속반대의견
          - 하지만 다음의 시나리오가 존재할 가능성이 없다면 추가적인 기능을 제공할 여지가 있다. 한번 재고는 해봐야 한다.
            - 자식이 occupiable이다. 부모는 occupiable 되는 경우가 있는가?
            - 자식이 sharable이다. 부모는 occupiable이 되는 경우가 있는가?
          - occupiable은 상속이 되어서는 안된다. 상속 금지! 왜? C#은 그렇게 하더라. int가 상속이 되어야 하는 이유가 무엇인가?
        - v 상속 찬성 의견
          - int를 상속해서 sharable처럼 사용하고 싶은 경우는 무엇인가? 그렇게 하고 싶다면 int를 포함시켜버리면 되는 것이다.  **상속이란느 것은 부모의 속성을 전적으로 물려받는 것을 의미한다. 고로 int가 가지고 있던 occupiable 속성도 그대로 자식에게 물려지게 되는것이 당연한것이다.**

    - 어떻게 구현하지?

    - x 1안 Reference가 sharable 자체다

      - const 이슈 때문에 occupiable도 reference로 감싸여질 수 있다.

    - 2안 Class안에 이 정보가 들어있으며 Reference가 이걸 보고 동작을 판단한다.

      - **만약 Object = Target의 연산이 수행되어야 한다면, Target이 occupiable이건 sharable이건 어쨌든 할당연산(occupiable처럼 동작)이 일어나야 한다. native 관점에서는 애초에 share할수 있는 ptr가 없으니 당연한 것이다. 따라서 이 문제는 this가 reference일때만 발생하는 것이다.**

      - 고로 reference 안에서 이 객체가 occupiable인지를 판단해서, occupiable이면 get().operator=()로 redirection하는 코드가 적절하다고 볼 수 있다.

      - Reference는 TString<Object> 이므로, Object class 안에 isOccupiable()를 넣어두고, 이 정보는 TClass로부터 가져오게 하면 될 것이다.

      - OccupiableObject는 overriding으로 return true; 를 바로 반환한다.

      - isOccupiable()은 Node에만 속한 것이다.

      - isOccupiable()은 TClass도 갖고 있는다. 만약 TClass<T>의 T가 Node의 일종이 아니라면 항상 false가 나온다. default가 false란 얘기다.

      - isADT와 isOccupiable은 서로 다른 개념이다.

      - v Method는 occupiable인가?

        아니오. 대개는 sharable이라고 보면 된다. 그래서 isOccupiable()의 default는 false다

        - Method* a, *b;
        - a = b; 가 될때 어떻게 되어야 한다고 보는가?
        - 당연히 sharable일 것이다.

  - v World코드 -> World 코드블럭 시나리오

    - 파서는 sharable이거나 const의 경우는 reference 감싸줘야 한다.

  - Native개발자의 경우

    - out





## [x] 멤버변수는_occupiable_멤버함수는_sharable_로_할_수_있을까?

- 그런 특성을 가지고 있는 것은 사실이다. 그러나 occupiable, sharable 로직을 객체 복제(메소드, 멤버변수의 복제)에 재사용하는 것은 안된다. 왜냐하면 occupiable, sharable 로직이 발동되려면 opearator=가 일단 호출이 되어야 하기 때문이다.
- 현재의 chain을 통한 자연스러운 컨셉(메소드는 공유, 멤버변수들은 operator=를 호출함으로써 occupiable, sharable 로직을 발동시키는 것)이 더 메모리나 퍼포먼스 적에서 이득이다.
- 고찰내용
  - Method는 클래스에 소유한 것으로, 모든 Object들은 이 메소드를 공유하는 것이다. 반면 멤버변수는 객체마다 나오기 때문에 occupiable 특성을 가지고 있다.
  - \#occupiable과_sharable 에서는 occupiable과 sharable이란 개념을 World에서 어떻게 구현할것인지를 정하고 있다. 이 구현물을 가지고 그대로 멤버변수와 멤버함수의 동작으로 재사용 가능할까?
    - 안된다.
    - occupiable과 sharable의 진정한 의미는 개체의 복사인 operator=가 일어났을때의 디폴트 컨셉이 무엇이냐는 것이지, 공유할 수 없다, 복제되어야 한다 같은 것이 아니다. 이를테면 객체D가 클래스로부터 생성이 되었다고 하자. 자, 그러면 sharable객체C는 클래스안에 들어가있는 객체C로부터 복제된 것이어야할까? 아니면 공유되어야 하는 것일까?
      - 복제가 되어야한다. 공유가 된다는 것은 단순히 static 변수를 의미할 뿐이다.
    - 그러면 객체D로부터 복제되어서 객체E가 나왔다고 가정해보자. E안에 있는 객체C는 객체D 안의 객체E 로부터의 복제품인가? 아니면 공유물인가?
      - 이거는 공유물이다.
    - 즉, 객체의 복제가 일어났을때 복제인가 공유인가를 결정짓는 것은 sharable, occupiable이다. 왜냐하면 복제가 일어나면 멤버변수 객체에 한해서 operaort=가 일어나게 되니까.
    - 이것은 객체가 생성되었을때 가지고 있어야 하는것과 클래스로부터 공유해야하는것과는 조금 다르다. 메소드는 처음부터 operator=과정을 거치지 않는다. Chain안에 포함되어있고 Chain이 복제될때 sallowcopy가 디폴트이므로.
    - 따라서 occupiable, sharaable 로직을 재사용하겠다는 것은 메소드들도 일단 operator=를 거치게 하겠다는 것이며 Chain을 사용하지 않겠다는 의미이기도 하다.
    - **고로, 재사용해봤자. 지금보다 더 로직이 복잡해지거나 메모리 낭비가 심해지게 될것이다.**



## [x] 개발자가 immutable 객체를 만들 수 있도록 해줄까?

* 다른 언어도 지원하지 않는 내용이다.
* 기본적으로 mutable 처럼 동작하는데, 코드만 봐서는 이게 immtuable인지 아닌지 알기가 힘들다.
    * 기본적인 타입, accessor를 기억해야 하고 추가로 immutable 여부를 기억해야 한다.
* 지원했을때의 큰 메리트를 느끼지 못한다.


## 객체를 생성하여 반환하는 native함수를 wrapping할때 사용자의 sharable, occupiable 부담을 덜어줄 수 있는 방법은?

- char* gen_xml_parsed(char* buf, char* path);
- 위 함수를 wrap하기 위해 사용자가 짜는 함수다.
- class XMLParser : Object
  - static void onInflacture(List<Method>& tray)
    - DECL(String parse(String path))
  - Reference parse(String& node) // BEST OK
    - char buf[65535] = {0, };
    - gen_xml_parsed(buf, [node.to](http://node.to/)<char*>());
    - return Reference<String>(new String(buf));
- 문제점
  - 사용자는 String이 sharable이기에 반환형이 Reference 라는 걸 반드시 알고 있어야 한다.
    - String& parse(const String& path) --> OK
      - return new String(buf);
    - 이렇게 대체할 수도 있지만 이 역시 sharable이라는 걸 알고, new를 써야 한다는 걸 알아야 한다.
- **답 : 문제 정의자체가 잘못되었다.**
  - 반환형이 Reference던 String이던, String& 이던 상관없다. 어짜피 TNativeMethod는 반환한 값으로부터 Refer returned = cb(..)->to<String>()를 할것이기 때문이다.
  - 따라서 sharable인지 occupiable인지는 상관안해도 된다.


## 현재안
* immutable, mutable이란 전통적인 용어 대신에 sharable, occupiable이란 용어를
* 만들어서 사용해왔다.
* sharable은 refer로 항상 감싸져 있는 객체,
* 모든 객체는 operator=()로 할당연산이 가능.
* occpiable은 객체 자체를 스택에 둠. 그래서 객체간 op=()가 호출되므로 mutable처럼 동작.

```namu
a := 3 // occupiable
b := a
a = 4
a != b // true

c := complex()
d := c
c.age = 33
c.age == d.age // true
```


## 개선해보자
### 포인트
* 먼저 착각했던게, "immutable은 refer로 감쌀 수 없음"이 아니라는 점이다.
* Mutable과 refer는 관련이 없다. 평가전락과도 관련이 없다.
* byVal을 사용한다고 하더라도 immutable객체와 mutable객체를 만들 수 있다.
```cpp
MyClass m;
m.readValue();
m.setValue(int newValue) // 만약 newValue가 없었더만 MyClass는 immutable객체다.


```java
String a = "wow";
String b = a;
//a.insert(1, 'o'); // 이렇게 string에 원소를 끼워넣는건 할 수 없다.
b = "changed";
a != b // true.
```

* 문자열의 일부만 바꿀 수 없다. API가 없다. 하려면 통째로 바꿔야 한다. string이 immutable임을 알 수 있는 대목.
* a는 바뀌기 전에 b를 가리키고 있다. string이 mutable 이기 때문에 a != b가 되는 것이다.
  b가 새로운 메모리를 가리키는 immutable이기 때문에.
    ```java
    Complex a = new Complex();
    Complex b = a;
    b.setName("kkk");
    a == b // true
    ```
    * b가 mutable이면 이런 결과가 된다.


* 하지만 String은 객체이며 int, bool 같은 primitives와는 다르게 취급한다.
* 자바에서 모든 객체는 refer에 감싸져 있다. 따라서 String은 객체이므로 refer로 감싸져 있지만
  immutable인 변수인것이다.




```namu
// 1안: 모든 객체는 refer로 감싸져 있다. refer는 T가 immutable이면 clone()만 한다.
//      mutable이면 기존대로 pointer만 바꾼다.
//      결론적으로 객체의 할당연산자는 worldlang에서 없다.
a := 3
b := a // b는 refer로 감싸져 있으며 refer는 a에서 값을 clone()해 넣어두었다.
a = 5
a != b

c := complex()
d := c // c 또한 refer로 감싸져 있으며 refer는 c로 포인터만 옮겼다.
c.setName("kkk") // c 객체의 name이라는 문자열이 "kkk"로 복제된다.
d == c



// [x] 2안: scope가 immutable이면 clone()을 한다.
// 모든 변수는 결국 scope에 들어간다.
b := a // a는 int, immutable. 그러면 scope는 b라고 하는 변수가 있던 곳에 int() 객체를 다시 넣는다.

    // [?] 객체 안에 있는 immutable은?
    def person
        name := "wow"
        c := def com()
            address := "korea"
            id := 3

    person.name = "ok"
    person.c = person().c
    // members().replace(n, obj) 이런 코드로 컴파일러가 치환할 수 있어야 한다.
    // scope던 object이던 같은 Container를 사용해야 한다.


// [x] 3안: mutable의 경우에도 scope의 member에 넣는다. 그리고 scope에 refer를 두지 않고 바로 객체를 넣는다.
//      member 변수라고 해도 결국은 scope에 있을 것이다.
//      (chain이 되어있으므로 scope에 조작을 가하면 객체의 members에 조작을 가하는 것과 동일하다)
// 동작은 되는데, 문제는 객체가 교체되며 members를 Node 타입이기 때문에 본래 어떠한 타입의 변수였는지를 알지 못한다.
// 월드는 타입이 분명 존재한다. 단, 문법 전체에 잘 들어나지 않을 뿐이다.
def base
def derived from base
def another
b := base() // 언급이 없어도 b는 base 타입이다.
b = derived // ok
b = another // err.

// 타입을 담당하는 것은 refer다.
// scope에 "b"라는 변수명에 refer가 들어있고 그 refer가 base() 객체를 가리키고 있는 것이다.
// 만약 scope["b"]에 base()객체를 바로 넣는다고 하자. 이렇게 하면 another()객체를 replace 하는 요청도
// OK가 되버린다. base타입의 변수라는 정보가 어디에도 없기 때문에.
```


### [v] 3-1안: origin 노드라면 refer로, 그외의 복제 객체라면 refer로 씌워서 둔다.
* [x] 이렇게 하면 scope에는 항상 refer가 있을 것이다.
* [v] members를 Array<Refer>로 할 수 있을까? --> 아니.
* [v] Refer를 members에 두지 않아도 된다면, 그것은 어떤 상황인가? --> origin 노드다.
    * 먼저 immutable/mutable에 장단점을 확실히 하자.
        * mutable이란 객체는 그대로 동일한 메모리에 있고, 객체가 가진 값만 바뀐다는 것이다.
        * C++로 간단히 재현이 가능하다.
        ```cpp
        void foo(int& a)
        {
            a += 2;
        }
        int a = 5;
        foo(a); // foo 안쪽에서 a가 변경되었다는 것을 알아야만 한다. sideeffect 있는 함수가 되는 것이다.
        int ten = a * 2; // 10이라고 생각했겠지만 실제로는 14가 된다.
        ```

        * 그리고 멀티스레딩에서 장점도 있다.
        * 이처럼 메소드 안쪽에서 해당 객체의 값이 변경이 되는가 아닌가를 결정하는 것이 mutable이다.

        ```java
        void foo(String a) {
            a = a + "wow" // string은 immutable이다.
        }
        String a = new String("zzz");
        foo(a); // foo 안에서의 동작이 외부의 a에 영향을 미치지 않았다.
        System.out.println(a); // zzz가 나온다.

        void boo(Complex c) {
            c.real = 1;
            c.fake = 0;
        }
        Complex c = new Complex(0, 0);
        boo(c); // 안에서 c의 객체가 변경되었다.
        System.out.println(c.real + "," + c.fake); // 1, 0
        ```

        * C++에서는 byVal, byPointer, byReference를 개발자가 고를 수 있도록 만들어서, 어떤 타입이든
          바로 immutable처럼 사용할 수 있다.
        * 반면, Java, C#, python 등은 by object(bySharing)을 사용하고, 이는 특정 타입을 제외하고는
          기본 mutable로 고정되어 있다.
        * const, final 같은 키워드는 immutability를 보장하지는 않는다는 걸 명심하자.
          객체는 엄밀히 조작이 가능하나, 그 객체에 접근할 수 있는 변수가 const, final로 되어있는 것이다.
          어떻게든 다른 경로를 통해서 그 객체에 접근할 수 만 있다면 변경이 가능한 상태가 된다.
        * 평가전략은 immutable에도 영향을 어느정도 미친다. immtuable에서 가장중요한 것은 객체가 복사되는
          순간 (할당연산, 복제 생성, 메소드에 인자로 넘기는 것...)에 다른 객체를 만들어낸 것이기 때문이다.


    * 문제로 다시 돌아가면 "타입정보"가 필요하기 때문에 객체는 무조건 refer로 감싸야 한다. refer가
      immutable로 다룰지 mutable로 다룰지 결정한다.

        * 반대로 얘기하면 refer가 감싸고 있는 immutable객체를 refer를 거치지 않고 어떻게든 접근이 가능했다면,
          그리고 이 객체만 들고 바로 interaction을 한다면 mutable 객체처럼 사용할 수 있다.
          만약 거기에 그러한 public api가 있다면 말이다.
        * 예를들면 자바의 String은 immutable인데, 그것은 언어적인 차원에서 지원을 하였기 때문만 아니라
          String 클래스 자체에 mutable 한 메소드를 만들지 않았기 때문이기도 한것이다.
        * Native 프레임워크에서도 primitives들은 setter를 제공하지 않아야 한다.
        ```cpp
            class MyClass : public Object {
                public:
                    void foo(Int& a) { // 보통은 (int a) 혹은 (Int a)로 할것이나, 설령 인자로 &를 주었다고 하더라도
                        int a = a.get();
                        Int b = a + 5; // 식으로 쓰도록 primitives 들을 잘 만들어야 한다.
                    }
            };

    * 메소드는 객체가 아니라 Node의 일종이다.
    * 메소드와 메소드Ref는 구분을 해야 한다.
      그러나 worldlang 문법에서는 이 둘을 구분해서 정의하지 않도록 되어있다. origin객체인
      메소드만 정의하면 자동으로 그에 맞는 ref가 생성된다.
      ```namu
        void foo(int a) // foo는 origin node다.
        a := foo // a는 foo를 가리키고 있으며 타입은 foo라는 origin node다.
        foo() // 에러. 메소드는 생성자가 없다.
        foo = foo // 에러. foo는 refer가 아니라 메소드이다.

        // 이는 전혀 이상한 문법이 아니다. 객체로 치환하면 바로 이해할 수 있다.
        def msg // msg는 origin node다.
            title := "unknown"
        m := msg // m은 msg를 가리키고 있으며 타입은 msg 이다.
        m = msg() // 객체이므로 생성자가 있다.
      ```

    * origin node는 정의와 동시에 프로그램 시작시에 컴파일러가 origin 배열에 추가해둔다.
      그리고 이후 그것을 타입으로 삼는 모든 변수는 그 origin에 대한 refer로 만든다.
    * origin node들은 refer에 감쌀 필요가 없다.
        * 컴파일러는 'a = b 와 같은 할당연산을 "a"라는 refer를 찾아서 set(b)를 호출'로
          변환한다.
        * origin node 같은 것들은 그것을 가리키는 식별자가 항상 동일해야 한다.
        * 때문에 origin node들은 scope에 refer에 씌우지 않고 넣어두면 된다. 컴파일러는
          scope에서 가져온 객체가 refer가 아닌데 사용자는 할당연산을 시도했다면
          에러를 내보내면 된다.

    * 따라서 members에는 refer가 아닌 것들도 들어갈 수 있다. origin node들 말이다.








## OccupiyingNode?



## Refer

### 복사연산을 어떻게 할가?

- \#occupiable_and_sharable 와 #Refer는_const를_정보를_가지고_있다. 로 인해서 이 문제는 상당히 어렵다.
- 요약
  - C++
    - Refer::Refer(const Node& rhs) // Node가 Refer일때는 Refer::Refer(rhs)를 실행한다.
    - Refer::Refer(const Refer& rhs);
    - Refer::Refer(bool isConst = false);
    - Refer::operator=(const Node& rhs);
    - Refer::operator=(const Refer& rhs);
    - Refer::bind(const Node& rhs)
    - 를 가지고 있다. 즉, 타입이 설사 다르더라도 일단 시도는 하게된다.
    - 이는 WrdFrx은 기준 타입이 Node로, 구체타입이 뭔지 모르더라도 일단 동작하게끔 설계되었기 때문이다.
  - Refer와 Bind의 차이는 크게 2가지다.
    - \1. Refer는 const여부를 담고있으며 생성자에서 결정된다.
    - \2. const A와 A는 다른타입이다. 따라서 한번 const Refer라면 죽을때까지 그 Refer는 const A만 물을 수 있다.
  - World에서 const는 타입의 일부분이다. 고로, const Refer는 죽을때까지 const Refer이다. 그러나 const Refer<A>는 native에서, non const Refer를 const Refer로써 사용하고 있는 상태다. const를 벗기면 nonconst가 된다. 당연히.
  - nonconst는 const가 될 수 있다. 반대는 안된다. (이건 C++과도 동일하다)
- 검증
  - class A
  - class B : A,
  - 1
    - A a = B b // cmpl ok exe ok
    - Refer<A> a = Refer<B> b // compile ok, but exe ok.
  - 2
    - B b = A a //comp err
    - Refer<B> b = Refer<A> a // compile ok, exe err
  - 3
    - A a = const A // cmpl err
    - Refer<A> a = Refer<const A> // cmpl ok, exe err
  - 4
    - const A a = A a // cmpl ok, exe ok
    - Refer<const A> a = Refer<A>; // cmpl ok, exe ok
  - 5
    - const A a = B b // cmpl ok exe ok
    - Refer<const A> a = Refer<B>; // cmpl ok, exe ok
  - 6
    - const Refer<A>는 World코드에는 존재하지 않는다.
    - const Refer<A> a = Refer<B> // cmpl err. const Refer<A>&이므로 operator=, bind() 전부 안되는게 정상이다.
  - 7
    - const Refer<B>는 World코드에는 존재하지 않는다.
    - Refer<A> a = const Refer<B> // cmpl ok, exe err
      Refer<A> a = Refer<const B>와 같다.

### Method::run() const일때 ret인 Refer는 const REfer인가? 아닌가? 아니면 메소드는 신경쓸 상관없나?

- 신경쓸 필요가 없다. C++로 예를보면 아주 명료해진다.
  - class A {
    - B& getBFromSomeWhere() const { // case#1
    - ​     return B::getInstance();
    - }
    - A& operator=(const A& rhs); // case#2
  - };
- 아마도 이 질문을 한 의도는 case#2만 생각하고 한 것이다. 이 경우에도 Method는 신경쓸 필요가 없는데 반환형이 A&로 되어있다고 하더라도 거기에 담기는게 *this만 아니라면 아무런 문제될게 없기 때문이다.
- 그리고 *this를 담기지 못하도록 에러를 내뱉는 건 Method클래스에서 내뱉는게 아니라 파서가 해야 한다. const 메소드에서 this는 const A*가 되기 때문에 return (A*) this; 과 같은게 되버리며 A*에 const A*인 this를 넣으려고 했으므로 컴파일 단계에서 에러를 내뱉어야 한다.
- 만약 컴파일단계에서 잡아내지 못하면 런타임시에 저 코드는 결국 null이 나가게 될것이다. nonconst Refer에 const를 넣으려 했기 때문이다.
  - 참고 -> #Refer는_const_T_캐스트가_되어야만_한다.



### Refer의 구현

* def Refer := Node
	* onGet, onSet에 대한 추가 구현이 없다.
	* this를 점거하지 않는다. 대신 다른 객체를 this로 내보낸다.
		* 결과적으로 모든 msg를 delegate하게 된다.
	* getMembers()는 shared member만 사용한다.













# 지정자
```cpp
import console

app
    // prefix _는 protected를 의미. 정의와 동시에 초기화도 ok.
    // 접근시에는 _grade가 아니라 grade
    _grade = 3.5
    // 3.5처럼 . 포함된 리터럴상수는 float으로 간주.
    age // 접근자(accessor)는 public. 초기화 표현식이 없을 경우, 각 타입들의 기본값이 assign.
    void main()
        app.double(grade) // static 메소드인 double을 호출.
        console.out("age=" + age + ", grade=" + double(grade)) // app의 범위scope에 있으므로, 본래 app.double() 해야 하나, 'app'을 생략 가능

    // prefix $은 static 메소드를 의미.
    // 함수간 선언 순서에 종속되지 않음. app.double() 호출보다 정의가 나중에
    // 나와도 ok.
    int $double(float val) // 인자리스트에 $, _ prefix는 붙일 수 없음.
        $mul = 0
        mul++
		return val*mul // int mul -> float mul -> (int) val*mul 로 implicit 캐스팅


// 결과: age=0, grade=7
```
#,$,@,_



## static

### static의 기본

- World에서 static 함수는 앞에 share 키워드를 붙이면 된다. 일반인에게는 더 친숙할것이라 본다.

- 예제

  - class A
    - int age;
    - share int static_age;
    - int print(int a)
      - ...
    - share int static_print(int a)
      - int age
      - share int static_age = 5
      - ...
  - A a
  - A.static_age == a.static_age
  - A.static_print(2)
  - a.static_print(2)
  - a.print(5)

- 구현방법?

- 고찰내용

  - static 함수는 필요하다. --> random() 같은, 함수만 제공하고 싶은 경우가 있다.

  - 일반 method와 구분이 되어야 한다. --> 기능적으로는 method처럼 써놓고 안에서 this를 사용하지 않는다면 문제될 것은 없지만 외부 사용자들이 보았을때 객체를 생성해서 method로 호출해야 하는지, 객체 없이 바로 호출 할 수 없는지 분간이 가야 하기 때문이다.

  - 1안 글자를 덧 붙인다.

    - 1-1안 static을 그대로 사용한다.
      - class MyModule
        - static int random()
          - return ... ...;
    - 1-2안 share를 사용한다.
      - class MyModule
        - share int random()
          - return .....;
        - share int age
        - int obj_age;
        - //int age --> 같은 클래스에 2개를 정의할 수 없다.
        - share int add(int new)
          - share int prev = 0
          - return prev += age + new
        - //share int add(int new) --> share를 적으면 에러다. 안에 객체의 변수에 접근하니까.
        - int add(int new)
          - return obj_age += new

  - 2안 글자를 덧붙이지 않고, 기호나 형태의 변형을 통해서 static이라는 걸알 수 있게 한다.

    - 2-1안

  - 1안

    - 1 = static
    - 2 = keep (매 함수호출시마다 이 값을 공유하므로)
      - share를 쓰자는 안도 있었지만 static 멤버변수도 어떻게 보면 "공유" 자원으로 볼 수 있기 때문에 share와 혼동이 있을 수 있다.

  - *x 2안 키워드를 앞에 두는 방식이 아니라 클래스명을 두는 식으로 한다.*

    너무 선언문이 길어진다.

    - 1 = int MyClass.static_value = 5
    - 2 = int Me.static_value;
      - 반대의견1 - 이 변수는 method에 속한 것이 아니라 블록문에 속해 있어야 한다. 그리고 블록문을 식별자로 지정할 수 있는 방법은 없다.
      - 찬성의견1 - c++도 static 변수는 메소드에 속하게 한다. 굳이 블록문에 한정할 필요가 있는가?







### static정보를_어떻게_공개할것인가

- [v] 구현

  - [v] Method에만 isStatic 만들기
  - [v] c++ sfinae로 static 메소드인지 판단이 가능한가?
  - [v] 월드 method 정의 매크로로 자연스럽게 static func인지 판단이 가능하게 할 수 있을까? 다른 매크로를 또 만들게 하고 싶지 않다.

- 고찰내용

  - *1안*

    - Node
      - CompositNode

  - *2안 isStatic() const 함수는 this가 scope의 globalspace에 속해있는가, 혹은 메소드의 변수로써 박혀있는가 등으로 판단한다.*

    - 실행중이 아닌 Object라면 isStatic()여부를 알수 없다.

  - *3안 method에 대해서만 static 여부를 알린다. 즉, isStatic()을 묶지 말고 각 필요한 클래스 별로 별도로 가져간다.*

  - *5안 현 설계에 Node에 static을 둔다.*

    - 멤버변수의 static : 객체가 없어도 호출이 가능한 것.

      - *x ==> 객체에 속한 것이 아니라 class에 속한것*
      - **v ==> 실행 및 접근과정에서 this가 필요하지 않는 것.**
        - 이 점을 생각하고, Node에 isStatic() const를 두도록 한다.

    - 객체의 static : scope가 제한된 전역변수

    - static이란 msg로 call을 할때 msg안에 this가 필요한가 필요하지 않은가 이다. Node default로 true를 반환하도록 하자.

    - v Node에 static을 둘수 없다.

      답이 없다.

      - c++ 적으로 알아낼 수 있는 방법이 없다.

      - 왜냐하면 native 사용자가 자신이 만든 클래스의 메소드 안에 static MyObject로 둔 경우, 이 객체는 절대로 isStatic()에서 true를 반환하도록 할 수 없다.

      - 이는 c++에서는 변수가 static인지 아닌지를 판정하는 것이 불가능하기 때문이다.

      - (static 함수는, visiblity를 위해서 함수명, 반환값, 인자리스트를 모두 알고있으므로 sfinae를 사용하면 static메소드인지 아닌지를 알 수 있다)

      - 따라서 모든 케이스에 대해서 static 여부를 반환하도록 할 수 없으며, 그렇게 오인할 수 있는 API를 만들어서는 안된다.

      - x 1안 만약 사용자가 Native에서 생성한 객체를 월드에 공개하고 싶을때는 추가적인 API를 사용해야만 한다고 제약을 건다면?

        너무 불편하다. 걍 제공하지 말자.

        - 이 제약(메소드)안에서 static 여부도 같이 검사해서 값을 할당해주면 된다.
        - 그러나 이 static 문제만을 위해서 이렇게 제약을 거는 건 좀 그렇다. 혹시 다른 경우에도 이러한 제약이 필요한가? 생각해보자
          - static을 제외한다면 사용자가 멋대로 native에서 만든 객체를 world에게 반환값으로 넘겨줘도 문제는 안되는가?

  - [v] 6안 static의 의미를 세분화해서 그 중 100% 보장 가능한 것만 Node에 API를 둔다.

    - C++에서는 static이 여러의미로 쓰이는데
      - \1. 클래스 멤버에 대한 static : 이것은 이 멤버의 접근시 this가 필요없다는 의미이다.
        - 예) 클래스 static 멤버변수, static 멤버함수, static변수
        - 이 정보는 실행도중에 필요할 수 있다. this를 넣어야할지 아닐지는 programmatically하게 결정해야 할 수있기 때문이다.
      - \2. 함수 혹은 파일 translation unit안의 static 변수 : 이것은 이 변수가 여기서만 노출되는 전역함수라는 뜻이다.
        - 그러나 이 정보는 실행도중 참조할 이유가 아무것도 없다. 이정 보는 IDE에서만 사용하는 것이다. IDE에서만 노출되는 정보로 만들면 된다.
    - 위의 2가지 의미를 static 하나의 키워드로 묶는것은 다소 문제가 있어보인다. 월드에서 다음과 같이 지정하면 어떨까?
    - 1안 - method에 대해서만 static을 공개한다. 변수가 static인 것은 실행에 아무런 도움이 안되기 때문이다.
      - 정확히 말하면 이 메소드는 this필요로 한다 아니다를 판단하는 정보만 공개한다. 이는 실행할때 최적화에 도움이 된다. 필요하다.
      - Method에 isStatic() const를 추가한다.
      - [x] 변수가 static이건 말건 실행에는 중요하지 않다. 이런건 파싱할때 추가정보로써 IDE에서 참조가능한 형태로 전달한다.
        - 틀렸다. 멤버변수는 static인지 여부도 중요하다. native에서 만든 변수는 visible이 되지 않는다. 그러니 이건 패스. 하지만 월드코드상으로 만든 static 변수는 어떻게 되는가 말이다.



## [v] specifier 문제

### [v]1안
* 타입 변수의 모양새이다.
	* 타입에는 어떠한 expr도 올 수 있다.
* specifier는 보통 변수 정의시 변수명 앞에 붙인다.
 ```java
	_$#inner = 3
 ```

* const는 객체가 정의가 끝난 이후에도 붙일 수 있다.
```java
	inner = #getAge() // inner는 nonconst.
```

* 타입과 달리 specifier는 유추가 되지 않는다. const도 변수 정의시 직접 정의해야 한다.
	* 이는, occupiable일때, const를 넣을지 안 넣을지 변수정의시 선택이 가능하기 때문이다.
```java
	inner := 3 // O
	#inner2 := getAge() // O
	inner2 = 5 // X
	myObj := getMyObj() // X
	#myObj := getMyObj() // O
	myobj.setInt(3) // X
```

### [v] Q1. a3 = # 3 처럼 표현해도 되야 함?
### [v] Q2. a3 = # a2 처럼 해도 되야 함?
### [x] Q3. a4 = _ $    #     a3 처럼 해도 되야 함?
### [x] Q4. #가 rhs에 붙는다고? 그럼  $는?    a4 = $33 로 해야 하나?

### [v] Q5. # 3과  float 3 과 구분이 가능한가?
### [v] Q6. getInt() 4 도 사용이 가능한가?



## _$# prefix는 키보드 우측에서 좌측으로 입력한다!

- 외우기 쉽다.
- 순서가 정해져 있으므로 독해도 올라갈 것이다.
- 일관성이 있으면 모양도 이쁘다.















# 상수화

## [x] 기존안

```cpp
import console

Animal
    // 상수: # <타입>
    // prefix 중 하나로, #로 표현한다. (# 기호가 딱딱함과 고정됨을 연상시키기 때문이다.)
	//	1.	타입 앞에만 붙을 수 있다.
	//		다시말하면, Refer 항상 교체될 수 있으며, 이를 문법적으로 방지해주지 않는다.
	//  2.	prefix를 같이 표기하는 경우, 순서를 지켜야 한다. $#_ 순으로 표기한다.
	//  3.	void에 #을 붙일 수 없다.
    str #getName(): "unknown" // const 메소드.
    #int _age = 1
    int getAge(): _age

    #int $#_foo() {} // "static const protected method returning const int."
    // void #$_foo1() {} // 컴파일에러: Rule#2 위반
    void foo1() {}
    // void setAge(int new): age = new // 컴파일에러: age는 const 이다.
    void #walk(): console.out(age + "yo " + getName() + " walked.") // getName()이 const메소드가 아니었다면 에러였다.

Animal Beaver
    #str #getName(): "Beaver"
    void #walk()
        Super.walk() // Super는 기반클래스(Animal)로 캐스팅된 this를 의미한다.
                    // "Animal Super = this" 가 이미 선언된 것과 같다.
        console.out("Beaver's finding a seashell.")

app
    int main()
        #Animal[] anims1 // an array to constant Animal.
        Animal#[] anims2 // an constant array to Animal.

        // anims1[0].setAge(5) // non-const 메소드에 접근한다. 컴파일 에러.
        // Beaver beav = anims1[0] // 컴파일에러. 묵시적 형변환에 downcasting은 포함 되지 않는다.
        // Beaver beav = (Beaver) anims1[0] // 컴파일 에러. const -> non-const로 형변환 안된다.
        #Beaver beav = (#Beaver) anims1[0]
        #Animal anim = anims2 // non-const -> const 로는 묵시적 변환된다.
        // beav.setAge(5) // beav 는 const 다.
        beav.walk()

        #Animal#[#str] map = [(beav, "beav")] // a constant map holding const Animal as value distinguising with const string.
        // map["anims2"] = Animal() // 컴파일에러. map은 const 이다.
        #Animal[#str] map2
        map2["anims1"] = Animal() // Rule#1: Value는 const타입이나, refer는 const가 아니다.
        // map2["anims1"].foo() // #Animal로 non-const 메소드를 호출했다.
        console.out(map["anims1"].walk())

/* 결과:
	1yo Beaver walked
	Beaver's finding a seashell.
	1yo Beaver walked
	Beaver's finding a seashell.
*/
```

### [x] const의 기본

- Java, python은 const를 지원하지 않는다. const가 없어도 사실 사용상에 문제가 없다. 실수를 줄여주기 위한 측면이나 동시에 귀찮은 존재가 되기도 한다.

  - java 같은 경우는 99, 05년도에 기능추가를 위한 논의가 있었으나
    - \1. 이미 넣기엔 너무 늦음
    - \2. 하위호환성
    - \3. c++ 처럼 모든 메소드 뒤에 const 붙어야 하니 불편하고 메소드가 더러워짐.
  - 으로 넣지 않게 되었다.

- World는 const를 지원한다.

  - default(= const 를 명시하지 않을때)가 auto를 의미한다. 이는 컴파일러가 판단하여 const인가 nonconst인가를 판단하는 걸 말한다.
    - 어짜피 validation을 위해서 이 메소드가 const인가 nonconst인가는 판단을 해야 하는 문제다.
  - nonconst 나 const를 뒤에 적으면 "사용자가 명시적으로 이 함수는 무엇이다" 라고 말한게 된다.

- side effect

  - 일반적인 언어라면 default를 auto로 하지 않을것인데, 왜냐하면 사용자가 "이 함수가 const인가?"를 알 수 있는 유일한 방법이 compile 이기 때문일 것이다.
  - 이것은 컴파일러와 사용자가 같은 대상물로 대화하는 것이 아니라, 사용자는 "코드"로 얘기하며 컴파일러는 "에러로그"로 답신하는 구조를 띄고 있기 때문이다.
  - 반면 월드는 코드가 핵심이 아니며, 코드가 프로그램이라고 생각하지 않는다. 코드는 어디까지나 대화의 한 수단일 뿐이며 프로그램을 만들기 위해 개발자가 편리하게 얘기할 수 있는 수단이다. IDE의 코드창은 개발자만의 대화공간이 아니며 개발자와 컴파일러가 함께 도와주고 서포트 해주고 채워나가며 프로그램을 만드는 공간이다.

- 문법

  - const MyType a = ... 에서 const는 a가 가리키는 객체가 const 라는 뜻이다.
    - World는 ptr기반이지만, ptr const는 할 수없는 pointer만 존재한다고 생각하면 된다.
  - nonconst 인 reference는 const reference로부터 할당을 받을 수 없다.
    - const MyType a = ...
    - MyType b =  a **// compile 에러**
  - const를 그대로 사용한다. nonconst를 사용한다.
    - v 1안 const를 그대로 사용한다.
      - class A
        - void print(const int age, string msg) const
          - Console.out(msg + [age.to](http://age.to/)(string))
      - 그러나 nonconst를 명시할때는 어떻게 하는가? "nonconst"는 너무 길지 않나?
        - 자주 쓰는 것도 아니고. 가끔 쓰는데다가, 영어권에서도 nonconst는 자주 사용하기도 하고. 이걸로 가자.
    - x 2안 ro와 rw를 사용한다.
      - class A
        - void print(ro int age, string msg) ro
          - Console.out(msg + [age.to](http://age.to/)(string))
      - 짧긴 하나, 되려 눈에 잘 들어오지는 않는다.
      - readonly로 보이는게 아니라 "로" 라고 보인다.

- Managed 개발자를 위한 World 구현

  - \1. 인터프리팅시
    - 컴파일러가 메소드를 파싱할때 이 메소드가 최종적으로 (non)const 여부를 결정한다.
    - validation이 method.isConst() != 사용자가const로 명시 이면 에러를 내보낸다.
  - \3. World 코딩시
    - intelisense에 const 여부가 반영되며, const여부의 경우는 텍스트창에 메소드명의 색이 nonconst일때와 다르다.
  - \2. 실행시
    - **"일단은 호출은 ok, 호출안쪽에서 에러 체크"** 로 판단한다.
    - const를 위한 별도의 member는 가지고 있지 않는다.
    - native 메소드를 fptr로 갖는 Method는 매크로에 의해서 생성된다. 매크로는 자신이 물은 native 메소드가 const메소드인지를 탐지해야 한다.
    - const일 경우에는 Method.isConst() = true로 만든다. 그러나 c++ Method객체 자체는 절대 const가 되지 않는다.
    - Method에서 fptr를 호출할때 const를 메소드를 call()시, 고려해야 하는 조건은 크게 2가지다.
      - \1. const thisptr를 얻어와야한다.
        - --> const Object& caller = msg.getOrigin().get(); **// origin은 nonconst Binder다.**
      - \2. 반환값이 const 인경우, 최종적으로 Refer(isConst() = true)에 wrapping에서 넘겨줘야 한다.
        - --> return (caller.*_fptr)(msg.getArgs()[0], ....).to<const T>(); **// 반환값은 동일하게 Refer다. 다만 const가 앞에 붙었으므로 Refer.isConst()를 true가 될 것이다**
        - **// 모듈개발자는 반환형으로 T\* 같은 걸 넣으면 위의 코드는 빌드되지 못한다. --> 이건 TNativeMethod 같은 거 만들어서 T\*에 대해 클래스 템플릿 특화 시키면 될것이다**
    - 모든 World 동작은 call()로 이루어진다. 따라서 isConst()인데, call()가 불려진 경우에는 isConst() const가 대신 실행되어야 한다.
    - Node는 bool isConst() const; 를 갖는다. Method, Object, Refer는 모두 isConst를 다루는 클래스들이다.
    - Method도 const를 여부를 가지고 있어야 한다. 이는 validation을 위한 것이다. c++의 Method객체는 const가 되든 말든 동작에는 아무런 영향을 주지 못한다.
    - 모듈개발자의 클래스의 멤버변수는 World에서는 visible하게 할 수 없기 때문에 모듈개발자에게 const는 메소드 일때만주의하면 된다.
    - Q. Thing::to(const Class& cls); 에는 사용자가 const Refer를 받고 싶어하는지의 여부가 포함되어있지 않다?
      - 1안 Thing이 const냐 아니냐에 따라서 Refer(isConst() = true)로 나갈건데, 이걸로는 부족한가?
        - 사용 시나리오로 생각해보자.
        - v Native에서 nonconst에서 const Refer로 만들때
          - 이건 const Object& casted = this; this->to(cls) 하면된다.
        - Managed에서 만든 const 객체에서 const Refer로 만들때
          - Managed

- v Managed 개발자가 Native모듈의 const를 어떻게 다루는가?

  - v 멤버변수를 다루는 경우 --> 당장은 모듈개발자는 메소드만 visible하게 할 수 있다.
  - v 메소드로 나오는 경우는
    -  TNativeMethod<const T> 나, Mashalling<const T> 특화를 통해서 해결할 것이다.
    - World의 const 가 있건 없건 타입 자체는 항상 Refer가

- Native모듈개발자가 Managed의 const를 어떻게 다루는가?

  - const Refer& 로 Native에서 작성하는 것은 쉽게말하면 Managed객체를 한번도 const로 래핑하는 것과 동일한 것이다. native적으로 이것은 const로만 사용할 것임을 확정하는 것이다. 따라서 Managed객체가 실제로 const인가 nonconst인가 관계없이 항상 const로만 동작하게 된다.

  - 왜냐하면 Managed의 모든 객체들은 그 객체들이 nonconst이건 const이건 관계없이 항상 c++에서는 nonconst로 동작하기 때문이다.

  - 따라서 native에서는 const여도, World에서는 nonconst로 되는 경우도 있다.

  - 반대로 World에서는 const여도, Native에서는 nonconst로 사용하게 되는 경우도 있다.

    occupiable도 const인 경우에는 refer로 감싸야만 한다.

    - 예를들면 Object.isConst() == true인 경우, native에서는 이Object가 occupiable인 경우 nonconst로 가져올 수 있다, Refer가 없으므로.

    - 이때 Object의 native nonconst 메소드를 막 호출해주면 되게된다.

    - 실수는 막아야 한다. 어떻게하면 native에서도 world에서 정의한 const 객체에 const native객체로 접근하게 유도할 수 있을까?

    - v 1안 Occupiable도 Refer에 감싼다.

      - Refer는 퍼포먼스를 요구하며, occupiable, sharable 컨셉 변경이 필요하다.
      - isConst 면 get()시 null 나오며, get() const는 값이 제대로 나와야 한다.
      - 따라서 마찬가지로 Refer::assign()에서 get()이 Null이면 바로 종료 하는 예외처리가 필요하다.

    - 2안 World의 객체를 native가 사용하려면 어짜피 타입캐스팅을 해야만 한다. 타입캐스팅to()는 refer를 반환하니까 이걸로 대체 가능하다.

      dynamic_cast를 사용자가 사용해서는 안된다.

      - 시나리오

        - Node& one = ...;
        - Node& mem1 = one.getMember(3) // == one[3]
        - mem1.call(Msg("print")); // call로 보내면 안에서 const 예외처리를 해줄 수 있다.
        - MyObject& mine = [mem1.to](http://mem1.to/)<MyObject>();
        - if(mine.isNull())
          - return InvalidType.err("mine is const");

      - 그래. 그렇다. 만약 이 방법이외에 처음부터 구체타입(예, MyObject) 형태로 접근이 가능하다면 사용이 불가능하다. 이런 예는 없을까?

        있다. dynamaic_cast를 사용한 경우다. 아마도 limitation으로 남겨야 할 것이다.

        - dynamic_cast나 c cast를 사용한다면?
          - MyObject origin(is_const = true);
          - Node& one = origin;
          - MyObject& my = dynamic_cast<MyObject&>(one); // ok
          - my.print();
          - // 원래는 밑에처럼...
          - TRefer<MyObject> get = [one.to](http://one.to/)<MyObject>();
          - if(get.isNull())
            - return;
          - TRefer<const MyObject> cget = [one.to](http://one.to/)<const MyObject>();
          - if(cget.isExist()) {
            - cget->print(); // err. print() is nonconst
            - const MyObject& out = *cget;
            - out.print(); // err. print() is nonconst
          - }
        - x 만약 Integer*를 들고 있는 native클래스가 런타임에 적당한 객체를 ptr에 집어넣는다면?
          - class MyObject {
            - Integer* age; // 멤버변수는 visible하게 할 수 없다.
            - Integer& getAge() { return *age; }
          - }
          - --> 런타임에 ptr를 멤버변수에 집어넣으려면 멤버변수를 알 고 있는 native가 해야 한다. native에서 Integer 타입을 dynamic_cast나 C cast를 하지 않는다면 to밖에 없다.

  - v 어떤 객체A의 멤버변수나, scope안에 있는 경우

    - native가 멤버변수를 꺼내려면 반드시 1번은 to를 써야한다.

  - 이미 native 가 자신의 모듈에 멤버변수를 추가하였다면 멤버변수는 일단 invisible하며 월드가 멤버변수릉 땡겨올려면 메소드의 반환형을 사용해야 하며 TNativeMethod는 Refer로 이걸 감싸서 넘겨준다.

  - 다시말하면 Native에서 만든 모든 occupiable은 사실상 refer로 쌓어있게 된다.

- 고찰내용

  - 1안 Refer와 Object 모두 isConst를 갖게 한다.
    - isConst는 Node에 속해 있어야 한다. 왜냐하면 우리는 Node 기준으로 작업을 하니까. 그렇지 않으면 동적캐스팅을 계속 써야 한다.
    - 왜 Object도 isConst가 있어야 하는가?
      - 그렇지 않으면 occupiable도 Refer를 둬야 하기 때문이다.
    - Object가 const일때 어떻게 되는가?
      - 모든것은 call()로 이루어진다. 따라서 call() 안에서 isConst()이면 call() const로 redirection 하면된다. 그러면 call() const는 isConst()가 true인 Refer를 반환할 것이다.
    - Method도 const 여부가 필요하다.
      - 단 Method 자체가 const 가 될 필요는 없다. (사실 상관은 없다. 어짜피 method에서 할 수 있는게 뭐가 있다고. 대부분은 그냥 fptr로 redirection하는게 전부잖아) 여기서 알수있다는 것은 Validation에 사용하기 위한 부분 뿐이다.
    - Native에서 const로 만든 객체가 있다. 이건 어떻게 Managed에서 const로 노출되게 할 것인가
      - const T& 가 반환형인 경우에는 METHOD 매크로가 TRefer<const T>(fptr의 반환값) 을 담아서 이걸 반환할것이다.
      - World에서는 모듈개발자가 클래스의 멤버변수를 visible하게 할 수 없다. 따라서 const 인 멤버변수를 어떻게 visible하게 할 것인가는 고려하지 않아도 된다.

- [v][v] const로 인해서 클래스 분할문제와 Native visible 문제
  - 포인터를 대신 하는 클래스들은, const 여부를 고려해야되기 때문에 같은 역할을 수행하는 2가지 버전(const 버전과 nonconst버전)으로 쪼개져야 하는 경우가 많다. 이때 World에서도 const버전과 nonconst버전을 2개다 제공해야하는가에 대해서 헷갈리기 시작한다.
    - CIterator, Iterator, TWeak, TStrong, Refer, CRefer 등..
  - 결론 : visible 하게 되는 것은 World에서는 별도의 클래스로 구분 하지 않는다. --> #CRefer는_존재하지_않는다 참고
  - 왜냐하면 Node 클래스의 의의는 구체클래스가 뭔지 몰라도 사용할 수 있다! 라는 것이다. 그외의 클래스 계층을 타는 것들은 native에서만 유요한 것이며 Managed의 const와 native의 const가 불일치 되어 일어나는 문제가 없다. 그래서 이것들은 기존대로 계속 진행하면 된다.
- [v][v] Method의 const
  - native동작
    - Method도 const여부가 있다. 인터프리터는 월드코드를 읽고나서 validation을 통해 이 함수가 const인지 nonconst인지 검증하기 위해 자체적으로 판단해야 한다. --> #인터프리터는_어떻게_이_함수가_const인지_판단하는가
    - **따라서, Method는 isConst()인지 아닌지를 스위치로 onoff할 수 있으며, 이 값을 바꾸기만 하면 thisptr로 Object가 C++에서 const가 붙어서 나오는지 아닌지를 결정하게 만들어야 한다.**
      - Method는 _is_const 멤버변수를 갖는다. CREPL이 적용되면 인스턴스는 동일하되, 변경만 일어나는 경우도 있을 수 있기 때문에 CMethod 식으로 별도의 클래스를 만드는 건 적절치 않다.
      - Method가 isConst() == true일 경우, thisptr가 const Object& 로만 나와야 한다는 걸 의미한다.
  - world동작
    - 메소드의 const는 c++처럼 뒤에 적으면 된다. nonconst로 확정하고 싶으면 variable을 적으면 된다.
      - class My
        - void print(const int a, int b)
        - void print(const int a, int b) variable
        - void getAge() const
    - variable은 변수 앞에 붙여야 하나, 기본적으로 생략가능하다.
      - variable My mine = ...
      - My mine = ...
  - 1안
    - thisptr를 최종적으로 사용하는 곳은 어디일까
      - ManagedMethod -> scope.stack(msg.getTail()); // 여기에서 thisptr을 꺼내서 objctspace 갱신
      - NativeCaller에서 msg.args 로부터 implicit 캐스팅을 하려는 시점 -->
    - if(Method::isConst())
      -
- [][v] Method auto const 컨셉
  - 함수 뒤에 const나 variable을 적지 않으면 auto가 적용된다. auto는 컴파일러가 이 함수가 무엇인지 알아서 판단해서 적어주게 된다.
  - c++에서의 const는 컴파일시에 제어장치다. 즉 사용자가 컴파일 하기 전에 이함수가 const라는 걸 알고있어야 효과가 발휘된다. 그래서 c++에서는 auto const라는 걸 만들기에 적합하지 않다.
  - 그러나 World는 CREPL 기반이므로 빌드라는 것이 없고 "코드의 변경 == 소프트웨어의 변경" 이다. 즉각적으로 소프트웨어가 재구성되어야 하므로 사용자가 편집한 이 함수가 const인지 아닌지를 인터프리터는 ide에게  전달하고 ide는 이걸 intelisense 같은걸로 색으로 표시하여 개발자에게 보여줄 것이다.
    - 이게 가능한 이유는 "월드lang은 visual programming language로써, 그래픽 요소를 나타내줄 수 있는 프로그램(=툴)과 한 몸이다" 라는 방향성을 갖고 있기 때문이다.
  - 구현은 매우 단순하다. validation에서 어짜피 인터프리터는 함수가 정말 월드코드대로 const인지를 체크해야한다.(에러체크를 위해) 그 체크 결과를 그대로 Method.isConst()에 set 해버리면 된다.





### [x] CRefer는_존재하지_않는다

- CRefer가 존재하는 이유는 isConst()인 Refer는 Native사용자가 get() const 를 해야 한다는 걸 빌드타임에 강제하기 위함이다. 따라서 Refer와 다르게 CRefer는 get() const 만 갖고 있게 된다.
- 하지만 문제는 Native개발자가 접하는 클래스는 Refer가 아니라 Node다. 따라서 이 시점에서 구체클래스를 가져오는 방법은 to를 사용하는 것이며 설사 Node가 isConst()라고 하더라도 C++의 const는 아니기 때문에 to<T>() 함수가 호출 가능하고 반환값은 null을 가리키는 Refer가 된다. 즉 CRefer(혹은 const Refer)를 만들어봤자 결국 사용자는 to<T>()를 하고, 반환값이 null이 아닌지를 확인 한 후, null이면 to<T>() const를 다시 호출해야 하는 식으로 가야 한다는 것이다.
- 어짜피 CRefer로 구체클래스를 뽑아내지 않으면 빌트타임에 const 여부를 강제할 수 없다. 따라서 그럴바에야 차라리 CRefer와 Refer를 통합시켜서 클래스 1개라도 더 줄이는게 좋은 선택이라고 판단된다.

### [x] Refer는_const를_정보를_가지고_있다.

### [x] Refer는_const_T_캐스트가_되어야만_한다.

- 요구사항

  - //    TODO: const cast.
  - //        Refer는 알다시피 World의 const를 구현하는 핵심 클래스다.
  - //        Node& n = Refer(const T&..);
  - //        [n.to](http://n.to/)<T>(); // REJECT. return Refer(Null)
  - //        T& cast = n.toSub<T>(); // REJECT. cast.isNull() == true.
  - //        const T& cast = n.toSub<const T>(); // OK.
  - //        Refer& cast1 = [n.to](http://n.to/)<const T>(); // OK. cast1->isNull() != true
  - //    위의 코드가 가능하도록 해야 한다.
  - Refer<const T>().cast<T>()가 나오면 거절해야 한다.
    - 예) Refer<const Object>().cast<Object>()시 null된 Object가 나와야 함.
    - 예) 그러나 Refer<Object>().cast<const Object>()는 정상적으로 나와야 함.

- 참고 -> #명시적캐스트에서_다운캐스팅으로_반환된경우만_isConst함수가_영향력을_발휘한다. , #명시적캐스팅

- \1. Refer::to()에서 다운캐스팅이 되서 나올것 같으면 isConst 확인해서 null로 가도록함

- \2. Refer::toSub()에서 isConst() true면 null로 나감.





### [x] Node는 isConst()를 가지고있다. Method는 isConst() == true면 method에서 사용하는 thisptr가 const Object가 되어야 한다.

- Stmt는 msg를 구성할때 World코드상 const로 되어있다면 msg 맨 뒤에 Refer<const Object>()로 넣어두고, nonconst라면 msg 맨 뒤를 Refer<Object>로 넣어둔다. (Msg의 맨 뒤는 실행시마다 변경되는것이다)
- Method는 isStatic()이 false일 때만 msg 맨 뒤에서 OBject를 꺼내야 하는데, isConst()가 true면 cast<const Object>()를 한다. 만약 Stmt는 Msg 맨 뒤에 Refer<const Object>()로 넣어뒀는데 Method는 refer.cast<Object>()를 하게 되면 NullRefer가 나오게 된다. 이것은 Refer<const T>의 동작이다. --> #Refer_const_T_캐스트가_되어야만_한다
- Method는 가져온 object를 scope에 넣는다. stack(*Refer<Object>);
- 이후는 #Scope에_const_member만_넣어야_한다  를 따라간다.
- 참고로 Native환경에서 Method를 실행하고 싶은 경우에는 call(msg)혹은 run(msg)에 들어갈 Msg 맨 뒤에 Refer<Object>()로 thisptr를 직접 채워넣어야만 한다. 이런 시나리오가 많지 않을것으로 여겨지기 때문에 run(thisptr, msg) 같은 걸 만들어 주진 않을 계획이다.



### [v] const...뺄까?

* 코드가 너무 복잡해짐. 이 언어는 가볍게 배우고 빨리 실습해보고.. 이랬음 좋겠다.


### [v] 문제#2 const 여부를 변수에 표현하지 않으면 너무 가독성이 떨어진다 --> 맞다.

  * 일반적인 타입 정보는 그게 정확히 무엇인지는 중요하지 않고 사용자가 쓰려고 하는 API를 이 타입이 가지고 있을 것이 라는 것만 중요하다. 그래서 타입을 표기할 필요가 없다.

  * 그러나 const 여부는 사용자가 파악하고 있어야 한다.

  * 그러므로 const는 사용자가 정의하도록 유도하는게 맞지 않느냐?

    ```cpp
    [ ]1: #p = getPerson()
    [v]2: p = getPerson()
    p.getName()
    p.setName("new") // compile error.
    ```

### [v] 문제#3 const의 표기법

  ```cpp
  [v]1: age = #int
  [v]2: age = int
  ```

  - 2는 int에 의해서 const가 결정된다. 묵시적으로. 사용자는 알아서 캐치하자.

  - 1는 int는 nonconst이나 그걸 const 붙일 수 있다.

    ```cpp
    p = Person() // p는 nonconst
    p1 = p // p1은 refer
    p1.name = "don't change" // 변경이 가능.
    p2 = #p // p에 const를 부여한 것이다.
    p2.name = "compile error" // 에러.
    ```



  #### [ ] 문제#4

  ```cpp
  #Person
      name = "unknown"
      print(void)
          c.out("name=${name}")
  p = Person // p는 const Person의 refer다.
  // p.print() 안된다.
  p1 = Person() // 된다. Person()은 nonconst Person이다.
  p = p1 // 안된다. p 는 const Person이므로.
  ```

  * 일반적인 const 예제를 만들어보면서 위의 문제를 해결해보자

  * 보통 언어들의 const 경우,

    ```cpp
    const Person& p = ...
    // p.setName()
    // Person& p1 = p
    Person& p1 = ...
    p = p1
    void cfoo(const Person* p);
    void foo(Person* p);
    cfoo(&p)
    cfoo(&p1)
    //foo(&p)
    foo(&p1)
    ```


    #Person p = ....
    // p.setName()
    // Person p1 = p
    Person p1 = ...
    p = p1
    void cfoo(#Person p)
    void foo(Person p)
    cfoo(p)
    cfoo(p1)
    //foo(p)
    foo(p1)
    ```
    * 따라서 const의 동작 자체는 별반 다르지 않다.
    * const는 const -> nonconst로 이행하는 것만 막는다.
    * 한번 const가 되면 계속 const가 된다.
    * 따라서 const는 이 타입은 절대 변하지 않는다는 걸 보장해준다는 것이다.

  * 여기서 정의한 월드 문법의 경우,

    ```cpp
    p = ... // ...은 const Person임을 암시한다고 하자.
    p1 = ... // nonconst이다.
    // p = p1 에러
    p = p1
    cfoo(p = #Person)
    foo(p = Person)

    cfoo(p)
    cfoo(p1)
    foo(p)
    foo(p1)
    ```

  #### [v] 문제#4 sharable과 const

  ```cpp
  #Person
      name = ""
  Chelsoo = Person
  ```

  * [x] Chelsoo는 const인가? --> 네.

  ```cpp
  age = #int
  age1 = age // age1은 occupiable이므로 const가 아니게 된다.

  he = #Person()
  him = he // him은 sharable이므로 const가 된다.
  ```

  - sharable이면 const가 유지된다.
  - occupiable이면 const는 무시된다.



### [v] const 변수를 만드는 법?

```cpp
[v]1: #age = 25 // 숫자는 자동 const.
```

* const 된 변수로부터 복제 될때는 const가 되어야 한다.

  ```cpp
  // c++
  const Person& getOneOfPerson(int val) {
      Person* arr[] = {new Chelsoo(), new Marry(), ...};
      return *arr[val];
  }

  const Person& p = getOneOfPerson(2);

  // world
  #getOneOfPerson(int val)
      arr = [Chelsoo(), Marry(), ...]
      return arr[val]
  #p = getOneOfPerson(2)
  ```

## [v] 구현이 없는 함수를 어떻게 정의할까?

* 구현이 없는 블록문 같은 경우도 있을 수 있을 것이다.
  * if a == 5
  * else
    * ....

* [x] 1안 --> 반환형을 적지 않았다. 그러니 함수호출이다. 명확한 문법이다.

  ```cpp
  print() // --> 이미 함수 호출 처럼 보이기 시작하지 않은가?

  app,
      main()
          print() // --> 자, 이 print는 print()라는 함수의 호출인가
                  // 아니면 print() 라는 클로져를 정의한 것일까?
  ```

* [x] 2안

  * 파이썬 방식

  ```cpp
  print() none

  app,
      foo(int(str) func, str msg)
          func(msg)

      main()
  ```

* [x] 3안 - 메소드입니다 라는 특문을 넣는다.

  ```cpp
  app,
      foo(int(str) func, str msg) ->
          ret = func(msg)
          c.out("ret=${ret}")

      main()
          foo(?(str msg): msg.len,"hello")
  ```

### [v] 현재안
* 함수 정의는 반드시 앞에 반환형이 와야 한다.
* 인자리스트에서 변수명은 생략이 가능하다.
* 함수 body가 없다면 null을 반환하는 빈 메소드이다.
```namu
void foo(int a, int b)
    retfun
void foo1(int a, int b) // 위와 동일하다.
void foo2(int, int) // 위와 동일하다.

foo(5, 6) // 함수 호출이다.
```





## [v] const correctness라고 한다.
* C++은 객체를 const 하는 방법과 refer에 const를 붙이는 방법 모두 제공한다.
* java는 객체를 const 비스무리하게 하는 방법은 제공하지만 refer에 const를 붙이는 방법은 없다.
* swift는 refer를 const화하는 방법만 'let' 이라는 키워드로 제공한다.
  객체 자체를 immutable로 하고 싶다면 처음부터 struct로 만들어야 한다.
  let으로 만든 참조자의 값을 var로 assign 하는 것도 된다. 왜냐하면 객체를 const 하는게 아니라 참조자를 const하는 거니까.
  ```swift
  class Foo {
    var age = 20
  }
  let f = Foo()
  f.age = 5 // ok.
  var f1 = f // ok.
  ```

* javascript도 const라는 키워드로 refer만 const를 하고 있다.

### [v] 1안: const 빼자.
C++ 방식이라면 유용하겠지만, 대부분의 언어는 그렇게 까지 하지는 않는다. 그리고 refer만 const가 된다고 해도 크게 유용한가는 좀 의문스럽다.

* 단, immutable object에 대한 const는 의미가 있다.
  이를 테면 int를 const하게 되면 c++의 const와 같은 효과가 난다. 

* 키워드가 줄어드는 효과는 있다.

### [x] 2안: const는 refer만 된다. (immutable객체의 경우 완전 const화) 변수명에 붙인다.
```namu
def Animal
    DEFAULT_NAME := "default"

    str getName(): defaultName  // 반환형은 변수를 만드는 것이 아니기 때문에 const를 붙일 수 없다.
    _$#age := 1 // 최악의 경우 특문 3개가 붙는다.
    int getAge(): age

    int _foo() // 메소드에도 #는 붙이지 않는다.

def app
    Animal[] #anims1 // anims2가 초기화가 되어야 anims1이 초기화가 가능한경우, 참 난감하다.
    Animal[] #anims2
    #beav := Beaver anims1[0]
    #anim := anims2[0]

    beav.walk() // ok
    beav.set("good") // ok
    anim = null // err
```

* 이 경우 const는 생성 이후 1번은 set이 가능해야 한다는 규칙등이 들어가야 한다.
  매끄럽지 않은 문법이다.

### [v] 1안으로 결정 이유
* C++ 수준의 const라면 상당히 유용할 수 있다. 하지만 배열이나 참조자, 객체 같은 개념과 같이 섞이면
  그 문법이 처참한 수준으로 복잡해진다. 단적인 예를 들어준다.
    ```namu
    #Animal#[#str] #getArray(#str nameOfArray) // 쉽게 이해가 가는가?

    // 해설하면 이렇다:
    #int // const int
    #Animal[] // 원소가 const 인 배열 타입
    Animal#[] // 배열이 const인 타입
    #Animal#[] // 둘다.
    #Animal#[#str] // 원소가 const Animal이며 키가 const str인 const 배열타입.

    void #foo() // const this를 표현하기 위해서 메소드에도 const.

    // 결론: 인자로 const str을 받으며 `원소가 const Animal이고 key가 const str인 const 배열'을
    // 반환하는 const 메소드.
    ```

* 그래서인지 많은 언어들에서는, 이정도로는 지원하지않고 refer만 const하는 수준까지만 지원한다.
  그러나 이럴 경우 C++에 비해서 그렇게 유용하지 않다.
* 실무에서 자바로 개발한 경험에 비추어 볼때 가장 많이 constness를 쓴 것은 final static으로 
  상수를 정의한 것이다.
  ```java
    class My {
        public final static DEFAULT_NAME = "wow";
    }
  ```

* 그러나 이 기능만을 위해서 키워드를 넣는 것은 말이 안된다.
  오히려 상수화 자체를 없애버리는 대신에 const 키워드를 제거하는게 득이 된다고 봤다.
    * 그 이유로, DEFAULT_NAME을 본 순간 이게 const라는 건 누구나 안다. 정상적인 개발자라면.
      그리고 거기에 새로운 값을 넣으려는 사람도 없다.
      ```java
        My.DEFAULT_NAME = "have you ever seen a person who tried this?";
      ```
* 그리고 const가 빠지면 특문의 조합이 최대 2개까지만 나오므로 그렇게 부담이 되지 않는다.
  3개가 붙으면 좀 너무하다 싶어지기 때문이다.
    ```namu
    def my
        _$#age := 5 // private static const int age = 5;
    ```

* 그래서 상수로 쓰고 싶은 것은 대문자 스네이크로 표현시키고, const 기능은 지원하지 않는 것으로 했다.

























# 프로그램 구조

## [x] 기존안

### 엔트리포인트의 알고리즘

- Application라는 클래스가 모든 프로그램에 반드시 있어야 한다. 이 함수의 main() 함수는 프로그램이 실행되었을때 딱 1번 실행된다.



### [x] 엔트리포인트 --> Main.main

- 1안 Application이라는 클래스에서 상속받은 물건이 1개는 있어야 한다.
  - 어떤 클래스를 돌려야 하는지는 월드가 상속을 따져가면서 판단해야한다.
- v 2안 Main클래스는 아무도 건들지마! 여기 안에 있는 main함수를 실행할꺼야
  - 라이브러리를 배포할때는 Main함수를 넣으면 안되겠지. 그러나 시스템적으로 이걸 막지는 말자.



### [x] res main() 과 res main(str[] args) 를 모두 지원하자


## [v] 문제가 무엇인가?
* worldlang에서 stmt라는 건 없고, 모든 것은 expr이다.
* 변수를 정의하는 것, 메소드를 정의하는 것 전부 expr이다.
* 그러므로 .namu 파일에서 바로 expr 쓸 수 있는 것은 당연한 것이다.

```namu
// test.namu 파일:
def A // 이것도 expr이다.
    age := 3

globalValue := "wow" // 이것도 expr이다.

// [v] 그러면 이것도 올 수 있는가? --> 예.
for c in globalValue // 참고로, c는 변수를 정의한 것이다.
                     // 앞서 c라는 변수가 있었다면 컴파일 에러가 된다.
    c.out(c)
```

### [v] 구현은?
* 만약 expr로 취급하지 않는 버전을 구현할 수 있다면, expr로 취급하는 코드도 구현할 수 있어야 한다.

#### [v] 1안: 2PASS
* 1PASS: 파서에서 넘어온 토큰이 타입 정의와 관련된 부분이면 origin node를 만들어둔다.
  메소드 body, 초기식, expr 과 같은 타입과 관련되지 않은 부분들은 AST 상태로만 만들어서 보존한다.
* 2PASS: AST를 탐색하면서 이미 만들어진 origin node 배열을 참고삼아 코드를 완성한다.

* [?]어떻게 AST를 구성되며, 만들어진 타입과 이 AST를 어떻게 바인딩 할 것인지등은 나중에 결정하자.

## 컴파일러는 엔트리 포인트로 해당 프로젝트의 app의 파생 객체를 찾는다.
```namu
// worldlang의 predefined 객체: app
def app
    // 앱 이름
    // 앱 속성
    // 디버그 속성
    // 컴파일러 속성 등등
    void main(str[] args)


// 개발자는 app을 상속한 origin node를 하나 만들어둔다:
def person
    @ctor(int newAge): age = newAge
    age := def() from 0
        _set()=>// person 객체내에서는 age에 변수를 적용할 수 있다.

people := [person(0), person(1), person(2)]
sum := 0
for p in people
    sum += p.age
// sum := for p in people: sum += p.age 와 같다. for은 마지막 수행 결과를 그대로 반환한다.
c.out("sum=$sum")

def myApp from app
    void main(str[] args)
        if args.len < 1: retfun rOutOfBoundary
        c.out("sum of people($people.len)=$sum")
```
* 프로그램이 시작되면 먼저 각 파일의 line by line으로 실행한다.
    * 어떠한 파일이 먼저 시작될 것인지는 spec상으로 보장하지 않는다.
* 그리고 나서 app의 상속 origin 객체를 찾아 main을 실행한다.
    * main은 오직 1종류 void main(str[] args) 만 제공한다.
    * main의 결과 반환값은 void 이다. 그러나 exception이 반환된 경우 OS에 -1을 반환한다.




























# 컨테이너

## 배열은 python의 튜플처럼도 쓸 수 있다.
* 파이썬은 Tuple과 배열을 구분하고 있지만,
* world는 같이 가져가기로 했다.
* "복수 할당 연산 문법"을 통해서 이 문법을 사용했을때에 한해 한시적으로 가능하게 한다.
* world에서 python의 튜플의 기능중 가져오고 싶은 것은 복수개의 변수를 정의하고 넘기는 기능뿐이다.

* 배열의 정의는 다음과 같다.
```cpp
(3, 5) // 상수인 배열이다. int[] 이다.
(int, int) // 역시 int[]인 배열이다.
```
* 복수할당 문법은 이렇다.
```cpp
(rvalue, ...)    = 혹은 :=       (lvalue, ...) // 단 양쪽의 인자수는 맞아야 한다.

(age, name) := (3, "name") // (3, "name")은 배열이다.
```

* 자세한 예제와 edge 케이스를 보자.

```cpp
(int, int) koo()
	// koo는 배열을 반환하긴 하는데, 복수할당문법으로 반환하는 것이다.
	// caller는 복수할당 문법이나, 배열로  반환값을 받을 수 있다.
	ret (3, 5) // 그러나 callee는 반드시 선언한 대로 복수 할당문법으로 반환한다.

void main()
	(a, b) := koo() // a1은 int, b는 int.
	(a1, a2) := (3, "wow") // a1은 int타입, a2는 str타입이란걸 컴파일러는 기억한다.

	// (a1, a2) = (a, b) --> 에러. a2 = b는 타입이 달라서 될 수 없다.
	(a1, a2) = (a, int b) // ok. b가 int로 캐스팅된다. int는 str을 변환할 수 있다는 걸 컴파일러는 알 고 있다. 그래서 에러가 나지 않는다.

	arr1 = (a1, a2) // arr은 var 타입. int와 str을 모두 받을 수 있는걸 var 뿐이다.
	arr2 = (str a1, a2) // arr2는 str[].
	arr2 = arr1 // shallow copy를 시도한다. 컴파일러는 에러를 내지 않는다.
	// 그러나 런타임에 var[]를 str[] 레퍼런스에 넣었으니 에러가 난다.

	// (a1, a2) = arr1 --> 에러. 복수할당의 뒤에는 같은 갯수의 인자가 들어간 상수 정의된 배열이 와야 한다.
	(a1, a2) = (arr[0], arr[1]) // --> 일단 ok.
	// 그러나 만약 arr의 size가 2보다 작으면 런타임 에러가 난다.

```


## 기본
```cpp
import console

def app
    void tuple()
		//	튜플: (<표현식expr>, ...)
		//	튜플은 각각의 타입으로 정의된 값들을 묶어놓은 특이한 컨테이너.
		//	사용자는 이 컨테이너 자체를 접근하여, iterate 불가능하며, 오직 worldlang
		//	인터프리터만 컨테이너 자체를 다룰 수 있다. (즉, worldlang 개발자는 튜플타입 변수를
		//	만들 수 없다)
		//	단, worldlang개발자는 "statement 는 expression #2 규칙" 에 의해,
		//	튜플에 들어갈 원소에 이름을 붙여서 이를 직접 다룰 수 있다.
		//	(튜플에 들어간 각 원소는 sharable 속성을 무시된다.)
		//	이를 이용해 다른 객체에 값을 편하게 전달해주는 용도.

		(3, "apple") // 각 원소의 타입이 모두 다름.
		def Person // 중첩클래스.
			a = 0
			name = ""
			grade = 2.5

			void print(): console.out(name)

			void assign((float new_grade, str new_msg), int new_a)
				grade = new_grade
		    	msg = new_msg
				a = new_a

		p = Person(): p.name = "Donald": p.print()
		// ;은 다음 stmt를 이어서 한 줄에 서술 가능.

		str = msg = "Jung-un"
		p.assign((3.0/2, msg), 24) // 인자msg와 파라메터new_msg는 이름이 달라도 된다.

		// 변수 정의 또한 표현식이므로 튜플내에서 사용 가능. 정의된 변수는 해당 scope
		// 내에서 유효. (사용된곳이 블록문 안쪽이면, 해당 블록문이 종료까지 유효.)
		// 튜플과 할당연산의 경우, 객체의 소유한 멤버와 순서대로 할당.
		p.print() // "Jung-un"

		msg = "Denis Trillo"  // msg는 현 scope내에 접근.
		p.print() // "Jung-un"
		// p.name과 msg는 별도의 인스턴스.

    (int, str/*변수명 생략가능*/) map(int age, str name)
		// 사실, 인자리스트(int age, str name)도 튜플이며, 함수호출도 튜플이다.

    	//	맵: <타입>[<타입>]
        dict = [(3, "apple")] // 리스트를 통해 초기화 된다.
        dict.push(3, "apple") // 런타임 에러
        dict["apple"] = 4
        dict["banana"] = 5

        for (int x, str name) in dict // dict의 원소들인 튜플을 (x, name)으로 된 튜플로 복사
        	console.out("x, name=" + x + ", " + name)

       	return (dict["apple"], "apple") // 복수개의 값을 튜플로 반환

    void array()
		// 배열: <타입>[]
        // 문법을 보면 알겠지만, 배열은 사실 맵의 특수한 종류 중 하나. ("[]" 안 int가 생략된 맵)
		arr = []
		for int n in ..3 // ..3은 0에서 2까지
			arr[n] = n	// c.f) arr[2] = 2
		arr[3] // 런타임 에러

		for n in [0, 1, 2] // [x, y, z, ...] 은 배열의 상수 표현식
			console.out(n)

        arr.push(5)
        arr[3] == 5 // true

        arr2 = arr
        arr2 != arr // true
        arr2.isSame(arr) // true

    void sequence()
    	// 시퀸스: <정수> .. <정수>
    	// 범위를 나타내기 위한 컨테이너. 튜플과 동일하게 사용자는 이 컨테이너 자체를
		// 접근하여, iterate 불가능하며, 오직 worldlang 인터프리터만 컨테이너 자체를
		// 다룰 수 있다.
        // .. 기준으로 한쪽이 없는 경우, 극대(int의 양의 최대값)와 극소(int의 음의 최소값)
		// 를 나타낸다.
        sum = 0
        for n in 1..3 // 1..3은 [1, 3)
        	sum += n

       	msg = "hello world"
       	console.out(sum + msg[5..]) // 5 이상을 뜻함

    void conversion()
    	// 본래 다룰 수 없는 튜플과 시퀸스 컨테이너를 다음과 같이 변환하면 다룰 수 있음.
    	//	튜플은 임의의 타입으로 정의된 변수의 집합:
        tup = ?[] (0, "banana")
    	// tup = (0, "banana") 는 컴파일에러

    	//	시퀸스는 시작과 끝, int 2개로 변환 가능.
    	(int start, int end) = 3..7
        sequence = int[] (start, end)
    	sequence[0] = 10
    	if sequence[0] != start
    		console.out("diff: sequence[0]=" + sequence[0] + ", start=" + start)
    		// "diff: sequence[0]=10, start=3"
    	seq1 = str[] ("wow", "hello", 1234) // 배열은 튜플을 받아들임.
    	//int[] seq2 = (1234, "1234") // 컴파일에러. str -> int는 implicit 캐스팅이 되지 않음.

		// 명시적 타입 캐스팅explicit typecast: (<타입>) 식별자
		// 명시적으로 다른 타입으로 형변환 시도하는 문법이다. 다음의 규칙을 따른다.
		//	1.	명시적 형변환은 묵시적 형변환보다 더 많은 변환을 처리할 수 있다.
		//	2.	임의의 타입이 모든 타입으로 형변환을 지원하는 것은 아니다.
		//		어느 타입으로 형변환이 가능한지는 각 타입의 개발자가 정의한다.
		//	3.	형변환 가능 여부는 컴파일 타입에 확정된다. 지원되지 않는 형변환을 시도할
		//		경우 에러로 간주한다.
		//	4.	형변환은 해당 타입의 sharable, occupiable 속성 관계없이 항상 인스턴스를
		//		발생시킨다.
		//
		// 어떻게 str객체는 int로 명시적 타입캐스팅을 지원하는가:
		// 형변환을 지원하고 싶으면 지원하고 싶은 타입에 생성자를 확장해놓으면 된다.
		// e.g.	+int
		//			int(#str val)
		//				...val을 int로 변환...
		//		str name = ".."
		//		(int) name // 인터프리터는 int(#str) 생성자를 토대로 형변환을 시도한다.
		//
		// 묵시적 형변환implicit typecast: <자동으로 수행됨>
		// 특정 상황에서 인터프리터에 의해 자동으로 수행해 주는 형변환이다. 다음의 규칙을
		// 따른다.
		//	1. 파생클래스를 부모 클래스로 형변환
		//	2. primitive 변수들 간의 형변환(e.g. float -> int)
    	seq2 = int[] (1234, int "1234") // ok.
    	tup = ?[] (1234, "1234") // ok
    	seq3 = int[] tup // 컴파일 ok, 그러나 런타임 에러

    	msg = ""
        map1 = ["banana": 1, "apple": 2]
    	for (str e, int n) in map1 // 튜플과 배열은 사실 맵이며, 맵은 (값 1개)와 (값1개, 키1개) 에 대한 for-in을 지원한다.
    		msg += "$e + ${seq2[n]}" // if n >= seq2.len throw exception.
    	console.out("seq1=" + msg) // "seq1=banana1234 apple1234"

		//	단, node로 취급하기 때문에 에러 사전 탐지 불가.
    	for e in tup // e = ?
    		console.out(e) 	// "1234"
    						// "1234"

	void main()
		tuple()
		if 1
			(str x, str y) = map(1, "Jae-in")
			console.out("x=" + x + ", y=" + y) // "x=4, y=apple"

		// console.out("x= " + x + ", y=" + y) // 에러
		array()
		sequence()
		conversion()

/* 결과:
	Donald
	Jung-un
	Jung-un
	x, name=4, apple
	x, name=5, banana
	x=4, y=apple
	0
	1
	2
	3 world
	diff: sequence[0]=10, start=3
	0
	banana
*/
```


## 기본

[][v] Container 기본

- 요구사항
  - Range Based For 를 지원해야 한다.
  - Container는 Object이다.
  - Object만 담을 수 있어야 하는가? Array<int> 같은 건 바로 안되나? --> 안된다.
  - type T 특화는 어떻게 이루어지는가? --> 기존 to<T>, to() 조합해서 써라.
    - Weak<Node> get()을 하면 사용자가 귀찮아진다.
    - 귀찮지만 어쩔 수 없다. 여러 타입이 한 Array에 안에 들어가려면 감수해야 한다. 대신 이걸 cast하는 방법에 대해서 논의해보자.
    - v 1안 기존의 to<T>() or to(Class&) 를 조합해서 쓰라고 한다.
      - arr[3].to(Classizer<int>())    ||    arr[3].to<int>();
    - x 2안 to용 get을 만들어준다
      - arr.getT<int>(3);
  -
  - 구체클래스에 대한 Container를 지정한 경우는 Weak, Bind에서 자유로워져야 하나? 아니면 모두 Bind에 묶인채로 쓰라고 해야 하나? --> 모두 Bind에 들어간다.Statement는
- 논리의 정리
  - Container의 목적은 월드에서 사용하기 위한 목적이다. 이게 가장 중요한 점이다. 물론 World는 Native와 양쪽이 통해있으므로 이것도 고려해야 한다.
  - Array<int>는 안된다. 월드 목적이므로 Node이상부터 가능하다.
  - Element의 타입은 어디까지 허용되나
    - v 1안 Container의 원소는 무조건 Bind<Node>다. 자바스타일.
      - 월드에서 사용할 수있어야 한다. 파서가 코드블럭을 만들때를 생각해보자. 1번은 쉽게 가능할 것이다. Array객체를 만들기만 하면 된다.
        - 물론 Native에서는 사용자가 만든 Array로부터 타입T특화를 사용하는 방법이 난감할 것이다.
      - 2번이라면 인터프리터는 모든종류의 사용가능한 조합을 들고 있어야 한다? --> 그렇지 않다. 월드는 배열에 타입이 없다. 자바스타일이다. 따라서 Array<Bind<Node>> 만 사용한다는 것이다.
      - 만약 Native에서 Array<Integer> 같은게 있다고 하자. 월드는 이걸 인식할 수 있는가?
        - 인식할 수 있다.
        - 하지만 이걸 사용할 수 없는게 Array에는 Integer외에도 다른 것도 공존할 수 있어야 하기 때문이다. 따라서 Array는 Bind<Node>가 맞다.
        - get(n).to(int) or arr[3].to<int>() 처럼 가야 한다.
    - x 2안 사용자 정의에 따라서 native에서는 Array<Integer> 같은 것도 사용할 수 있게 하자
  - get()의 반환형은 Bind<Node>가 아니라 Node&가 된다. 왜냐면 항상 Element가 Bind<Node>이므로. 조금 편해졌을 것이다.
- class Iteratable {
  - virtual const Result& move(int step) = 0; // step can be negative
  - virtual Node& get() = 0;
  - virtual bool isEnd() const = 0;
- }
- class Iteration : public Thing { // iteration is invisible
  - Iteration() {}
  - Iteration(Container& owner) : _cont(owner) {}
  - Container& getContainer() { return *_cont; }
  - Weak<Container> _cont;
- }
- class Iterator : public Object { // Iterator is visible
  - virtual const Result& move(int step) {
    - return _way->move(1);
  - }
  - This& next() {
    - move(1);
    - return *this;
  - }
  - This& operator++(int n) { return next(); }
  - This operator++() {
    - This to_return(*this);
    - next();
    - return to_return;
  - }
  - This& prev() {
    - move(-1);
    - return *this;
  - }
  - This& operator--(int n) { return prev(); }
  - This operator--() {
    - This to_return(*this);
    - prev();
    - return to_return;
  - }
  - bool operator==(const This& rhs);
  - bool isEnd() const {
    - if(_way->isNull()) return true;
    - return _way->isEnd();
  - }
  - bool operator bool() {
  - }
  - Node& operator->() {
    - if(_way->isNull()) return nulled<Node>();
    - return _way->get();
  - }
  - Bind<Iteration> _way;
- }
- class Containable {
  - virtual const Result& insert(Iterator e, const Node& newone) = 0;
  - virtual Node& get() = 0;
  - ..
- }
- class Container : public Object, public Containable {
  - int _length;
  - template <typename E, typename Lambda>
  - const Result& each(Lambda onEach) {
    - for(Iterator e=getStart(); e ; e++)
      - E& casted = e->to<E>();
      - if(casted.isNull()) continue;
      - if(onEach(casted) == ConsumedSuccessful)
        - return ConsumedSuccessful;
    - return Success;
  - }
  - virtual Iterator getIterator(int n);
  - Iterator getStart() { return getIterator(0); }
  - Iterator getEnd() { return getIterator(_length); }
  - int getLength() { return _length; }
  - int getLastIndex() { return _length - 1; }
  - Node& operator[](int n) { return get(n); }
  - virtual Node& get(int n) = 0;
  - const Result& set(int n, const Node& rhs) { return set(getIterator(n), rhs); }
  - virtual const Result& set(Iterator e, const Node& rhs);
  - const Result& insert(int n, const Node& rhs) { return insert(getIterator(n), rhs); }
  - const Result& insert(int n, const This& rhs) { return insert(getIterator(n), rhs); }
  -
  - virtual const Result& insert(Iterator e, const Node& rhs);
  - const Result& push(const Node& rhs) { return insert(_length-1); }
  - const Result& enq(const Node& rhs) { return insert(0, rhs); }
  - const Result& pop() { return remove(length-1); }
  - const Result& deq() { return remove(0); }
  - const Result& remove(int n) { return remove(getIterator(n)); }
  - const Result& remove(Iterator e);
- }
- class List : public Container {
  - **friend** class ListIteration : public Iteration {
    - ListIteration(List& owner) : Super(owner) {}
    - virtual const Result& move(int step) {
      - if( ! e) return NullPointerException;
      - List& list = getContainer().to<List>();
      - if(list.isNull()) return NullPointerException;
      - Datum* head = list._head;
      - if( ! head) return NullPointerException;
      - while(step) {
        - if(step-- > 0)
          - if( ! e) return AbortActionWarning;
          - e = e->next;
        - } else {
          - if(e == head) return AbortActionWarning;
          - e = e->prev;
        - }
      - }
      - return Success;
    - }
    - virtual bool isEnd() const = 0;
    - Datum* e;
  - }
  - struct Datum {
    - Datum* prev;
    - Datum* next;
    - Bind<Node> value;
  - }
- }
- 검색
  - nbool has(const T&) const;
  - windex find(const T&) const;
  - windex find([](const T& elem) {...});



### deepclone() 이 있어야한다

- Container는 사실상 Array<TStrong<T>> 이기 때문에 그냥 clone() 하게 되면 같은 T를 공유하는 shallow copy가 된다.



### Cell과 Array는 차이가 없다.

- Array는 Cell에서 remove, insert를 빼고, setElement로 대체한것이다. 와... 이걸 5년동안 눈치를 못채다니..



### bool container.at()

```cpp
1: if 2..5.at(3)
2: arr.at("namu")
3: msg.at('c')
```

임의의 값이 특정 변수가 가리키는 범위 내에 있는지를 알려주는 공통 메소드다.

#### 구현

1. 각 Origin 객체 개발자는 c++ 클래스에 물론 1개의 at을 작성

   class MyClass : public Object {

       bool at(int trg);

   };

2. 메소드가 NativeWrapper에 의해서 감싸지고 world는 at의 존재를 알 수 있음.

3. Node에 at의 일반 함수를 정의

   class Node {

       bool at(const Node& trg) {

           const Bool& ret = call(Msg("at", {trg})).get<Bool>();

           return &ret ? ret.get() : false;

       }

   };

4. 이제 c++ 개발자도 Node.at을 사용 가능

5. 월드 개발자는 자신의 org객체에 at을 작성

   def MyType MyOrg

       s1 = 2..3

       bool at(int n): n at s1

6. 월드는 해당소스를 파싱해서 ManagedObject("MyOrg") 를 생성하고 at이라는 메소드를 추가함.

7. 개발자는 at을 사용함

   ret = MyOrg().at(3)

8. 그러나 다음과 같이 사용은 불가능함

   arr = [MyType(), MyOrg()]

   for e in arr

       e.at(3) // 에러.

9. 그렇다고 Node.at을 wrapping 시켜버리면 문법적으로 에러 탐지가 불가능함.

#### 문법으로 할 경우

1. <a> at <b> 문법으로 파싱된다.
2. at이라는 keyword 로 판별되면, keyword 용 global 메소드 목록에 있는 "at"에 인자를 넘기도록 AST를 구성한다.
3. 런타임에 at keyword가 실행되면 인자인






















## [v] 그룹은 제거되었다 --> 타입리스트
* python은 그룹과 배열은 비슷한 컨테이너이지만 그룹은 const 화 된걸 지칭했다.
* world 기존안에서는 그룹과 배열은 같은 거였다.
  하지만 다음의 예제를 보고는 불가능하다는걸 알았다.
```namu
// 기존안에서는 배열을 괄호로 표현했다
(1,2,3,4,5) // 1..5와 같다.
arr := (1,2,3,4,5) // ok
val1 := 1
val2 := 2
arr2 := (val1, val2) // ok
(elem1, elem2).len == 2 // ok

(elem1, elem2) := (val1, val2) // ?
```
* (elem1, elem2)만 보았을때 컴파일러는 당연히 이걸 배열로 만든다.
  근데 이 배열이 lhs에 있을때만 multi 할당연산/정의으로 보는 것이다.
* [?] 이게 맞는가? 다른 방법은 없는가?

### [x] 1안 어떻게든 맞춰본다.
```namu
// 맞춰볼려고 해도 위의 배열관점에서 보면 문법은 잘못된 것이다.
(elem1, elem2) := (1, 2)
// 이건 뭐하고 같냐면,

arr := (elem1, elem2)
(1,2) := arr
```
* (a,b)를 배열로 보는 순간 이렇게 말이 안되는 현상이 나온다.
* (a,b)가 왼쪽에 있을때만 배열이 아니라 multi 할당으로 볼 수 도 있을 것이다.
  근데 그럴바에야 다른 기호를 써서 명료하게 하는게 훨씬 낫다.

### [x] 2안 다른 기호를 사용한다.
* 멀티 할당은 (, )를. 배열은 [, ]를 사용한다.

```
def base
    _age := 0
    @ctor(int age): this.age = age
    int say(): c.out("base"): age

def derive1 from base
    int say(): c.out("derive1"): age

def derive2 from base
    int say(): c.out("derive2"): age
    void foo()

// 문법:
// * 2가지 형태로 지원된다. grp의 정의와 사용
//  * 정의는 괄호 안에 인자의 수를 적고 정의연산 반대편에 매칭되는 인자의 수를 마찬가지로
//    괄호안에 적는다.
//  * 각 인자는 별도로 생성이 된다.
// * 인자 목록이 2개 이상이여야 한다. 1개면 그룹이 아니다.
//  * (a)는 우선순위를 위한 () 인지 구분이 안가며,
//    1개짜리는 의미가 없다.
// * grp은 메소드를 가지지 않는다. expr에 grp이 있으면 for문을 돌린것처럼 동작한다.
// * grp의 expr의 결과는 grp이 나온다.
// * 인자의 목록의 공통 base 타입과 인자의 갯수로 grp은 정해진다.
//   타입이 같아도 인자의 갯수가 다르면 다른 grp 타입이다.
// * group은 재귀적으로 정의될 수 없다. 너무 복잡해진다.
//   마찬가지 이유때문에 함수의 인자로 넘길수도 없다.
// * group은 배열로 assign 할 수 있다.
// * group은 상수적인 배열의 특성을 갖는다. 동적으로 size가 변하거나 정의할 수 없다.

(1,2,3) // ok

(a, b, c) := (1, 2, 3)
a == 1 // ok

grp := (a, b, c) // ok. grp는 int의 3개 원소를 가진 group
grp1 := (a, b, c, 4) // ok.
//grp = grp1 // err. 서로 다른 group타입이다.


(res1, res2, res3) := grp // ok.
res1 == a // ok
grp.say() // ok
(res1, res2, res3) = grp.say() // ok


// [x] grp의 특정 원소만 접근하고 싶다면? 그런데 grp이 배열 타입이라면?
// [x] 메소드가 값을 2개를 반환하는 경우, 호출자는 반드시 2개의 인자를 모두 적어야 한다.
// 쓰지도 않을 값인데 인자를 적어야 하는건 조금 귀찮을 것이다. 원하는 output 원소만
// 받을 수 있는 방법은?
// [x] grp이 많이 쓰일 수록 반복문이 더 많아지는 셈이된다.
grp.say();
.....
grp.say();
grp.say();

// 위의 것은 사실,
for e in grp
    e.say();
    ...
    e.say();
    e.say();




// 활용:
//grp.len == 3 // err.
//grp[0] == a // err.
//grp.add(x) // err.

grp.say()
//grp.foo() // grp는 base다.

arr := node[] grp
arr.len == 2
arr[0] == a
//arr.print() // err.
nodes.len

grp := (base, derive1, derive2) // grp는 base의 group타입.

// ,로 구분한다:
1,2,3 // ok
a, b, c := 1,2,3

int, float, char foo(int i, float f, char c)
    ret i, f, c
a, b, c := foo()

a1 := int
b1 := float
c1 := char
a1, b1, c1 := foo(0, 0, 0)


a := int, b := float // ok

def A
    _real := 0
    age := prop from int
        @get(): real
        @set(int new): real = new
    int, A foo(int age): A(age), age
    //(int, float), char foo(int i, float f, char c) // 재귀 안됨
        //ret ((i + c, c), i+f)
    int, float, char foo(int i, float f, char c): ret i+c, c, i+f

    // 배열로 보내면, caller가 batch 작업을 할 수 있음.
    node[] foo(int i, float f, char c): ret [i, f, c]
```

* group은 아직 실사용하기에는 구멍이 너무 많다.

* 타입리스트은 재귀 안됨

```namu
ai, af, ac := foo(1,2,3) // ok
arr := [a1, af, ac] // ok

[a1, af, ac] := foo(1,2,3) // x. 좌변이 객체1개.

arr := [foo(1,2,3)] // 지원 가능할 듯.
```

### [v] 3안 타입리스트을 배열로 캐스팅 문법
```namu
a1, a2, a3 := foo() // ok. a1는 int, a2는 float, a3는 char
arr := [a1, a2, a3] // ok. arr은 float[]으로 유도됨

// 위의 2줄을 하나로 줄인다면,
arr := float[] foo() // ok. 그러나 사용자는 float으로 유도해야 한다는 걸 알고 있어야 함.
```

#### 타입리스트도 하나의 객체다.
```namu
foo().len == 3
types := foo()
types.r0 // int
types.r1 // float
types.r2 // char
// for type in types // 에러. types는 1개의 객체이지, 배열이 아니다. 순회할 수 없다.
// 타입이 제각각 다르기 때문이다.

```






## [v] 컨테이너 간 캐스팅
* 오직 2종류의 컨테이너만 지원한다.
```namu
int[str] // str이 key이며 value가 int인 맵.
int[] // int의 배열 key. key가 int인 맵과 유사하다는 걸 알 수 있다.

int[]! // int의 배열인 타입의 null.

[1, 2, 3] // int의 배열
[2.5, 3.5, 4.5] // float의 배열
[] // 경로를 내보낸다. 왜냐하면 이렇게 하면 node의 배열로 인지한다.
// node 타입으로 인지할때에는 개발자가 명시적으로 node임을 적지 않을 경우 경고가 나간다.

// [ ] 은 타입을 유추한다.
arr := [1, 3.5, 4] // int -> float은 묵시적 변환이 된다. float -> int은 묵시적 변환이 안된다.
// 결과적으로 float[]과 같다.

arr := int[] // int[] origin객체를 가리킨다.

arr := int[]() // int인 배열을 만든다.

arr := int[] [3.5] // float[]이 int[]로 캐스팅 된다.
// 배열객체는 다른 배열객체로 캐스팅이 요청 받았을 경우 배열이 들고 있는 trait T
// 가 해당 캐스팅을 허용할 수 있는가로 결정한다.
// 명시적 캐스팅 float -> int는 허용된다. 고로 이 문법은 올바르다.
// array 객체는 캐스팅시, array객체가 들고 있는 type을 먼저 int로 변경하고,
// 원소들을 일괄적으로 순회하면서 float -> int로 캐스팅한다.

def base
def derive from base

baseArr := [base derive()]
arr := derive[] baseArr // base[]가 derive[]로 캐스팅시도한다.
// base.to<derive>()를 묻는 것이며, 명시적 캐스팅은 기본적으로 공변관계인 경우
// 캐스팅을 무조건 허용한다. 그러므로 올바른 문법이다.
// 이제 base[]객체는 캐스팅이 시작되면 먼저 자기가 들고 있는 type 객체를 derive로 고친다.
// 그리고 원소를 모두 순회하면서  derive()를 derive로 캐스팅시도한다.
// derive()는 자신이 그대로 나오면 되므로 별도의 immutable처럼 객체가 생성되지 않고 자신을 그대로
// 내보낸다. 결과 arr은 derive[]이며,
arr[0] === baseArr[0] // 가 옳다.
// 이는 base가 mutable 객체이므로 개발자는 이런 결과가 될것이라는 걸 쉽게 예측할 수 있다.

arr := int[] [] // node[] 배열이 int[]으로 캐스팅 된다. node로 타입이 유도되었으므로 경고가 나간다.
```

## [v] 배열의 정의문법 심화
```namu
int[][] // 띄어쓰기가 없으므로 int[] [] 와 구분한다.
// 이것은 int[] 를 원소로 갖는 [] 라는 뜻이다.
arr := [int[](), [1, 2]] // 2차원 배열
arr[0].len == 0 // ok
arr[1][1] == 2 // ok

// 다음의 코드는 무슨 뜻인가?
int[][str] foo(int[] arr, base[str] cache], str key)
int[][str][] getSome(foo lambda, base[str] cache), str key)
    got := int[][str][]()
    for n in 1..10
        got.add(foo(arr, cache, key))
    ret got

got := getSome(....)
for e in got // e는 map
    @warn(null) // 이게 없으면 for에서 nullexception이 발생할 수 있다.
    for n in e["key1"] // n은 int[]이다.
        out sum :+= n // out은 메소드에 변수가 놓여지게 한다.

c.out("sum=$sum")
```




























## 시퀸스

### [x] 1안 초안
#### Sequence 기본

- 기호 {} 를 사용한다.
- Sequence = {2*n+1 | 3...10}
- {n|3...10} == {3...10}
- {1...5} == {5}

#### [x] 새로운 Sequence 문법
```namu
a = {"name": 1, "aaa": 2}
seq1 = seq(1..2, n->2*n)
    //    def seq
    //        seq(seq org, ?(int) l)
    //        getn(int n)
    //            if seq.at()
    //                l
seq1.start, seq1.end
for n = seq1.in()
    c.out("$n, ")
``


### [v] 2안 .., -> 을 사용한다.
#### 시퀸스 필요성
* 배열과 닮은 컨테이너. 그러나 expr에 의해 일정한 값이 계산되어 나온다.
* 변수를 생성하는 팩토리와 닮았다.
* 값을 가공해서 반환해야 하므로 가공하는 함수f 를 개발자들이 쉽게 정의할 수 있어야 한다.
  그리고 그럴때 쓰는 게 람다다.
* 따라서 문법은 람다를 일부 결합한 듯한 모양새를 갖추되 컴파일러는 절대로 시퀸스와
  일반 람다를 모호하게 두어서는 안된다.


#### 정의 문법

  <시작값>..<끝값> [-> <stmts>]

```namu
seq := 1..3 // 상수화된 [1, 2, 3]
seq.len == 3
seq[1] == 2
//seq.add(4) err. 상수다. seq는 add라는 메소드가 없다.

seq2 := 3..5 -> n*2 + " hello!"
seq2.len // 3
seq2[2] // == (5*2 + " hello!") == "10 hello!"
```

#### 시퀸스의 타입
##### 1안
* 모든 것은 타입이 지정되어야 한다. 그래야 반환형에 적을 수 있다.
* 배열과 비슷하지만(read), 분명히 다르다(write) 그러므로 타입도 다르게 표현해야 한다.
```namu
intSeq := int.. // 비어있는 int seq의 origin객체를 가리킨다.
intSeq1 := int..() // 비어있는 int seq의 복사 객체를 가리킨다. 둘다 의미 없다.
intSeq2 := 2..3
intSeq1 = intSeq2 // ok

for n in intSeq1
    out sum :+= n
n == 5 // ok

int[] getCache(int arg1, int arg2)
    got := int[]()
    got.add(arg1, arg2)
    ret got

int.. getCache1(int arg1, int arg2)
    ret arg1..arg2
```


##### 2안: const 인 배열
* 사용법이 const 된 배열과 매우 흡사하다.
* const를 제한적으로 허용해주고 시퀸스를 배열로 대체한다.
```namu
intSeq := #int[]
intSeq1 := #int[]()
intSeq2 := 2..3 // #int[] 와 같다.
// 여기서 보면 알겠지만 변수를 상수화 시키려면 타입에 붙어야 한다.
// 모든 시퀸스는 상수화가 되어야 한다. 하지만 보통 const는 참조자에 붙인다.
// 따라서 const문법은 참조자에, 타입에 2종류가 된다.

intSeq3 := 5
intSeq3 := #5
def base1
    age := 0
def #base2
    age := 0
b1 := #base1()
//b1.age = 5// b1은 const다.
b2 := base2() // base2는 const가 맞다. 그러나 복제객체는 const가 아니지.
b2.age = 5 // ok

#str #foo(#int age, #str name) // immutable을 반환할때 const 를 붙이는 것은 의미가없다.
    // const를 쓰게 되면 이렇게 const 메소드도 넣을 수 있어야 한다.
    // age = 5 에러.
    ret str age // ok. 이때 이미 새로운 객체 str이 발생한다. str은 immutable이니까.
name := "name"
copied := foo(b2.age, name)
name = "oh?"
name != copied // true



#base2 foo(#int age, #base2 b) // mutable인 base2는 const로 반환할지 선택이 가능하다.
    // age = 5 // 에러.
    ret b // ok.
b2 := base2()
cBase2 := foo(b2.age, b2) // str은 immutable. 그러니 #str -> str로 객체가 복제된 것이다.
b2 === cBase2

b2.age = 5 // ok
//cBase2.age = 5 // 에러
// 보다시피 const는 불완전하기 때문에 온전히 immutable을 보장하지는 못한다.

cBase2 = base2() // ok
//cBase2.age = 5 // 에러. cBase2는 const base2 타입이기 때문이다.
// 여기서 world의 const는 참조자에게 붙는다는 것을 알 수 있다.
// (immutable객체도 항상 참조자가 물고 있다. 그러나 immutable객체는 매 할당마다 새로운
// 객체가 할당되기 때문에 그 차이를 모르는 것이다.)


b := #base2
i := #int
i()
b() // 생성자는 별다른 명세가 없어도 const 메소드다.
```

arr := int[] seq // ok. int[]은 seq 로부터의 캐스팅을 지원해야 한다.
// seq는 int.. 이므로 

```
































## 배열
### 1
-   int[] a = {0, 1, 2} // Array는 length만 있다. size는 눈에 보이지 않음.
-   a[2] = 5
-   _//void(int)[4] a = {}_



### [v] 원소가 비어있는 배열 정의하기?

```java
def keyBase
    str _name
    wav _src
    void stroke()

def returnKey = keyBase
    void stroke(): c.out("\n")

def keyChar = keyBase
    void stroke(): c.out(name)
```

#### [x] 1안 캐스팅을 이용한다

```java
keys = [returnKey(), keyChar(), keyChar()]
keys2 = [keyBase null] // 배열에 null은 무시됨. 어짜피 배열에 잘못된 n으로 get해도 null.
keys3 = [#keyBase null]
#keys4 = [keyBase null] // #의 위치

map1 = [returnKey:0, keyChar:1, keyChar():2]
map2 = [returnKey:int null]

tup1 = returnKey:2
tup2 = keyBase:2 null // keyBase는 org 맞음. 2는 int가 org. 그러므로 keyBase:int null
```

#### [v] 6안 {,} 를 추가한다.

```java
def myObj
    int[] foo(str[float] m)

arr = {0, 1, 2}
arr2 = int[]() //= {0, 1, 2} 뒤에 붙일 순 있음.
maps = int[][str]()
maps2 = {{0, 1, 2}:"arr1", {3, 4, 5} : "arr2"}
arr3 = int[]? // int[] 타입인데, null이 들어간 상태다.
// arr3 = int[] null 과 같다.
arr[3] // 런타임 에러다.
```

#### [v] Q3. 배열도 함수signature에 표현이 가능한가?

```java
arr1 = [int null]

1: int[] foo()
2: [int null] foo()
3: arr<int> foo()
[v] 4: int[] foo()
   arr = {0, 1, 2}
   arr2 = int[]() //= {0, 1, 2} 뒤에 붙일 순 있음.
   maps = int[][str]()
   maps2 = {{0, 1, 2}:"arr1", {3, 4, 5} : "arr2"}
5: []<int> foo()
```

* 요구사항
  * type을 def 하는 문법을 추가로 만들면 사용자는 분명 타입유추 문법 보다는 그쪽을 선호할 것이다. (관성처럼) 그러므로 가능하면 타입유추 문법으로 표현 할 수 있어야 한다.
  * 간결해야 한다.
  * 새로운 문법을 만들기 보단 있는 문법을 차용하는게 좋다.
* 방향성
  * 2번
    * 있는 문법을 재활용한것이다. 그러나 간결하지 않고, 과연 동작이 가능한건지 검토도 필요하다.
      * Q. 동작이 가능한가? 파싱에 문제는 없는가?
        * 저것은 expr이 배열 안에 있는 거라고 볼 수도 있다.
        * 그 경우, 반환형에 expr이 담겨 있는 것이다.
  * 배열을 위한 새로운 문법을 만든다.
    * [int null] 방식은 아무래도 에둘러서 표현한것에 가깝다.
    * 보다 직접적으로 간결하게 표현할 수 있는 방법이 없을까?
  * 제네릭에 대한 새로운 문법을 만든다.

#### [v] Q4. 제네릭을 지원하지 않는데 어떻게 동작하지? --> 별도의 문서로.

* [v] 1안 generic을 지원한다. --> 별도의 문서로.

* [x] 2안 generic을 지원하지 않고도 구현이 가능한지 알아본다.

  * 가장 먼저 클래스의 문제다.

    * T가 없는 일반 메소드가 있다고 하자. 이 메소드는 어느 org객체에 속해 있어야 한다. generic이 없으므로 org객체는 variation이 생기지 않는다.
      * 예) Array.set(int n, int new1)은 Array org에 담겨있어야 한다.
    * 메소드를 담는 방법은 다음과 같다.
      1. Array 안에 lazy하게 모든 생긴 set()을 다 담아둔다.
      2. Array는 T에 대한 변수를 가지고 있고, 이는 각 객체들이 지니고 있다. 즉 객체마다 T가 변한다.
      3. 매번 새로운 Array를 생성한다.
    * 여기서 2,3번은 generic을 구현한거나 다름없다. 그리고 1번은 전혀 다른 객체에서 서로 다른 객체의 set()을 사용할 수 있다는 부작용이 있다.

  * **결론**:

    * [] 구문은 사실 generic의 <>를 간략하게 표현한 것이다.
    * **따라서 generic을 구현하지 않고서는 container를 일체 구현할 수 없다. 증명됨.**



#### [x] 2안 바깥에 캐스팅을 이용한다.

```java
1: keys = keyBase[] []
2: keys = keyBase[]
```

#### [x] 3안 Generic 문법을 사용한다.

```java
keys = array<keyBase>()
keys[0] = 1
```

#### [x] 4안 독자적인, 더 편리한 generic 문법을 만든다.

```java
1: myProxy<int, float> mp // 기존 방식
```

#### [x] 5안 기존 Generic 문법을 사용하되, []도 사용한다.

```java
1: keys = []<keyBase>
2: keys = [<keyBase>]
keys.push(returnKey)
```





















## Chain

### 기본

- 배열1과 배열2가 있을때 이 둘을 chain해서 배열1의 원소와  배열2의 원소를 모두 가진것처럼 보이는 배열을 만들수 있어야 한다.
  - 예) Chain a, b
  - a.chainFront(b)
  - b.push(5)
  - a.getLength() == 1 // O
  - a[0] == 5 // O
  - a.push(25)
  - a.getLength() == b.getLength() // X
  - a[0] = 27
  - b[0] == 27 // O
  - a.liberate(b)
  - a[0] // 25
- List건, vector건 모든 컨테이너에 적용되야 한다.
- chain에 push, pop을 하게 되면 적절한 실제 배열에 해당 명령이 내려가야 한다.
- Mutliple Container를 묶을 수 있어야 하며, Chain을 실질적으로는 Vector< Bind<Container> >로 봐야한다.
- 고찰 내용
  - 추가 아이디어
    - \1. incarnate() 함수를 사용하면 chain은 유지되지만 원소가 복제된다. 그렇게 되면 탐색시 O(n)의재귀 함수call을 하지 않아도 되게 된다?
      - origin의 원소가 변경되면 어떻게 되는가?
      - 그럴바에야 List l = chain1; 을 사용하게 해라. 이 기능은 필요가 없다.

- 요구사항
  - Container종류 상관없이 동작해야 한다.
  - 임의의 타입 T로 나올 수 있어야 한다
  - 속도가 가능한 빨라야 한다.
  - Container를 특정 ContainerChain 사이에 insert할 수 있어야 한다.
  - Controller를 상속해서 기능 추가가 가능해야 한다.
- 1안 Binder<Container>의 Array이다.
  - class Chain : public Array {
    - class Controller : public Containable { // World에 invisible해야 한다.
      - Controller() {}
      - Controller(Chain& rhs) : _owner(rhs) {}
      - virtual const Result& insert(Iterator e, const Node& newone) {
        - if( ! _owner) return NullPointerException;
        - return owner->Container::insert(e, newone); }
      - }
      - virtual Container& get(int n) {
        - if( ! _owner) return NullPointerException;
        - return _owner->Super::get(n);
      - }
      - //each는 get을 사용할 것이므로 추가 구현없이 정상적으로 Container를 each하게 된다.
      - Weak<Chain> _owner;
      - Translated translate(int index) {
        - Translated to_return;
        - int sum = 0;
        - Super::each([&to_return, &sum, index](const Element& e) {
          - int before = sum;
          - sum += e->getLength();
          - if(sum > index) {
            - to_return.index = index - before - 1;
            - to_return.cont = e;
            - return ConsumedSuccessful;
          - }
          - return KeepSearching;
        - });
        - return to_return;
      - }
    - }
    - Controller _controller;
    - Controller getController() { return _controller; } // World에 invisible해야 한다.
    - class _Iteratoration : pubilc Iteration {
      - ...
    - }
    - struct Translated {
      - int index;
      - Bind<Container> cont;
      - bool isEmpty() {
        - return cont.isNull() || index < 0 || index >= cont->getLength();
      - }
      - Node& get() {
        - if(isEmpty()) return nulled<Node>();
        - return cont->get(index);
      - }
    - };
    - virtual Node& get(int n) {
      - return _translate(n).get();
    - }
    - virtual int getLength() {
      - int len = 0;
      - getController().each<Container>([&len](const Container& e) {
        - len += e.getLength();
        - return Success;
      - });
      - return len;
    - }
    - virtual const Result& set(int n, const Weak<Node>& rhs)
    - virtual const Result& insert(int n, const Weak<Node>& rhs) {
      - Translated bean = _translate(n);
      - if(bean.isEmpty()) return NullPointerException;
      - return bean.cont->insert(bean.n);
    - }
    - Weak<Node> operator[](int index);
    - // each() 는 get()를 사용하므로 따로 조작할 필요없음
  - }





# Sharable & Occupiable







# Scope
라이프 사이클, GC

##

## scope는 Node다.

- chain이 되어야 했기 때문에 결과적으로는 invisible한 Node가 되었다.
- get(n) get(string) 함수를 물려받을 것이다.
- call() 함수를 채워야 한다.
- v Node는 getMembers()를 채워야 한다. Chain은 어떻게 getMembers()를 채울까?
  - x 1안 return *this;
  - x 2안 Chain
  - v 3안 당연히 TClass<Chain>의 메소드들이 들어갈 것이다. 뭐가 문제인가. 배열원소를 접근하고 싶다면 Msg("get", {int=index})를 쓰라고 해라.

## Scope의 초안

- 3개의 space로 이루어진다. GlobalSpace, ClassSpace, LocalSpace.
  - ClassSpace로 한 이유는 Object가 아닌 것도 ClassSpace에 멤버를 넣어야 하는 때가 있기 때문이다.
- class Scope : Chain
  - Array<Node> _globals;
  - Chain::Control& getControl()
- class Node
  - virtual call()
    - Chain::Control& con = Scope.getControl()
    - TStrong<Chain> classsp = con[1];
    - TStrong<Array> localsp = con[2];
    - con.set(1, _getMembers())
    - con.set(2, *Array::create());
    - // member를 찾아서 메시지 전달..
    - con.set(1, *classsp)
    - con.set(2, *localsp);
- class Object
  - // virtual call() --> Node와 동일. 이게 기본 컨셉이다.
- class Method
  - private windex _post(int n)
  - virtual call() // Method의 call은 기본컨셉(Node의 call)과 다르다.
    - if([msg.name](http://msg.name/)() == "execute") // 종말메소드인 execute는 이렇게 수동으로 처리해야 한다.
      - return execute(msg)
    - return Super::call() // Method가 msg를 bypass 하는 경우에는 어떠한 member도 scope에 추가하지 않는다. Method의 멤버가 추가되지 않으므로 재귀함수를 돈다고 가정했을때에 중복으로 scope에 등록되는 케이스는 발생하지 않는다. 요때는 기본컨셉(Method를 Node로써 다룸)으로 진행된다. ObjectSpace가 다빠지게 된다.
  - execute(msg)
    - Control& con = Scope.getControl();
    - int n = Scope.getLength()
    - Scope.enq("me", *this); // me.getMembers()는 넣어서는 안된다. 어디까지나 this,즉 object의 것만 넣어야 한다. 그리고 원소는 반드시 [0] 부터 넣어야 최적화가 가능하다.
    - con.enq(getNestedMethods())
    - con.enq(getArguments())
    - _onExecute() // TODO: 여기는 bridge에 영역.
    - while(Scope.getLength() >= n) // TODO: 최적화
      - Scope.pop()
- 고찰 내용
  - 1안
    - 구성
      - Scope : Chain
        - public static const int GLOBAL = 0, LOCAL=2, OBJECT=1;
        - Array<Node> _globals;
        - Array<Chain> _objects;
        - Array<Node> _locals;
        - _sync()
          - getControl()[1].set(_objects[0]);
    - class ScopeControl : Chain::Control 로 제공.
      - insert, remove 는 ObjectSpace 자체를 제어한다.
        - insert(OBJECT, ...) 시 Chain 객체를 매번 생성하고, remove시에 Chain을 제거한다.
      - Chain& getLocal/Object/GlobalSpace() 제공한다.
      - getObjectSpace().getControl().push(members)는 ObjectSpace(정확히는 _objects[0])에 Space내의 것을 제어한다.
  - 2안
    - class Scope : Chain
      - class ScopeControl : public Control
    - Node::_precall(n)
      - n = Scope.getControl().push(getMembers())
    - Node::_postcall(n)
      - while(getLength() > n)
        - getControl().pop()
    - Method::_precall(n)
      - Super::_precall()
      - getControl() += NestedMethodMembers())
      - getControl() += getArguments()
    - //Method::_postcall(n)
    - Object::_precall(n)
  - 3안
    - class Scope : Containable
      - Array<Node> _globals;
      - TStrong<Chain> bean;
      - insert() / remove()
        - return bean.insert() / remove()
      - Chain::Control& getControl()
        - return bean.getControl()
      - Chain createObjectSpace()
        - Chain ret;

### 지역변수-중복-되는-경우-scope는-어떻게-구현해야-하는가, 가능하면 블록문이 끝난 경우, 기존 심볼을 같은 인덱스에 위치하는 방법은?

- 변수와 메소드의 중복정의는 허용하지 않는다.

- 사용자가 헷갈릴 수 있다.

- 고찰 내용

  - @문제정의

    - class A
      - void(void) foo(int b)
        - int a = 5
        - Console.out(a) // -- 1
        - if(b > 5)
          - int a = 7
          - Console.out(a) // -- 2
        - else
          - int a = 10
          - Console.out(a) // -- 2
        - Console.out(a) // -- 3

  - 1과 2와 3의 인덱스가 같았으면 좋겠다. 어짜피 if 블록문 안쪽에서는 1번 a를 참조할 수 없으니, 자연스럽게 동작도 가능하며, 최적화시에 같은 인덱스를 넣으면 되니 더 편할 것이다.

  - 1안 각 변수가 복원 시킨다

  - 2안 블록문이 복원 시킨다

  - 3안 스코프가 복원 시킨다

    - 외부에서 스코프에 로컬 변수를 넣고자 하는 경우 2가지 방법밖에 없다.

      - \1. 인덱스를 지정해서 잠시 덮어쓰는 방법.

        insert(3, ....)

        - 이 경우, 기존에 3번 인덱스에 있던걸 기억해 두고 있어야 한다.

      - \2. 그냥 맨앞에 추가 하는 방법

        pushHead(...)

        - 이 경우, 그냥 원소를 넣으면 그만.

    - 이후, 블록문에서 "이 인덱스 이전으로 생성된 것들을 모두 pop!" 이라고 한다.



### scope symbol 반환 알고리즘 초안

- Statement의 심볼 접근은 숨겨진 전역객체인 Scope를 통해서 해결한다.
- Scope는 3가지로 구분해서 심볼을 관리하며 Stack 구조를 가지고 있다.
  - GlobalSpace : 전역 공간이다. Scope가 소유한다.
  - ObjectSpace : 현재 메소드를 소유하는 객체의 멤버들이 들어있다.(메소드 + 멤버변수) 그때그때마다 객체의 member를 chain 시켜놓는다.
  - LocalSpace : 현재 수행중인 메소드, 블록문에서 지정한 지역변수들이 여기에 임시로 들어가게 된다. Scope가 소유한다. int border가 있으며, 이것은 [x, length-1] 까지 이 함수에서 접근가능한 심볼의 범위를 나타내는 int 값 x를 담고 있다. 메소드가 이것을 placeBorder(int newborder)로 지정하고, Statement는 getVisibleElement()로 이 지정된 범위에서만 심볼을 찾아서 사용한다.
  - 컴파일러가 최적화되면 getElement(index)를 바로 사용한다.
- 알고리즘은 다음과 같다.
  - Scope {
    - Members global;
    - Members local;
    - Chain<Array<Node>> members;
    - Scope() {
      - members.chain(global);
      - members.chain(local);
    - }
  - } Scope가 생성되면서 기본 built-in 전역변수, 프로그램 전역변수들이 global에 push 된다.
  - Statement가 실행되면, 최종적으로 Method가 msg를 받는다. Method.call("()")이 되면 이를 "execute()"로 번역된다. 메소드는 setArgument로 받은 인자리스트를 넣어두고, Method.execute()가 호출한다.
  - Method.execute()이 불려지면 현재 Scope.ObjectSpace 주소가 thisptr가 일치하는지 본다. 아닐 경우에만 Scope.ObjectSpace의 현재 주소를 보관하고, thisptr의 member를 대신 넣어둔다. getBorder()로 현재 값을 확인하고 placeBorder(length-1)을 지정한다. 그리고 블록문.execute()를 부른다.
  - class Method : public BlockStatement 로 되어있다. 블록문은 Statement들을 갖고 있으며, call(), execute()가 가능한 것을 말한다.
  - 블록문.execute()이 되면 Scope의 LocalSpace의 length를 기억하고 statements.execute()한다.
  - 그리고 Statement들은, 지역변수를 정의할때 Scope의 localSpace에 직접 push하도록 코드를 작성한다.
  - 블록문은 Statements들이 모두 끝나면 앞서 기억해둔 LocalSpace.length까지 pop을 시켜준다.
  - Method.execute()는 블록문.execute()가 끝나면 placeBorder(이전에 기억하던 lenght)로 되돌리고 보관하고 있던 ObjectSpace 주소로 원복시킨다.
  - Closure는 execute시에 placeBorder()를 하지 않는 BlockStatement다.
    - class BlockStatement : public Statement
    - class Closure : public BlockStatement
    - class Method : public Closure
  - 파서는 코드블럭을 생성할때, 메소드 안에 메소드는 closure로 인식해서 코드블럭을 만든다.
  - 같은 클래스 메소드A에서 메소드B를 호출하는 경우는? --> OK
  - 클래스A::메소드A에서 클래스B::메소드A를 호출하는 경우는? --> OK
  - 메소드의 메소드를 실행시키는 closure의 경우는 어떻게 되는가? --> OK
- 고찰 내용
  - World코드의 이 식별자가 무슨 심볼과 매치되어야 하는가. 무슨 심볼에게 이 함수호출을 보내야 하는가를 정하기 위해서는 지역변수목록, 전역변수 목록, 클래스멤버 목록을 다 알 고 있어야 한다. 이와 같은 작업을 수행해주는 (= SymbolTable) 걸 Scope라 한다. 어떻게 설계할지를 논의해보자.
  - 힌트
    - \1. IDE 편집모드에서는 scope 객체가 필요하다. 최적화가 된 build 된 실행모드에서는 scope가 필요없다.
    - \2. 되도록이면 World는 편집모드인지 실행모드인지 알 필요가 없었으면 좋겠다.
    - \3. 퍼포먼스는 중요하다. 매 getMember() 마다 Scope객체를 만드는건 너무 시간이 오래 걸린다.
    - \4. 소스코드의 변경은, 즉 Scope 객체의 변경을 의미한다. 편집모드에서는 Scope는 매번 변경되게 될 것이다.
  - 1안 compile, validate, execution 시에 scope를 만들어가면서 파싱한다.
    - Scope는 실행시에 "a" 란 식별자에 접근하려는 코드가 있을때 실제로 이 변수를 반환하는 객체다. 이는 compile 과정에서 코드블럭에 "어떠한 객체에게 이 메시지를 전달해야 하는가"를 따지는데 사용된다.
    - Scope는 3종류가 있다.
      - \1. GlobalSpace라는 객체. 프로그램 시작전에 전역변수가 여기에 담긴다.
      - \2. LocalSpace라는 객체. Method에서 생성된 지역변수 + 전달받은 thisptr + Arguments 들이 여기에 생성되어 놓여진다. Class는 LocalSpace의 borderline을 그어놓고, 그 이후에 추가되는 것들만 검색되게 한다. Class 파싱이 끝나기 직전에는 LocalSpace의 borderline을 취소한다.
      - \3. Object Space. Object의 members 들. 객체 생성과 동시에 만들어진다.
    - 프로그램 실행과 동시에 GlobalSpace값을 추가된다.
    - 그리고 이는 메소드를 파싱하면서 지역변수 목록을 메소드에 추가하게 되는데, 이때 LocalSpace에도 추가한다.
      - 지역변수 목록은 메소드의 멤버가 될 수 없다. 그렇게 되면 메소드 외부에서 지역변수에 접근할 수 있도록 되어버릴 것이다.
    - 단, LocalSpace는 구현이 좀 독특하다.
      - Class는 msg가 넘어오면 LocalSpace의 구성물을 잠시 꽁쳐두고 비워놓는다. (LocalSpace는 구성물을 꽁처두는데 최적화되어 퍼포먼스 loss가 발생해서는 안된다. swap(Stack&) 이런거 만들어 놓으면 될것이다.)
      - Method가 msg를 받으면 LocalSpace의 index를 기억한다. to()로 생성해낸 인자리스트를 LocalSpace에 박아넣고, Statements를 돌린다. 이 과정에서 지역변수를 만드는 Statment는 당연히 LocalSpace에 인스턴스를 넣어놓는 코드가 될것이다.
      - Method가 종료되면 아까 기억했던 index까지 LocalSpace를 pop한다. LocalSpace는 Stack의 특성을 띄면 될것이다.
    - 만약 Nested Method가 실행된 경우는?
      - class MyClass
        - int a
        - void foo(int b)
          - int c
          - void boo(int d)
            - int e
          - boo(c)
      - MyClass cls
      - cls.foo()
      - 먼저 cls.foo가 먼저 실행된다. MyClass::call()이 수행되면 LocalSpace의 구성물을 지역변수로 swap시키고 비워놓는다.
      - 다음foo()가 수행된다. 현재 LocalSpace의 length를 확인한다. == 0
      - 그리고 인자리스트를 to()로 생성하여 LocalSpace에 쑤셔넣는다. 모든 메소드의 인자1은 반드시 thisptr, 즉 cls 변수가 들어있다.
      - 다음 boo(c)가 수행된다. boo는 Method인 foo 안에 있는 것이다. 이는 코드블럭으로는
        - msg {
          - name = boo
          - args = {cls, c}
        - } 와 동일하다.
      - 인터프리터는 코드의 boo가 Nested Method, 즉 foo함수의 boo임을 알 수 있다. 그러므로 msg를 수신하는 주체를 foo Method로 설정한다.
        - 여기서 Method는 클래스다. 단, 값을 가질 수 는 없다. 왜냐하면 Method는 World에서 Unique 속성을 갖기 때문이다. (static이라면 이론적으로는 가질 수 있을 것이다)
      - boo::call(msg)가 수행된다. LocalSpace length를 확인한다. == 2
        - boo()함수의 수행한다.
      - boo()가 끝나면 아까 기록했던 length가 되도록 pop한다. [현재 length 3이므로 pop() 1번 하게 됨]
      - foo()가 끝난다. 아까 length가 되도록 pop한다. [pop() 2번해서 length 0이 됨]
      - MyClass1::call()이 끝난다. MyClass1은 아까 지역변수로 swap해둔 LocalSpace를 교체한다.
    - 고찰내용
      - 파서는 World코드로 지역변수의 정의를 보면 Function.stack에다가 지역변수 명세를 추가한다. 지역변수의 순서는 상관이 없다.
      - scope는 multiple chain이다. 맨 위부터 Stack공간(Function의) -> 클래스(thisptr)의 all member 공간 ->전역변수 공간 으로 3개가 chain된다.
        - 메소드 안에서 다른 객체의 메소드를 호출한 경우는, 이것만으로는 해결되지 않는다.
          - class MyClass
            - void foo()
              - do-something...
          - class MyClass1
            - MyClass cls
            - void boo()
              - cls.foo()
          - result main()
            - MyClass1 c1
            - c1.boo()
          - 위의 알고리즘대로라면, 이렇게 된다.
            - \1. MyClass1, MyClass Class 객체가 각각 만들어지고, method, 변수 정보가 각각 member에 들어가게 된다.
              - ClassManager[1]에 있을, MyClass1을 예를들어보면
                - methods[0] = boo()가 들어있으며
                - variables[0] = Object(MyClass()) 가 들어있다.
                - members는 methods, variables를 link해서 members[1] == variables[0]과 같다.
            - \2. 프로그램이 실행되기 전에 전역객체가 만들어지고 Scope.전역공간에 등록된다. 이 코드에서는 비어있다. result main() 메소드가 생성되면서
            - \3. 이 코드에서는 언급되지 않았지만 main메소드가 객체가 생성되면서 메소드마다 가지고 있는 stack공간[0]에 지역변수 c1이 Object(MyClas1)으로 생성된다.
            - \4. main이 실행된다. 메소드의 stack공간이 Scope.지역공간에 push 된다. 결과, Scope는 클래스공간은 null이므로 전역공간 + main지역공간으로 이루어지게 된다. 따라서 Scope[0] = "c1"만 들고있는 1개 짜리 공간일 것이다.
            - \5. MyClass c1를 하게되면 ClassManager["MyClass1"].instantiate()가 되고, 이는 Object(MyClass1)를 만들면서 members가 MyClass1.methods를 link시키고, variables = MyClass1.variables에서 깊은복사하고, members는 variables를 link시킨다. 그러면 새로 만들어진 c1객체는 methods는 클래스의 것을 사용하되, variables는 클래스에서 복제된 자신만의 것을 갖는 상태로 출발하게 된다.
            - \5. c1.boo 가 수행된다. 이는 객체, c1으로 일단 메시지가 가는 것이다. c1은 Object, 객체. Object는 자신에게 msg가 왔을 경우, 클래스공간을 release하고 자신의 members를 link시킨다. (이미 자신이 등록되어있으면 무시된다). 결과 Scope는 [0] = c1, [1~n] = c1의 members로 이루어진 상태가 된다. 그리고 Scope에서 boo Method를 찾아서 반환한다.
            - \6. 반환된 boo의 "()"가 수행된다. 이는 Method::call(args)와 같은 것이다. Method는 msg가 왔을 경우,
            - 문제점
              - 객체에 msg가 가지 않은 상태에서 함수에게만 msg가 가게 된다면 클래스공간이 업데이트 되지 않은 상태에서 지역공간에만 메소드stack공간이 추가될 것이다. 이게 가능한가?
              - 지역변수는 미리 만들어둔다? 그러면 초기화되지 않았는데 참조해버리는 경우는 어떻게 되나?
                - Stack공간::getElement()
        - Chain::find(T& needle) // 각각 탐색 함수호출을 내린다.
          - for e in _subs
            - if found = e.find(needle)
              - return found
      - Function은 execute("")가 되면 자신의 stack을 복제하여 scope의 stack 공간에 넣는다. (chain의 각 원소는 Bind<T>로 되어있다). 그리고 함수를 실행한다.
      - 파서가 만들어놓은 코드 블럭이 담긴 Function의 실행부는, 함수 호출의 집합으로 이루어져있다. 함수호출은 3가지 값이 필요한데, 인자, 함수, thisptr 이다. 함수는 시스템에 유일하게 1개이므로 그냥 바인들로 문제없고 인자, thisptr은 그때그때 함수호출마다 "어느 객체가 thisptr인 함수호출인가" 에 의해서 변경되게 된다.
      - 이런 상황에서 퍼포먼스 최적화를 위해 최적화된 Bind을 정의한다. 이 Bind는 기존 Bind<T>의 일종이다. 처음 실행하면 cache값을 확인해서 -1 처럼 되어있다면 scope객체에 접근해서 주어진 이름으로 심볼을 찾아서 가지고 온다. 찾으려던 심볼이 확인되면 cache의 값을 scope의 인덱스로 업데이트하고 Bind는 심볼을 반환한다. 다음 접근요청이 들어오면 scope[cache]로 바로 심볼을 가져오고, 검증이 실패되었을때만 scope["foo"]처럼 심볼을 재 탐색해서 cache를 업데이트한다.
        - 결론적으로 scope["foo"] 와 같은 로드가 많이 걸리는 탐색작업을 "최초 1번"으로 제한 할 수 있다.
        - 게다가 IDE에서 런타임에 코드가 수정되어도 자동으로 동기화가 이루어진다.
  - 2안 compile, validate에만 scope가 필요하며, 이때 각 함수 안에서 재귀적으로 생성한다.
    - 먼저, "어떠한 객체에 이 메시지를 전달해야 하는가" 라는 것은 코드에만 dependent하다. 다시말해서 코드가 fix되면 이 정보를 갱신할 필요가 없다. build가 완료되면 optimized된 바이너리코드가 나오고 이 상태에서는 더 이상 편집이 불가능하다는 것이므로 optimization을 할때 "어떠한 객체에 이 메시지를 전달해야 하는가"도 같이 최적화 시키면 실행시에는 이 값을, scope를, 업데이트할 필요가 없게 된다.
    - 하지만 validate시에 이 부분을 정해버리면 편집상 문제가 생긴다. 왜냐하면 이 작업은 부피가 좀 큰 작업이고 소스코드가 한창 변경중인 상황에서 매수정시마다 scope를 생성하여 조회하여 매칭을 시켜봤자 좀 있다 다시 수정될 가능성이 있기 때문이다. 실행할지도 모를 모든 코드에 대해서 이러한 작업을 수행하는 것은 부담스럽다. 따라서 실행속도가 늦어지더라도  IDE모드에서는 optimization을 하지 않고 실행시점에서 늦게 scope를 하나 두고 매칭을 지속적으로 시켜가는게 좋다.
      - 그 얘기는 WorldInterpreter는 이것이 실행모드인지 편집모드인지 알 고있어야 한다는 것 처럼 보이는데?
        - 1안 IDE모드에서는 scope를 사용해서 매칭하는 함수를 넣고, optimization에서는 이 함수 대신 직접 target 을 가리키는 걸로 대체함으로써 최적화 시킨다.
          - 이 말은 Node::getMember(const String& name) 이거 안쪽에서 Scope를 통해서 찾아내야 한다는 걸 의미한다.
          - 포인트는 1. 실행모드에서는 scope는 불필요한 데이터이다. 2. 재귀적으로 구성시켜야 한다. 3. 인스턴스별로 그 값이 달라야 한다.
          -  어떻게 구현할까?
            - 1안 lazy-초기화를 사용한다.
              - 각 인스턴스는 요청을 받을때 member에다가 동적으로 값을 scope 쑤셔넣는다. scope의 기반이 되는 것은 owner로부터 받는다. 이 말은 owner(클래스, 혹은 메소드) 가 누구인지 알 고있어야 한다는 것이다.
              - owner에 대한 정의와 컨셉이 필요하다.
              - Scope Node::createScope() {
                - Scope scope = getOwner().createScope();
                - scope.chain(getMembers());
                - return scope;
              - }
              - 매번 Scope값이 생성,채워져서 들어간다. 엄청난 퍼포먼스 loss가 예상되는데.
  - 3안 1안의 최적화 및 개선안
    - 실행모드시에도 scope를 채우거나 빼내어가면서 실행을 한다. 모든 Statement들을 이 scope로부터 심볼에 접근하는 걸 대 원칙으로 한다.
      - IDE 모드(즉, 코드를 text를 input으로 보내어 compile, validate가 일어나는 과정) 에서는 코드의 변경이 많기때문에 getMember(String& name) 을 사용할 것이며, 이 함수는 scope에서 string 비교로 심볼을 찾는다.
      - 실행모드에서는 Interpreter가 getMember(String& name)을 getMember(int index)로 최적화시킨다. **따라서 Scope는 매 실행시마다 항상 동일한 인덱스가 나오도록 해야한다.**
      - Scope는 3개의 space로 이루어져있다.
        - \1. LocalSpace
      - 메소드에서 같은 클래스의 다른 메소드를 부르는 경우, 만약 "지역변수는 LocalSpace에 선언될때마다 들어간다" 라는 것이면
        - \1. 매번 객체생성해야한다.
        - \2. LocalSpace에 push, pop을 해야 한다. 매 메소드마다. 이건 꽤나 큰 loss일 수 있다.
      - 만약 메소드가 LocalSpace를 각각 들고 있고, 여기에 지역변수들이 이미 들어있다면 어떨까? push, pop은 인스턴스를 빼고 넣는게 아니라 단순히 이 원소를 사용한다 사용하지 않는다는 표시만 하는 거라면.
      - 지역변수는 블록문이 있다면 중간에 소멸되기도 해야 한다.



## Scope에서 멤버 중복제거

- 재귀메소드를 호출한다고 하자. 그러면 Method::getMembers()가 계속해서 쌓일 것이다. 어떻게 해결할까?
- 쌓이지 않는다.
- x 1안 me로 접근 한 경우에만 Method::getMembers()가 쌓인다.
  - Method에는 이 Object에 대한 것 + 메소드 인자 + "me" 변수 만을 채워놓는다.
  - 메소드가 재귀호출되면 me 변수는 중복되어서 local에 들어갈 수 있다. scope는 [0]부터 탐색해서 중복무시하고 가장 먼저 매칭되는 것만 반환한다.
  - "만약 한 Space에서 2가지 이상의 식별자가 발견되면 모호성의 오류가 발생된다." 이거 때문에 me도 중복되어서는 안된다. "this" 도 마찬가지다.
- 2안 this, me만 특별 취급한다.
  - Object는, 자신이 등록되면 this, me를 scope에 setThis(), setMe()로 얻어놓는다.
  - Scope는 저 함수가 불려지면,
    - if(it.isExists())
      - if(_this.isBinded()
        - _this.bind(it)
      - else
        - _this.bind(it)
        - _this_n = locals.push(_this)
    - else
      - _this.release();
      - locals.pop(_this_n); 을 한다.
  - Node::call()은
    - origin = Scope.getThis();
    - Scope.setThis(*this);
    - ...
    - Scope.setThis(origin)을 한다.
- 1-2안 1안으로가되, me, this에 대해서만 모호성의 오류를 내지 않는다.
- **고찰을 통해 알아낸 팩트**
  - \1. me의 위치는 고정되있지 않다. me가 추가되고 지역변수가 추가되고나서 nested method가 불려진 상황이라면 me는 scope에 맨 위라고 보장할 수 없다.
  - \2. 설계상 me는 반드시 scope 안에 있어야 한다. 별도의 변수로 제공되는 예외취급되어서는 안된다.
  - \3. Method::call()과 NestedMethod::call()에서의 scope 제어 코드가 다르다.
  - \4. LocalSpace도 ObjectSpace처럼 bind, release가 가능해야 한다.
    - class Method // == NestedMethod
      - call()
        - if msg == execute
          - execute()
        - else
          - return
      - execute()
        - n = scope[2].getLength()
        - scope[2].push(args)
        - scope[2].push(getNestedMethods())
        - scope.updateMe(this)
        - onExecute() // --> Object.call() or Method.call()
        - while(scope[2].getLength() > n)
          - scope[2].pop()
    - class ??Method : Method
      - call()
        - TStrong<Space> origin = scope[2];
        - scope[2].set(**new Space()**);
        - Super::call()
        - scope[2].set(origin);
    - class StaticMethod : Method
      - virtual onExecute()
        - // msg에서 this를 가져오지 않는다.

## 중첩메소드 지원과 그때의 scope의 컨셉

- 중첩메소드는 잠깐 scope에 등록되고 사라지는, Object의 메소드중 하나이다. Method에 속한 Method가 아니다.

- scope에 보이고 빼는 건 자신이 정의된 소유자Method가 담당한다.



## Scope는 Reversed-Stack, 클래스멤버는 Stack으로 구성해야 한다.

- Scope는 새로운 심볼이 [0]에 들어가는 Stack이어야 하며,
- 클래스멤버는 새로운 멤버가 뒤에[n] 들어가는 Stack으로 들어가야 한다.
- 고찰내용
  - Scope는 인덱스가 해당 함수 내에서만 블록적으로 확정적이다. 그렇기에 그 블록을 인덱스 맨 앞으로 위치시킨다면 항상 확정적인 상태를 만들 수 있다.
  - 반면 클래스의 멤버는 그 클래스, 그 클래스가 상속받은 부모클래스들까지 모두 확정적이다. 그러므로 뒤에 위치시키는 것도 가능하다.



## 인터페이스 공개 - 외부에서 scope객체를 얼마나 접근가능해야 할까?

- native, managed 포함하여, scope의 존재자체를 몰라야 하며, 간접적으로 이를 조작해서도 안된다.(예, c++에서 변수 정의하는 Stmt를 지역변수로 임의로 하나 만들어서 바로 실행)
- 고찰내용
  - v 변수를 멋대로 추가하거나 제거해서는 안된다? --> Validation실패는 허용되지 않는다. 안된다.
    - Stmt는 execute()가 되면 변수를 추가할 수 있다. 제거는 메소드에 의해서 처리된다. 설사 여기서 scope를 막아놓는다 하더라도 변수를 정의하는 Stmt를 하나 만들어서 execute()를 때려버리면 scope에 들어가게 된다.
    - 제거만 못하게 막아놓는다 하더라도 scope는 [0]부터 가장 먼저 매칭된 것을 보내주므로 (모호성의 오류가 없다. 그건 클래스에서만 있지) 사실상 로직을 바꾸는 결과가 된다. 만약 이걸 하는 경우 validation한 결과와 정말 실행한 결과가 불일치 하게 된다.







## Scope의 실행모드(바이너리 직접 실행)과 IDE편집 모드시의 차이점

- 가장 중요한 것은 월드 자체는 현재 바이너리 실행모드인지 알아서는 안된다는 것이다. 똑같이 Statement를 실행할 뿐이지만 최적화Statement에서는 get(name)를 사용하지 않음으로써 속도가 개선될 뿐이다.
- 따라서 실행모드와 IDE모드라는 것은 엄연히 존재하지 않는며, 구분하지 않는다. 여기서는 편의상 임시로 사용하는 용어다.
- scope는 양쪽 모드에서 항상 구축이 되어야 한다. 그래야 지역변수가 참조가 될 수 있다.
- 단, 바이너리 최적화가 이루어지면 scope.get("변수이름") --> scope.get(n)으로 탐색속도가 올라가는 것 뿐이다.
- 고찰내용
  - 가장 중요한 것은 월드 자체는 현재 바이너리 실행모드인지 알아서는 안된다는 것이다. 똑같이 Statement를 실행할 뿐이지만 최적화Statement에서는 scope를 사용하지 않음으로써 scope 구현이 빠지게 되어야 한다.
  - 1안 - scope에 reg, unreg도 눈에 보이지 않는 statement로 대체한다?
  - 2안 - scope객체는 "실행모드"임을 catch해서, 이때는 reg, unreg를 비운다.
  - v 3안 - scope는 실행모드에서도 필요한것이다?
    - 왜냐하면 지역변수가 어디에 있게 되는가? 바로 scope이지 않는가. scope가 유일하게 지역변수가 visible한 장소이기 때문이다. 실행모드에서 최적화되는 것은 scope.getMember("string") --> scope[n]으로 되는 부분인 것이다.





## Scope에_const_member만_넣어야_한다.

- validation이 실제로 scope가 어떻게 구성되어있는가로 판단하기 때문에  Method가 OBjectSpace를 update할때 Object가 const면, const 멤버만 ObjectSpace에 넣어야만 한다.
- *1안 chain을 잘 구성해서 const 멤버만 모아둔 chain을 또 만든다. 그리고 이걸 바로 반환한다.*
- v 2안 const member를 따로 구성하면 로스가 너무 심하다. 그래서 멤버는 그냥 다 들어가고, 실행직전에, 혹은 stmt나 어딘가에서 이걸 위한 exception handling을 끼워넣는다.
  - scope는 어짜피 Object에 종속적으로 될 수 밖에 없다. 따라서 scope에 object를 stack할때 const로 stack했는가 nonconst로 stack했는가를 기억했다가, 외부에서 objectspace에 접근할때 member가 nonconst라면 에러를 내뿜도록 하면 어떨까?
  - Node::isConst()를 사용하면 된다.
  - scope는 stack(const Object&) stack(Object) 2개를 만든다. 그리고 TWeak<Object>와 TWeak<const Object> 2개를 둔다. 이렇게 2개를 두는 이유는 const 또한 타입의 일종이기 때문에 C++에서는 하나의 타입 A를 둬서 const, nonconst 겸용으로 바인더를 쓰게끔 할 수가 없기 때문이다.
  - stack안에서는 const Object이면 TWeak<const OBject>를 bind()하고, TWeak<Object>.release() 하는식으로 한다.
  - 이후, 외부에서 scope[""] 나 scope.get("name")으로 멤버를 접근하려고 하는 경우에, 외부에서 주입된 Object가 const인지 nonconst인지를 알수 있으므로, 이를 고려해서 접근하도록 만들 수 있다.
- *3안 const를 위한 별도의 배열을 object 마다 하나씩 만든다. 메모리는 증가하지만 object space 삽입시 로스는 없다.*







## Scope의 LocalSpace 알고리즘 최적화

- IDE 모드일 경우

  - getMember(const String& name)으로 Scope객체에서 심볼을 찾는다. 따라서 Scope의 LocalSpace에 지역변수가 들어만 가있으면 된다.
  - 지역변수 생성시 LocalSpace에 변수를 push하며, 함수가 끝나면 Method는 LocalSpace를 release() 해버리면 된다. (자기껏만)
  - 블록문이 끝나면 LocalSpace의 해당 element만 release된다.
  - LocalSpace는 Array<Bind<Object>>가 된다. (Reference나 Object가 올 수 있다.

- 실행모드일 경우

  - 컴파일러는 코드를 완전히 분석, 실행하여 이 시점에서 생기는 지역변수가 몇번 index의 LocalSpace에 들어가는지 파악해야 한다.
  - 그렇게 되면,
    - 지역변수를 생성하는 Statement는, push가 아니라 setElement를 쓰도록 해서 탐색 속도를 낮추고 메모리 점유를 줄일 수 있다.
    - 심볼 접근시 문자열 비교가 아니라 getElement(index)로 하면 더 빨라진다.
  - 그 이외의 블록문이 끝나면 LocalSpace에서 remove하는 것, 함수가 끝나면 Method는 LocalSpace를 release() 해버리는 것(자기껏만)은 동일하다.

- 고찰내용

  - 메소드에서 같은 클래스의 다른 메소드를 부르는 경우, 만약 "지역변수는 LocalSpace에 선언될때마다 들어간다" 라는 것이면
    - \1. 매번 객체생성해야한다.
    - \2. LocalSpace에 push, pop을 해야 한다. 매 메소드마다. 이건 꽤나 큰 loss일 수 있다.
  - 만약 메소드가 LocalSpace를 각각 들고 있고, 여기에 지역변수들이 이미 들어있다면 어떨까? push, pop은 인스턴스를 빼고 넣는게 아니라 단순히 이 원소를 사용한다 사용하지 않는다는 표시만 하는 거라면.
  - 지역변수는 블록문이 있다면 중간에 소멸되기도 해야 한다.
    - 최적화가 되었을때 인덱스는 항상 유지가 되어야 한다. getMember(index)로 접근할 것이기 때문이다. scope에서 배열은 고정되어야 하며, 원소들은 삭제가 일어나서는 안된다.
    - LocalSpace[n].release(); 를 하도록 한다.
    - 블록문이라는 클래스를 만듬으로써 해결한다.
  - x 1안 Array로 member를 구성해둔다. 그리고 리사이클한다
    - 지역변수의 소멸/생성보다 확실히 미리 잡아둔 뒤에 init하는 편이 빠르긴 하다.
    - init을 하면 안되는, 반드시 생성자를 거처야만 하는 케이스가 있을까?
      - C++이 아니라는 점을 되새겨 보자. init이 수행되는 타겟은  결국 Object다.
      - 개발자가 Object에서 상속받은걸 모듈로 만들기 때문에 생성자를 그대로 사용하면 안될 것이다. 생성자는 1번만 호출 되는 것이며, 생성자를 대신할 월드만의 API인 onConstruct()  인걸 overloading해서 사용해야 한다.
      - 사용자가 만들어놓은 모듈안에 있는 Object를 onConstruct()된다고 하자. 무엇이 발생해야 하는가?
        - Object의 모든 멤버변수들이 초기화되고, 사용자의 생성자함수가 불러져야 한다. 문제는 모든 멤버변수를 월드는 모른다. 사용자는 생성자 대신 이걸 써야 한다.
        - 레퍼런스 초기화가 안된다. 이건 limitation으로 걸 수 있다.
        - 복사생성자는?
          - 1안 그것도 만든다.
          - 2안 대체가 불가능한지 검토 한다.
        - 직접해보면서 검증하자.
          - class MyModule : public Object {
          - private:
            - String* msg;
            - DirectX9Device* device;
          - public:
            - const Result& construct() {
              - msg = 0;
              - device = 0;
            - }
          - }
        - 1안 construct()를 만든다.
        - x 2안 release()로 대체가 불가능한가?
          - release는 원래 있는 걸 재사용하는 것이다. construct라는 메소드를 만들지 않아도 된다.
          - 명시적으로 생성자를 호출할 수는 없다. 근데, 이게 진짜 단점은 아닐 것이다. 원래 그런것이다.
          - msg = 0 같은 케이스는 release에서 대체가 불가능하지....않나?
            - 어짜피 생성자에서 msg = 0으로 된다.
          - 복사생성자는 어떻게 되지?
            - int a = b;
              - Object::assign(obj);
            - MyChildModule b;
            - MyModule a = b;
              - Reference::assign(ref);
                - return binder->assign(ref);
          - 예제
            - class MyModule : public Object {
              - MyModule() : msg(0), device(0) {}
            - public:
              - const Result& release() {
                - if (msg)
                  - delete msg;
                - msg = 0;
                - if (device)
                  - device->ReleaseDevice(0, 0, 0, 0)
                - device = 0;
              - }
            - }
          - --> 고찰을 통해서 지역변수 리사이클은 폐지되었다. 이는, 사용자가 C++ 클래스나 메소드 안에서 지역변수를 만들때는 "생성자 이벤트"를 월드에서 호출할 방법이 없다. 사용자가 클래스를 정의할때 생성자에 "내가 최종 구체클래스라면, 생성자이벤트를 호출하라" 라는 걸 만들 수 밖에 없다.
          - --> 혹은 사용자는 소멸자 코드를 "진짜 ~소멸자()"와 "release() 함수 안에서 state를 통해서 소멸자여부를 판단해서 수행하는 것"  2개로 나누는 방법도 있으나, 이것도 사용성이 번거롭기는 마찬가지다.
    - Container
    - Cell : Container
    - TCell<Node> : Cell
      - getElement에서는 캐스팅 하지 않음. insert, remove에서만 실시함.
  - v 2안 Array로 멤버를 구성한다. 리사이클은 하지 않는다.
    - IDE모드냐 최적화모드냐에 따라서 동작이 변한다.
    - IDE 모드일 경우
      - getMember(const String& name)으로 Scope객체에서 심볼을 찾는다. 따라서 Scope의 LocalSpace에 지역변수가 들어만 가있으면 된다.
      - 지역변수 생성시 LocalSpace에 변수를 push하며, 함수가 끝나면 Method는 LocalSpace를 release() 해버리면 된다. (자기껏만)
      - 블록문이 끝나면 LocalSpace의 해당 element만 release된다.
      - LocalSpace는 Array<Bind<Object>>가 된다. (Reference나 Object가 올 수 있다.
    - 실행모드일 경우
      - 컴파일러는 코드를 완전히 분석, 실행하여 이 시점에서 생기는 지역변수가 몇번 index의 LocalSpace에 들어가는지 파악해야 한다.
      - 그렇게 되면,
        - 지역변수를 생성하는 Statement는, push가 아니라 setElement를 쓰도록 해서 탐색 속도를 낮추고 메모리 점유를 줄일 수 있다.
        - 심볼 접근시 문자열 비교가 아니라 getElement(index)로 하면 더 빨라진다.
      - 그 이외의 블록문이 끝나면 LocalSpace에서 remove하는 것, 함수가 끝나면 Method는 LocalSpace를 release() 해버리는 것(자기껏만)은 동일하다.

- LocalSpace는 어떻게 관리되는가?

  블록문 으로 해결한다.

  - 1안 Scope에서 Unique로 관리. 이경우 메소드는 Scope를 사용하는 관계가 된다.
    - 1안 메소드는 시작전에 esp를 저장하듯이 pop을 해야 하는 index를 알고 있어야 한다.
    - 2안 Cell로 구성한다.
      - LocalSpace를 Cell<Bind<Node>>로  구성한다.
      - 블록문이 끝나면 setElement(index, NULL)로 만든다. Cell이라도 sort는 일어나지 않는다.
      - Method가 끝나면 Method는 처음 시작시 알아둔 LocalSpace의 length로 복원한다.
  - 2안 매 메소드호출에서

- 더 최적화할 수 있다.

  - Statemenet의 심볼이 LocalSpace인지, 어느 객체의 것인지 정해놓으면 더 빨라질 수 있다.
  - LocalSpace::pop()은 심볼을 진짜 삭제하는 것이 아니라





## scope에서의 식별자 검색과 모호성의 오류의 기준

- 인터프리터는 파싱하면서 식별자를 Scope에게 질의한다.
- Scope는 LocalSpace, ObjectSpace(me, this), GlobalSpace 3개의 영역을 갖고 있고, 각 영역에 식별자와 매칭되는 객체를 찾을때까지만 탐색한다.
- 만약 LocalSpace에 객체를 찾지못하면 ObjectSpace에 질의하고, ObjectSpace에서도 찾지못하면 GlobalSpace에서 질의한다.
- 만약 한 Space에서 2가지 이상의 식별자가 발견되더라도 블록문 안에 있는 경우에는 예외적으로 허용되기때문에 존재할수 있다.
- 따라서 블록문기준으로 중복을 체크하던가 아니면 validation에서 이걸 처리해야 한다.
- 시나리오
  - class MyClass
    - int a
    - int b = 1
    - void foo(int aa)
      - int b = 2
      - void foo(int a1)
      - foo(b)
        - // b는 LocalSpace에 있으므로 ObjectSpace의 a는 탐색하지 않는다. 값은 2이다.
        - // 그러나, this.foo(aa) 도 매칭되지만 me.foo(aa)도 매칭된다. 같은 ObjectSpace이므로 모호성의 오류가 발생된다.
        - void _koo()
          - do-somthing...
        - void _goo()
          - _koo() // 에러. _koo는 me._koo()가 될텐데, me는 _goo이며 아무런 nested method를 갖고 있지 않다. _koo()는 foo()가 갖고 있다.
  - MyClass cls
  - cls.foo()
- 1안 space별로 별도로 가져간다.
  - GlobalSpace  & ClassSpace : isConsumable(msg) 가 2개 이상 있으면 안됨
  - LocalSpace : 있어도 됨. 맨 앞에거 기준으로 찾음.
  - Scope의 space는 container로 구성되어있으며 global과 classspace는 각각 container가 다르다(array vs chain) 따라서 이 둘을 합칠 수는 없으므로 별도의 class space라는 걸 만들지는 않는다. scope.validate()를 하거나 별도의 경로로 scope가 감지하도록 한다.









## Scope_중_지역변수와_함수명의_충돌문제

- 지역변수는 a.foo 처럼 접근하는 것이며 함수는 a.foo(void)로 접근하는 것이다. 표기가 다르므로 충돌이 일어나지 않는다. --> #객체의_함수_접근이_이름만_가지고는_불가능하다_왜냐하면_오버로딩을_지원하기_때문이다 참조.

- 단, 앞으로 Deduction을 지원하는 경우에는 함수명만 가지고 사용할수 있어야한다. 만약 이걸 지원한다면 애로사항이 생길수 있다.

- 고찰 내용

  - c++에서는 지역변수와 함수명이 같을 경우 어떻게 할까. 사용법이 다르기 때문에 코드상에 모호해지는 케이스는 없다.

  - 반면 변수명과 클래스명은 모호해질 수있기에 이것은 100% 에러일 것이다. 또한, 반면 변수명끼리는 겹처도 무시를 해주지 않는가. 대표적으로 블록문안에서의 중첩된 변수명의 경우. 어떤때는 중복이라며 에러를 내보내야 하고, 어떤때는 중복이라도 그냥 가야한다. 이 컨셉을 정해야 한다.







# 복제 상속
접근자  오버라이딩

```cpp
import console

def app
    // 중첩클래스(nested class)
    def Plant
    	Plant(): console.out("default ctor")
    	Plant(#str new): _name = new

    	_name = "Plant"
        str getName(): _name
        // _age = 1 // Leaf에도 _age가 있기 때문에 Leaf에 중복정의에러 발생한다.
        int getAge(): _age

	// 메소드 재정의Overriding:
	//  * 함수 명세signature가 같은 경우 overriding으로 판단한다. (= Java)
	//  * 함수명과 인자리스트(즉, header) 까지만 일치할 경우, 메소드 은닉hiding 된다.
    def Plant Leaf
		// 생성자constructor: <타입명> ()
		// 객체가 생성될때 호출되는 메소드다. 다음의 규칙을 따른다.
		//	1. 생성자가 1개도 서술하지 않은 경우 인터프리터는 기본생성자를 만든다.
		//	2. inline 초기화가 끝난 뒤, 생성자가 호출된다.
		//	3. 부모클래스의 생성자를 명시적으로 호출할 수 있다.
		//	4. 부모클래스의 생성자를 명시하지 않으면 부모의 기본생성자가 호출된다.
		//	5. 부모생성자 호출 구문은 반드시 생성자 메소드 처음에 나와야 한다.

    	Leaf() {} // 별다른 서술이 없어도 인터프리터는 부모클래스Super의 기본생성자를
    			  // 호출한다.
		Leaf(int new) // 생성자에는 재정의 재지정을 넣을 수 없다. 순서는 정해져있다.
			Super("SuperLeaf") // 맨 앞에 와야 한다.
			age = new //

        str getName(): "Leaf" // overriding
        _age = 3.5
        float getAge(): age // 반환형이 다르므로 은닉이다.

    void main()
        p = Plant()
        if 1
            p = Leaf(3)
       	console.("name=" + p.getName() + ", age=" + p.getAge())

// 결과: name=Leaf, age=3
```






# 확장

```cpp
import console

// 타입 확장:
// worldlang은 이미 정의된 타입의 인터페이스를 확장(추가)할 수 있다.
// 이 모든 과정은 반드시 컴파일 타임에 확정되야 하며, 다음의 규칙을 따른다.
//	1. 총 3가지 방법이 있다. 상속(이전 섹션 참조), 타입확장문법, 인스턴스 확장문법
//	2. 확장문법은 크게 동일하며, 단, 아주 약간의 변화가 있다.
//		<타입> {
//			멤버(메소드, 변수) 정의
//		}
//		(즉, 이제껏 클래스 정의와, 메소드 안에서 변수 정의 모두 타입 확장문법이다.)
//
//	2.	클래스 확장class-extension: +<클래스>
//		미리 정의되어있는 클래스에 새로운 인터페이스를 주입한다.
//		다음의 규칙을 따른다.
//			a. 주입한 인터페이스 안에서 protected 멤버에 접근할 수 없다.
//				(캡슐화encapsulation를 깰 수 없기 때문이다.)
//			b. 은닉되지 않는다.
//			c. overriding 되지 않는다.
//
//	3.	메소드 또한 타입이다. 따라서 메소드 또한 메소드를 확장할 수 있는데,
//		이를 클로져라고 한다. (추후 서술)
+str
	str(#MyClass my) // 생성자
		console.out("str(#MyClass)")

MyClass
	// 4. [x] 인스턴스-확장Instance extension: <멤버변수 정의> { <멤버 정의> }
	// 지정한 1개의 객체의 타입을 확장한 후, 즉시 정의한다.
	// 확장된 타입은 재사용할 수 없다.
	str name // 멤버변수 name 정의
        res set(#str new) { // overriding
        	console.out("name will be changed to " + new)
        	name = new // 에러. 컴파일은 가능하나, 무한 재귀 호출 된다.
        	return ok

	// 위의 str name {} 과 동일하다.
	str name1
    	// 위의 res set(#str new)=>과 동일하다.
    	set=>: console.out("name will be changed to " + new)

    void print(): name1 = "hello"; console.out ("void print() : " + name1)
    int print(int a): console.out("int print(int)")
    //	name과 name1은 같은 set 메소드를 지니고 있으나, 이 둘은 별개의 메소드다.

	A // 여태까지의 class 정의도 사실은 확장문법이다.
		void $print()
			console.out("MyClass.A.print()") // A는 이제 print()를 갖게되었다.
			// 위의 str name1 케이스와 다를께 없다.


	// type변수:
	// type은 class들을 담을 수 있는 메타클래스 타입이다.
	type $C
		get: return A


MyClass.A a // 전역객체 a
MyClass.B b
// MyClass.C c // 컴파일에러: MyClass.C는 변수다.
type[] types = [MyClass().B, MyClass.C, MyClass.A]

+MyClass
	// int name1 // 컴파일에러 Rule#2: 중복 정의
	// float print(): console.out("float print()") // 컴파일에러 Rule#2: void print().
	// void print()와 float print()를 피호출자callee는 구분 할 수 없다.
	float print(float a): console.out("name=" + str(this) + (str) this)


MyClass MyClass2
	(age, grade)=> (int, float) print(float a)
		console.out("MyClass.print(float) has been extended.")
		return (age, grade)

	/* 다음과 동일하다
    (int, float) print(float a)
    	(int age, float grade) = me.Super(a)
    	console.out("MyClass.print(float) has been extended.")
    	return (age, grade)
    */

app
	void main()
		MyClass me
		me.print()
		me.print(3.5)

/* 결과:
	will be changed to hello
	void print() : hello
	str(#MyClass)
	str(#MyClass)
	name=hellohello
	MyClass.print(float) has been extended.
*/
```


## 1
-   이미 존재하는 클래스A에 메소드, 멤버변수를 추가하는, 클래스의 내용물을 add 하는 기능이다. 주로 연산자 오버로딩을 정의할때 사용한다.
-   import kukullza.print
-   class COut
    -   COut operator+(COut rhs)
        -   ...
-   class MyMyModule
    -   MyMyModule()
        -   ...
    -   Node to(Class cls)
        -   Node casted = [super.to](http://super.to/)(cls)
        -   if(casted) return casted
            -   --> return if([super.to](http://super.to/)(cls))

        -   if(cls == COut)
            -   return COut(age);
    -   MyMyModule +(MyMyModule rhs)
        -   ....
-   class COut extend kukullza.print
    -   COut operator+(MyMyModule m)
        -   return COut(m.age)
    -   Node to(Class cls) //--> compile에러. print.Cout 은 이미 to가 있을 수 있다. 그 경우 MyMyModule(Cout) 생성자를 이용해야 한다.
        -   ...
-   COut + MyMyModule() // ok
    -   1. COut.+ 후보군을 모두 뽑는다.
        -   +(COut)
        -   +(MyMyModule) 2개.
    -   2. 정확히 MyMyModule을 받을 수 있는 +()가 있으면 그걸로 한다.
    -   3. 만약 없는 경우 인자가 캐스팅 될 수있는지 따진다.
        -   만약 extend from을 안했다면 MyMyModule이 COut이 될 수 있는가. 캐스팅이 되는가. 캐스팅은 to를 통해서 이루어진다.
        -   COut(MyMyModule)이 define이 되어 있다면 MyMyModule --> Cout이 가능한 상태가 되므로 호출될 수 있다.
    -   4. 가능성이 여러개만 모호성의 오류가 나온다.
-   MyMyModule + Cout // ok
-   MyMyModule m1 = COut() // ok
-   COut c1
-   MyMyModule m1 = (MyMyModule) c1
-   extend from이 의미는 확실한데 너무 길다. 한 단어로 줄여본다면? --> 걍 extend로 하자.
-   파서가 어떻게 원본을 읽지 않은 상태에서 extend를 만났을때 원본을 먼저 읽도록 유도할 수있는가?
    -   먼저 읽도록 유도는 불가능하다. 이러면 C++ include의 동작과 동일하기 때문에 결국은 무한순환재귀 오류가 생겨버린다.
    -   Generating단계외 linking단계를 2개로 만들어 2pass로 ClassStackingUp 알고리즘으로 해결한다. --> #클래스_Generating과_상속문제
-   예전에는 넣지 말자고 생각했었다. 그 이유는...
    -   이 기능은 장점보다 단점이 매우 많아 지원 하지 않기로 결정되었다. 근거는 다음과 같다.
    -   장점이 희박하다. 개발자가 임의클래스A의 코드를 알지 못하며, 클래스의A의 멤버변수와 함수를 접근하거나 사용할 수 없어야 하며, 부득이하게 자신의 코드를 클래스A가 속한 컴포넌트에 주입시킬 방법이 없거나, 원 개발자가 마련해 두지 않을때 아주 제한적으로 사용이 가능하다. 단, 이렇다하더라도 주입한 코드가 기존의 로직에는 영향을 미치지 않는다.
        -   왜냐하면 주입할 클래스의 코드를 모른다는 전제조건이 있기 때문이다. 코드를 안다면, 그 코드에 바로 수정을 하면 된다. 모르기 때문에 이 기능이 필요한 것인데, 모른다는 것은 기존 함수나 멤버변수를 호출 할 수 없다는 것과 동치다. 따라서 의존성을 주입하는 것이 아니라 단순히 "완전히 기존 로직과 분리된" 로직을 투명한 벽을 사이에 둔 채 추가하는 것" 뿐이다. 설사 추가하였더라도 기존의 로직은 추가한 로직을 호출할 방법이 없으므로, 사실상 서로 영향을 미치지 못한다.
    -   고찰해보면 오버라이딩을 가로채는 용도 + 외부에서 호출하는 용도(이를 테면 operator+(int))로만 사용이 가능하다.
    -   오버라이딩을 가로챈다는 것은 기존 OOP에서도 가능하다. 하지만 이걸 제한두지 않고 문법을 통해서 보다 편리하게 해준다는 것은 마치 이러한 OOP룰을 어기는 걸 권장하는 듯한 늬앙스를 갖기 쉽다. 개발자가 만들어둔 클래스 집합은 하나의 컴포넌트로써, 말하자면 잘 가꿔진 정원과 같은 것이다. 이걸 수정하는 건 상당한 리스크를 동반하며 일반적으로 속속들이 잘 구현을 꿰고 있을때 가능하다. 그렇게 되려면 코드를 다 알 고 있어야 할 것이다.
    -   고찰내용
        -   어디서든 이미 만들어진 특정 클래스의 메소드 구성을 추가할 수 있다.
        -   그 형식은 클래스를 선언/정의하는 것과 똑 같다.
        -   컴파일 타임에 확정되므로, World의 정적 에러 체크는 논리적으로 작동가능하다.
        -   실제 코드는 분산되지만 소프트웨어의 브라우징은 비주얼로 이루어지기 때문에 마치 처음부터 한 곳에 정의된것처럼 보여지게 할 수 있다.
        -   덮어쓰는 것은 안된다. 어디까지나 추가만 가능하다.
            -   덮어쓴다는 의도는 사실 중복정의로, World 입장에서는 선후관계를 알 수 없다.
        -   예제
            -   ///////// 외부 모듈에서 가져온 것들 ///////////////
            -   class Person
                -   result eat() { Console.out("Do Nothing!") }
                -   string name = ""
            -   class Student
                -   Student()
                    -   name = "Chales"
            -   //////////////////////////////////////////////////////
            -   // 여기서부터 개발자의 World 코드
            -   class Student
                -   result eat() // 외부 모듈의 클래스에 eat를 오버라이딩함.
                    -   // 만약 외부모듈에 eat()이 있었다면 여기에서 에러가 발생한다.
                    -   Console.out("Let's eat!")
            -   class Main
                -   result main(String[] args)
                    -   Student std
                    -   std.eat() // --> Let's eat!이 나온다.
        -   문제점은 없을까? 물리적으로는 가능한데, 논리적으로 맞을까?
            -   대체 무슨 장점이 있는가?
                -   오버라이딩을 가로챈다.
                    -   c++에서는 이럴때 클래스를 상속해서 오버라이딩 하는 게 정석이다.
                        -   class MyStudent : public Student
                            -   result eat()
                                -   Console.out("Let's eat!")
                        -   result main(String[] args)
                            -   MyStudent std
                            -   std.eat()
                    -   만약 모듈A가 이미 잘 동작하고 있을때 그 중에서 특정 함수의 기능만 살짝 추가하고 싶은 경우가 있을 수 있다. 그러나 모듈A의 코드를 볼 수는 없다. 그리고 추가하고 싶은 함수는 모듈외부에 드러나지 않고 내부에서 사용되는 것들이다(이를테면 Logger) 내부소스를 변경하지 않고 코드만 변경하고 싶다면?
                    -   이럴때 사용할 수 있지 않을까?
                        -   하지만 함수가 정의되어있지 않아야 한다는 제약이있다. 따라서 매우 드문것이다. 그런 케이스는.
                -   멤버변수를 조작할 수 있다.
                    -   함수를 넣을 수 있다는 건, 그 함수 안에서 멤버변수들을 조작할 있다는 것이다. 이는 장점과 동시에 단점이 된다.
                    -   사실상 접근제한자를 무시할 수 있는 방책이 생긴것이다.
            -   쉽게 중복정의가 되버릴 수 있다.
                -   모듈A를 가져왔다.
                -   거기에서 오버라이딩을 하고 싶어서, B클래스에 추가했다.
                -   모듈B가 필요해서 가져왔다.
                -   그런데 모듈B에서도 A모듈의 B클래스에 함수를 추가하고 있던 것이다.
            -   Namespace 가 중요해보인다.
                -   그냥 class Student라고 적으면 안되겠지. 모듈A안에있는 Student라는 걸로 인식되어야 한다.
                -   이건 namespace 를 정의하는 문제와도 닮아있다.
            -   유효성이 깨진다.
                -   클래스는 책임을 중심으로 돌아간다. 접근제한자를 둔것은 그것을 막기 위한 것이다.
                    -   그렇지 않다. 사실상 friend를 하건, Java reflection을 하건, 상속을 하건 해서 하려고하면 얼마든지 피할 수 있다.
                -   접근제한자의 의미는 "다른 개발자들이 무엇을 집중해야 하는지"에 달려있는 것일 뿐이다.
                -   정리하면 유효성은 깨질 수 있다. 그리고 World는 어떻게 설계하든 그것을 막을 수 없다. 그것은 개발자의 역량에 달린 것이며, 우리가 할 수 있는 것은 개발자들이 그러한 것을 하고 있을때 최대한 개발자로 하여금 "내가 잘못된 것을 하고 있구나" 라는 감각을 주는 것 뿐이다.
                -   함수를 만들어서 집어넣는 것은 그러한 감각에 둔하게 느껴지지 않는가?
                    -   리플렉션에 비해서.



## 타입 확장문법

```cpp
def A
 void foo()
 _name = ""

//...
//...

//def +A := 5 : X 객체 초기화 구문은 확장시 적을 수 없다.
def +A // "+". 상속 정보는 따로 적을 수 없다.
 //void foo() X. overriding이 아니라, 재정의다.
 str getName(): _name // O : protected 변수도, 확장후, 제어할 수 있다.
```

* **클래스 확장문법은 이제, protected도 public도 다 제어할 수 있다.**
* 클래스 확장은 오직 public만 호출 할 수 있다. 캡슐화를 깰 수 없다.











# 제네릭

## 제네릭의 기본

### [x] 1안 파라메터화된 타입도 결국은 멤버변수의 일종이라고 치환하면된다.
* Stmt는 타입이 들어갈 자리에 scope를 사용해서 scope["T"]로 바꿔놓기 만 하면 된다.
```cpp
def A<T> // A["T"] 는 obj("T") 라는 member.
	void foo()
		t1 := 3 // AddLocalMember(scope, AssignExpr(CloneExpr("t1", scope["Int"]), CloneExpr(scope["Int"], {3}))
		t2 := T() // AddLocalMember(scope, AssignExpr(CloneExpr("t2", scope["T"]), CloneExpr(scope["T"], {생성자인자}))

		T := 33  // 컴파일에러.
	    		// parameterizedType은 이름 경쟁에서 우선순위를 가져야 한다.
```

* 실패. 객체를 미리 생성해둬야 하는 이런 작업에는 취약하다.

```cpp
def A<T>
	t1 := 3
	t2 := T()
```

### [v] 2안 바인딩할때, 별도의 클래스들을 뽑아낸다.
* 지금까지 지식 remind
	* 컴파일은 syntax parsing이 되었느냐를 의미한다.
	* Binding은 각 객체에게 질의하고, 객체는 binding 여부를 반환한다.
	* optimizing은 binding을 다시 수행하면서, scope["a"]를 scope[2] 료 교체하	거나하는 행위이다.

* 컴파일 타임에 syntax 검증만 해서, 미완성 origin객체인 A<T>를 만들어낸다.
* class 미완성객체  는,
	* origin객체로 동일하게 취급되어서는 안된다. 그러나 구조상 Obj와 굉장히 흡사하기 때문에 Obj의 일종이 되어야 할것이다.
	* 미완성객체는 C++ 멤버변수로 ParameterizedTypelist를 들고있으며 이를 VISIBLE한다.
	* 미완성객체는 컴파일시 각 구문과 멤버변수에서 T가 사용한 곳마다 구멍을 뚫어놓는다.
		* 이 구멍은, Obj가 들어가야할 곳에 ParameterizedObj라는 객체를 생성해둔다.
		* ParameterizedObj는 사용자가 원했던 <T>가 0번째 인자이므로, "0" 이라는 int값만 기록해둔다.
	* binding을 하기 위한 API를 제공해야 한다.
		* binding API보다는 하위 클래스여야 한다.

	* Obj create(파라메터라이즈드 타입리스트) API를 제공한다.
		* 미완성객체는 자기자신을 복제하고, 복제품의 ParameterizedTypeList에 주입된 인자를 할당한다.

* 컴파일러는 worldlang syntax를 통해 A<int>를 보면, scope["A"].create("int")로 A<int>를 만들어낸다.

* 나중에 A<int>는 다른객체들과 동시에 binding이 실시된다.
* binding이 실시되었을때 보통은,
	* 멤버변수에서는 주어진 초기화구문의 바인딩과
	* 메소드 내의 바인딩을 실시하지만,
* 미완성객체.binding API는,
	* 그것을 하면서 ParameterizedObj*가 있던 자리를 그 index n을 멤버변수인 ParameterizedTypeList에 있는걸로 교체한다.

* 바인딩도 끝나고, C-REPL도 아니라면, 이제 미완성객체는 메모리만 차지한다. 버려진다.


### [v] Q. Array는 Native에서 나온다. 하지만 generic이 되어야 한다.
* 미완성객체 라는 클래스는 Object 밑에서 나온다.

### [x] 1안 Array는 Node의 일종으로 한다.

### [v] 2안 Container 전부를 미완성객체에서 상속받도록 한다.
* 그 말은 C++ template로 만들걸 그대로 미완성객체로 만들 방법이 있어야 한다. 매크로로 지원을 해줘야 한다.

### 알고리즘

* 프로그램 시작전에 C++ native들은 다 Wrapper로 읽혀져서 scope에 등록된다. 이 wrapper들은 추가로 컴파일&링킹 하지 않는다.  c++이 해줬기 때문이다.
* 컴파일러는 월드 코드를 읽어서 객체의 모양새만 만들어 놓는다. 만약 월드코드에서 Array를 사용했다면 "Array"라고 하는 미완성객체를 복제해서 멤버로 넣거나, 복제하는 statement를 만든다.
* Method 내에서만 정의된 Origin객체는 Method의 member로 등록된다. 그리고 method가 실행될때 scope와 OriginManager에 이들이 자동으로 등록된다.
	* 그러므로 Array<int> 와 같이 월드코드를 짠 경우 Array<int>라고 하는 origin객체가 OriginManager에 있는지 확인한다. OriginManager는 cache처럼 동작하며, 없을 경우 새로운 객체가 등록된다. 그리고 Pointer를 Method에 멤버로 넣는다.
	* 이후 다른 메소드에서 다시 Array<int>가 등록된 경우, OriginManager에 먼저 질의하고 있으면 pointer만 준다.
* 그러나 지역변수의 경우는 실제 정의가 되는 순간에 등록된다.
* 컴파일이 끝나면 Linker라는 별도의 객체에서 링킹을 시도한다.
* 링커는 Node::getMembers()를 visitor 패턴으로 탐색&scope 갱신을 하면서,
	* 먼저 OriginManager들을 bind 시도한다. 이들은 대다수가 global scope에 들어 있다.
	* 링킹되지 않은 미완성객체는
		* 미완성객체에 주어진 T를 scope에 넣고 링킹을 시작해서 멤버들의 코드의 T 부분을 채워넣는다.
		* 객체의 멤버 "T" 는 리플렉션용으로 그대로 놔두고, 이 객체는 더 이상 미완성이 아니라는 걸 표시해준다.
	* 메소드라면 메소드 내의 statement를 검증하고
	* Statement라면 현재 scope에서 주어진 member를 찾을 수 있는지 검사하고
	*





## 템플릿

Q. 정적 타입은 반드시 템플릿을 지원해야 한다?

Q. Container를 템플릿이 없이 구현이 가능한가?

### 1안 - 왕도

```cpp
def MyType<T>
    age = T null
    T get()
        return age
```





## [v] Generic의 구현

### [v] Q. 클래스를 먼저 어떻게 다룰것인가?

### [x] 1안 T가 다르면 새로 클래스를 생성한다.(c++방식)



### [v] 2안 Generic 타입 T에 종속적인 경우,

* 다른 타입T로 된 클래스들도 같은 Generic에서 나왔다면 같은 클래스를 재활용한다.
* 일단 중요한 포인트는, 문법적으로 본다면 T가 다르다면 다른 클래스라는 점이다. overriding을 위해서라도 T가 다른데 같은 부모로 엮을 수는 없다. 여기서는 클래스를 재활용이 과연 구현적으로 가능한 것인가를 논의하고자 한다. 즉 generic의 구현이다.

### [v] 2-1안 T를 별도로 갖고 있는다.

```cpp
:1
class genericManagedObject : public managedObject
{
private:
    orginList _orgs;
};
```

* 순서

  1. Parser는 generic 메소드를 컴파일 할때, Generic<T>로 이름을 넣어서 저장해둔다.
     1. class Generic : public Object
  2. Generic에서 각 stmt는 scope["T"] 식으로 참조하도록 한다.
  3. generic 클래스는 컴파일만 해두고 링킹은 하지 않는다.
  4. 해당 클래스를 사용할 경우(예, Generic<int>) originList에 nt를 1개 name이 "T"인 int로 넣어 복제한다.
  5. Generic<T>는 T가 없는 비어있는 클래스로, 컴파일이 끝나면 버린다.
  6. Generic<int>는 Generic<T>와 아무런 관계가 없다.
  7. scope에서 해당 Generic<int>를 찾는다. 없다면 검증된 적 없는 것이다.
  8. scope에 Generic<int>를 먼저 넣는다. 이는 무한 validation을 막기 위한 것이다.
  9. 그후 그 객체에 대해서 linking 에러를 validation 한다.
  10. stmt에도 넣는다.
  11. 빌드 성공.
  12. Optimization으로 코드를 더 간략하게 만든다.
  13. 런타임시 genericManagedObject는 class scope를 주입할 시점에 orgs의 값을 같이 넣는다.



* 결과

  * class scope에 주입된 T는 항상 같은 index에 위치하게 되고, stmt에서는 scope을 통해서만 T에 접근이 가능하므로 역시 문제가 없다.

  * world는 객체와 타입의 구분이 없으므로 역시 문제가 없다.

  * 런타임에도 T에 항상 접근을 해야 한다.



* 엣지 케이스 도출

  * [v] (배열)은 어떻게 되는가?
    * worldlang
      * 배열은 C++로 된다. 그리고 template은 world로 open 되지 않는다.
      * class Array : Generic
        * virtual const Object& getTrait() { return getTraits()[0]; }
      * 컴파일러는 해당 TypeTraits 배열을 채워놓기만 하면 된다.
    * cpp
      * class TArray : Array
        * virtual const Object& getTrait() { return static T inner; }

### [x] Q2. Native template을 generic으로 public 지원 할 필요가 있는가?

* native Template를 사용해서 생성된 템플릿 클래스를 일반 클래스로써 public으로 지원하면된다.

### [x] Q3. 2번이 맞다면, 그 방법은?























































# 오버라이딩 재지정 연산자

```cpp
import console

def Person
	int print(int a): console.out("print(int a)"); return 0
	float print1(): console.out("print1()"); 2.5
	(int age, float grade) print2(): console.out("print2()"); return (24, 3.5)

def Person Student
	int print(int a)
		got = me.Super(a) // me.Super(a)는 Person.print(a)와 같다. (추후 서술)
		console.out("Student.print(int a)")
		return ret

    // 재정의 재지정Redirection지정자: (반환값 이름=>) <함수 명세signature> (=>)
    // 메소드 재정의overriding의 실행 순서를 쉽게 표현할 수 있다.
    // 메소드 재정의는 원본 메소드Supermethod가 있던 자리에 다른 메소드로
    // 덮어쓰는 것으로서, 재정의 한 메소드에서 원본 메소드를 호출 하게 되면
    // 코드를 "추가" 하는 구현이 된다.
    // 이때 재지정 연산자는 원본 메소드를 시작하기전, 시작 한 후 2 곳에 걸쳐서
   	// 지정할 수 있다.

    // 다음의 규칙을 따른다.
    //	1. overriding 메소드에만 사용한다.
    //	2. => 는 "기반 클래스의 오버라이딩된 메소드로 이행"을 의미한다.
    //	   ( "me.Super(인자리스트)" 와 같다.)
	//	3. => 이 함수명에 대해 앞인가 뒤인가로 수행 순서를 결정한다.
	//        ( "=>" 반대편에 Super 가 붙는다고 생각하면 이해가 편하다.)
	//        e.g. => 이 함수명 뒤에 붙는 경우: 내꺼 실행 후, 부모꺼 실행.
	//                        " 앞        "      : 부모꺼 실행후, 내꺼 실행.

	// 이를 활용하면, 다음처럼 줄일 수 있다.
    got => float print1()	// 재지정이 앞에 있으므로, 부모메소드가 먼저 호출된다.
    	console.out("Student.print1(), got=" + got)
    	return got 

	// 재지정이 뒤에 있는 경우, 메소드가 끝나면 주어진 인자리스트로
	// 그대로 부모메소드를 호출하고, 그 결과를 반환한다.
	(int age, float grade) print2() =>: console.out("Student.print2()")
    /* 이 코드는 다음과 동일하다.
    	(int age, float grade) print2()
    		console.out("Student.print2()")
    		return print2()

       그리고, 다음과 같이 해도 된다.
    	(int, float) print2() =>
    		if true
    			return (0, 0.0)
    		// 여기에 도달하면, 부모메소드의 반환값이 나간다.
    */


def app
	void main()
		s = Student()
		console.out("print()=" + s.print(1))
		console.out("print1()=" + s.print1())
		(int a, float g) = s.print2()
		console.out("print2()=" + a + ", " + g)

/* 결과:
	print(int a)
	Student.print(int a)
	print()=0
	print1()
	Student.print1(), ret=2.5
	print1()=2.5
	Student.print2()
	print2()
	print2()=24, 3.5
*/
```



# [v] 함수위임자
## 문제를 정리해보자.
* 2가지가 문제다.
    - 생성자 호출인지, 메소드타입을 정의한 것인지 구분이 안간다.
    - 메소드의 타입을 써넣은 것인지 메소드의 정의부를 넣은것인지 구분이 잘 안간다.

## 문제 케이스
```namu
str(int) // 메소드타입? or void의 생성자 호출? 아님 다음줄에 메소드의 body가 올까?
```


## 해법
```namu
// C++
class A
{
    public:
        // 객체:
        A foo()
        {
            return A();
        }
        // 메소드:
        function<void, int> func()
        {
            return [](int) -> void {
            };
        }
};


// 자바
new A();
interface Func {
    void temp(int age);
}
public Func foo() {
    return age -> {
        doSomething(age)
    }
}


// 파이썬:
A()
def foo():
    return lambda age: doSomething(age)



// [x] 1안: void(int)는 함수포인터다.
A()
def void(int) foo()
    ret void(int age) // 반드시 변수명을 넣어줘야 한다.
    //ret void(int)로 해버리면 void의 생성자로 인식한다.
        doSomething(age)

// 문제: 해결불가
void(int) // 람다의 정의인가, void의 생성자인가?



// 2안: ?
A()
def void ?(int) foo()
    ret void ?(int age)
        doSomething(age)

setCallback(void ?(int age)
    doSomething(age)
)
// 메소드명에만 ?넣고 변수에는 안넣는다. 일관성이 없다.
// ? 한글자를 넣는것보다 더 줄일 수 있는 방법은?
void ?(int) // 함수타입인지, 메소드의 정의부인지 구분이 잘 안간다.


// [x] 3안: fun
// 메소드 타입이 void(int) 처럼 쓰는 부분에서 이미 실패다.
A()
fun void(int) foo()
    ret fun void(int age)
        doSomething(age)

setCallback(fun void(int age)
    doSomething(age)
)



// [x] 4안: 다른 언어처럼, 메소드 1개 붙은 def는 메소드타입으로 취급한다.
// def는 객체로, 컴파일러가 메소드타입처럼 쓸 수 있도록 하므로 복잡해진다.
// 그리고 def안에 변수를 정의하면 어떻게 되는가?
A()
def func
    void temp(int age)

func foo()
    ret age ->: doSomething(age)


def func2
    void temp(int age)
    age := 3
func foo()
    ret age ->
        doSomething(age)
        age + 3


// [x] 4-1안: 메소드타입 정의를 위한 키워드를 추가한다.
// 동작은 가능하리라 본다. 키워드가 또 추가되는 셈이다.
A()
fun func: void temp(int age)
func foo()
    ret age ->: doSomething(age)


// [v] 5안: 메소드 또한 origin 객체다. 타입이 될 수 있다.
// 다음에서 힌트를 얻는다:
def test
    @ctor(int age): this.age = age
    age := 3
    //int getAge(): 55 와 동일하다.
    age getAge(): 55
    // age를 여기에 적었다고 해서, age 객체가 나가는 것이 아니다.
    // age의 origin인 int의 복제된 객체(occupiable일 경우) 혹은
    // age를 reference할 수 있는 것이 생성되는 것이다.

    void say(int age)
    say getComplex()
        ret c
    // test.say는 메소드객체다.
    // 그러나 마찬가지로 say를 반환형에 썼다고해서 say 자체가 나가는 것이 아니다.
    // say또한 origin객체이므로 타입이 될 수 있다는 것을 알 수 있다.
```

## 활용
```namu
A()
test say()
say foo()
    ret () -> test(doSomething(age))
// 파이썬 대비 1줄 추가로 정리할 수 있었다.
// 이정도면 대박 아닌가.



// 주의사항:
// 1. 전역메소드를 만들 수 있어야 한다.
test say(): null

// 2. private 라면 접근이 불가능하다. origin객체로써 사용도 불가능하다.
test _say2(): null
say2 foo() // 컴파일 에러.
    ret test().say

// 3. 메소드는 비어있을 경우 null이 반환된다.
test say()

// 4. 타입용도로 만든 메소드이지만 어쨌건 호출은 가능하다.

```




# 클로저

```cpp
import console

app
	str(void) foo()
		// 클로져closure: <메소드 안에서 메소드를 정의한다.>
		// 메소드를 확장한 것을 클로져라고 한다.
		// 클로져는 관련 요소factor들이 캡처capture를 통해 내부로 함축한다.
		// 인스턴스 메소드의 한 종류이나, 사용시에는 static 메소드처럼
		// 사용하게 되며, 일종의 외부로 늘어진 인터페이스로 만드는 것이 목표이다.
		//
		// 클로져는 다음의 특성을 갖는다.
		//	1. 자신을 포함하는 메소드outer-method와 지역변수local-scope를 공유한다.
		//	2. 중괄호 사용을 권장하지 않는다.
		//		앞서 서술했듯, 블록문에는 중괄호 사용이 원칙이다.
		//		하지만, 클래스와 그 멤버들direct members에게만 중괄호가 필수이며,
		//		그 이외의 경우인 메소드 안쪽에서는 편의를 위해 사용이 권장되지 않는다.
		//		메소드 안쪽에서는 편의를 위해 사용하지 않을 것를 권장한다.
		//	3. 	인터프리터는 해당 클로져의 구문을 파악하여 어떤 식별자를 캡처capture
        //		해야하는지 자동으로 파악한다.
		//	4.	클로져에 의해 캡쳐된 식별자는 클로져의 라이프 사이클과 동기화 된다.
		//		(즉, 지역변수일지라도 소멸되지 않는다)
		int sum = 0
		int add(int a, int b) // 클로져.
			sum = a + b // 클로져는 지역변수를 공유한다.


		// [x] 함수 위임자delegator: 
		// 메소드 또한 객체1st-class-citizen이며, 메소드에 바인딩된 모든 identifier는 origin 객체이다.
        // 따라서 메소드의 refer를 만들 수 있다. 객체하고 똑같다.
        // 이는 전통적인 java, C#의 형태와 유사한 것이다.
        //
		//	1. 	refer와 메소드간 타입은 정확하게 일치해야 한다.
		//		묵시적형변환과 관계없다. 단, 반환된 값은 물론 묵시적 형변환이
		//		적용될 수 있다.
		//			e.g.    float func(int a, str b)
        //                  int doSomething(func f, int a, str b)
        //                      f(a, b)
        //
		int(int, int) getClosure(): add

		int(int, int) fdelegate = int dummy(int a, int b) // 메소드에 대한 refer
			console.out("a=" + a + ", b=" + b)

		fdelegate += getClosure()
		// float(int, int) fptr1 = getClosure() // 컴파일 에러.
		// int(int, float) fptr2 = getClosure() // 컴파일 에러.
		if fdelegate(3, 5) == getClosure()(3,5)
        	MyClass // 중첩클래스.
        		int count = 0;
            	str(void) print(int(int, int) fdel)
                	str to_return() // 클로져를 반환하고 있다.
                		"answer to life the universe and everything is " + fdel(26, 16)

        	return MyClass().print(fdelegate)

        // else가 없으므로 명시적/묵시적인 return은 발생하지 않으며,
        // 반환형 str(void)의 기본값인 null이 유지된다.


    void main()
		str(void) fptr = foo()
		fptr()
        console.out("sum is " + sum)

/*	결과:
	a=3, b=5
	answer to life the universe and everything is 42
	sum is 42
*/
```


## 중첩메소드를 람다로 발전 시킬 수 있는가?

- 생각해보니, 이는 특별한 기능이 아니었다. 그냥 반쪽자리 람다에 불과하다.
- **이는 "지역 변수는 메소드가 미리 생성해놓고 있어야 할까 아니면 그때그때 생성해야 할까"를 해결하기 위한 것이다.**
- x 1안 변수 정보없이 공유한다
  - class A
    - foo()
      - void _nested()
        - cout << age // 이 age가 실제로 무슨타입인지 전혀 알 수 없다.
      - _nested() // 빌드에러
      - {
        - int age = 5
        - _nested()
      - }
      - {
        - float age = 3.5
        - _nested() // 타입 확정이 무너진다.
      - }
- 2안 이제 람다 문법과 설계가 정해졌다
  - class A
    - void print(int age)
      - void print(int newage) // err
      - void _print(int newage)
        - set(newage)
        - Console.out("age = " + _age)
      - void set(int age)
        - _age = age
      - int _age = 0
      - return print(int) // err





## 중첩 메소드 개념 기본

- 중첩메소드에 대해

  - 중첩메소드는 메소드에 소속되지 않는다. 단지 scope 적으로 잠깐 visible하고 마는 것이다. 이는 함수 내에서 reuse를 높이고, 함수내에서만 사용되는 함수, 그 밖에서는 몰라도 되는 함수로 구분지으므로써, readailbity를 높이고자 하는 것이다.
  - 코드상으로는 Method가 별도의 배열로 갖고 있으며 Method가 scope에 members를 등록하고 나서 이 중첩메소드들을 그 위에 얻고, 지역변수를 얻는다.
  - 따라서 호출 우선순위는 ObjectSpace 보다 위이며, LocalSpace보다는 아래다.
  - 외부 개발자(Native포함)나 외부 클래스, 모듈에서는 절대 중첩메소드를 접근이 불가능하다.

- Method는 LocalSpace에서 관리되므로 Ownee Method에서 owner 메소드에서 선언된 지역변수를 참조 할 수 있다. == closure

- 고찰내용

  - MyFoo f1

  - f1.print()

    - // Msg(Msg(Msg(scope, "get", "f1"), "get", "print(void)")), "execute", {})

  - f1.print(void).getName()

    - // Msg(Msg(Msg(scope, "get", "f1"), "get", "print(void)")), "getName", {}) 일때...

  - v getName()도 메소드다. 그렇다면 getMethod.getMethod.getMethod.getMethod.... 도 가능한거 아니냐.

    무한 루프 없음. 증명됨.

    - World는 메시지 기반.
    - 메소드는 msg를 직접 처리할 수 있는 무언가이다. Object는 target으로 이용되거나 msg를 전달할뿐 자기가 msg를 처리하지는 못한다.
    - Object.getMembers()를 하면 class.getMembers()를 가져와서 이걸 chain하여 자기 변수들을 추가(class.getVariables().clone()) 한다.
    - Class.getMember()가 처음 불려지면 T::onInitializeMethods()를 불러서 초기화한다.
    - 위의 상황에서 생각해보면 쉽게 답이 나온다.
      - class MyFoo : Object
        - void print();
      - MyFoo my; // 이시점에서는 아무런 초기화도 일어나지 않음.
        - my.getMember() 호출 --> getMember가 처음 호출이니 getClass().getMembers()를 불러서 chain시도 --> TClass<MyFoo>().getMembers()가 처음 불러진 경우 MyFoo::onInitializeMethods() 호출 --> MyFoo::onInitializeMethods()는 Super::onInitializeMethods() += Method<print>() 를 append해서 반환함. --> TClass<MyFoo>는 독자적인 Method<print>() 객체를 갖게 됨 --> MyFoo 객체는 TClass<MyFoo>의 멤버를 chain함. 즉 MyFoo가 갖고있는 Method<print>는 TClass<MyFoo>의 것임. TClass<MyFoo>가 갖고 있는 Method::getName() Method객체도 TClass<MyFoo>만의 것임.
      - my.getName(void).getName(void) 를 한 경우
        - my.getName(void)는 사실상 TClass<MyFoo>가 독자적으로 갖고있는 Method(getName)를 반환함. --> .getName(void)를 하면 이 Method(getName)은 처음으로 getMembers()가 불러졌으므로 TClass<Method>::getMembers()를 호출함 --> 결과적으로 TClass<Method>에 독자적인 Method<getName>()객체가 들어가게 됨.
      - 여기서 이 반환값에 다시 .getName(void)가 호출한다면?
        - TClass<Method>::getMembers()에 들어있는 Method<getName>은 getMembers가 호출된 적이 없으므로 TClass<Method>::getMembers()를 호출 함 --> 결과 자기자신이 들어있는 Members를 chain함.
        - 도식화하면 이런거임
        - Method::getMembers() --> TClass<Method>::getMembers()
        - TClass<Method>::getMembers() "HAS" Method()
      - **결론: slave가 생성하면서(하고나서) owner의 ptr를 갖는 것은 흔히 있는 것이다. 재귀적 무한루프는 발생하지 않는다.**
    - 실용적으로 접근하기
      - 재귀적 참조 문제
        - 설명
          - class Foo
            - void print()
              - ..
          - Foo f
          - f.print(void).getName().getName().getName()..... 이게 되면 안된다?
        - 구현이 가능한가?
          - 호출의 관점 --> ok
            - f.print(void).getName()은 Method::getName()인 "print(void)"가 나온다. 이는 정확히 말하면 f.print(void).getName(void).execute 인 셈이다.
          - 초기화의 관점
            - class FooObject : Object
              - FooObject()
                - Super()
            - class Object
              - Object()
                -
            - class TClass<Foo>
              - TClass<Foo>()
                - Super()
            - class Class
              - Class()
                - initialize();
              - initialize()
                - _methods = Super::getClass().getMethods();
                - _methods += onInitializeMethods()
            - }
            - class Method : Source
              - onInitializeMethods(arr)
                - Super::onInitializeMethod(arr)
                - arr += Method(getName) // Class<Method>는 Method(getName)를 가짐.
              - const String& getName()
            - class Foo inherit Object
              - onInitializeMethods(arr)
                - Super(arr);

  - v WorldLang에서 중첩메소드를 어떻게 구현할까?

    - foo()
      - v getName() --> 자, 이거는 foo.getName()이냐, Me.getName()이냐?
        - x 1안 this다가 기준이 되어야 한다.
          - 일반적인 메소드에서도 생략의 기준은 this이지, method자체가 아니다. 일례로 메소드 안에서 getClass()를 하면 Object의 클래스가 나와야지 메소드의 클래스가 나와서는 안된다는 것이다. 마찬가지로 중첩메소드에서도 기준은 this이기 때문에 중첩메소드를 호출하려면 앞에 me를 붙여야 한다.
          - 예)
            - class My
              - void foo()
                - string _get()
                  - return "hello world"
                - result _print(string msg)
                  - return Console.println(msg)
                - me._print(me._get())
                - _print(me._get())
              - void _print(string msg)
                - return Console.println("msg = " + msg)
        - v 2안 중첩메소드도 me. 없이 바로 호출되게 한다.
          - 예)
            - class My
              - void foo()
                - string _get()
                  - return "hello world"
                - result _print(string msg)
                  - return Console.println(msg)
                - _print(_get())
                - this._print(_get())
                - getName()
                - me.getName()
              - void _print(string msg)
                - return Console.println("msg = " + msg);
          - **이 관점은, 중첩메소드는 Method에 속한 것이 아니라 scope의 관점에서 일시적으로 Object에 추가되었다가 빠지는 것**. 라고 보는 것이다. 즉 중첩메소드는 Method의 멤버가 아니다. 단지 Method는 별도의 중첩메소드용 배열을 들고 있다가 자신이 scope에 등록될때 이 배열을 localspace에 얻는것에 불과하다. 따라서 이 메소드에 들어온 순간에만 중첩메소드들이 visible해진다.
          - 각 중첩메소드들의 소속은 어디까지나 Object이다. 따라서 저 중첩메소드들만 LocalSpace 영역에 살짝 올라간다.
          - 충돌을 방지하기 위해서 중첩메소드는 private다. 즉 앞에 _를 붙이게 된다. 그러면 getName() 을 중복 정의해서 충돌되지는 않을 것이다. 이는 사용자가 public 메소드를 메소드 안에 정의하게 하는 것을 의례 사용하지 못하도록 막으려는 것이다. 중첩메소드는 어디까지나 "요 함수 내에서만 작게 쓰이고 싶어" 를 위해서 나온것이지, 외부 함수까지 메소드 안에 쓰게 되면 foo.print.getAge() 처럼, 메소드의 의의가 사라지게 된다.
          - 그리고 이는 C++의 중첩클래스와 완전히 궤를 같이한다. scope의 문제로 만드는 것이다. scope를 제외하면 외부에서 이 함수를 접근할 방법이 없으며, 순간적으로 사용되고 그 외에는 사라진것 처럼 보인다. 작은 scope 내에서 반복 작업을 reuse하는 용도로만 사용되며, 메소드 안에 속한 메소드가 되지 않게 한다.
      - v Native 개발자가 중첩메소드를 다루는 시나리오는?
        - C++에서는 중첩메소드를 사용할 수 없으므로, Managed에서 만든 중첩메소드를 Native에서 다루는 시나리오만 검토하면 된다.
        - 요지는, 중첩메소드는 NodeTree에 안보인다는 것이다. 따라서 엄밀히 말하면 Native 개발자는 중첩메소드에 접근할 수 없다.
      - v Native에서 call을 사용한 경우라면 어떨까?
        - 이 경우도, Managed 개발자가 작성한 로직에서만 중첩메소드가 사용되므로 폐쇠적으로 완전하다. 외부자(= Native 개발자)가 간섭할 수 없다. (Method 객체를 얻어서 뭔짓을 하면 되긴 할것이다)
    - string getName()



## Delegator와 closure는 다른 것이다.

- Delegator는 메소드들을 가리키는 것. closure는 지역변수를 내포할 수 있는 메소드. 2개는 별개의 클래스가 되어야 한다.



## Delegator의 기본

- Delegator는 Method의 일종이며, 동시에 Method의 proxy이다.

- Delegator는 sharable이며, 사용자는 주로, Refer<Delegator>의 형태로 사용하게 된다. (Proxy의 Proxy)

- 고찰내용

  - Delegator는 단순히 method를 가리키는 것. static과 instance 2종류가 있다. capture된 delegator는 캡쳐 기능이 탑재된 delegator. 역시 static과 instance 2종류가 있다.

  - [v] 문제 2 - World 문법적으로 각 Delegator는 static여부, 인자가 동일하지 않으면 서로 할당이 이루어져서는 안된다.

    - 예)
      - void(void) a
      - void(int) b
      - void A.(int) c
      - a = b = c // 모두 컴파일 에러가 나야 한다.
    - 다시말하면 인자타입과 static여부 자체가 하나의 타입으로 다뤄줘야한다. 어떻게 할까?
    - Delegator& a;
    - Delegator& b = a; // 이거 되야 하나 안되야 하나?
    - StaticDelegator a1;
    - StaticDelegator b1 = a1; // 이건 되야 하나 안되야 하나?
      - **당연히 안되야 정상이다. a1이 어떤 메소드를 가리키는 뭔지알고 교체하는가? 이건 마치 이런거다.**
    - [v] 1안 StaticDelegator::operator=(rhs)에서 rhs와 자신의 getParams()가 동일하며 static여부가 일치한 경우에만 _origin을 교체한다. closure여부는 고려하지 않는다.
      - operator=(rhs)는 assign(it)으로 결국 간다. assign(it)은 Refer<Delegator>::assign(it)이 호출되게 되어있다.
    - [x] 2안 Delegator들은 모두 operator=()를 막는다. 필요하면 c++개발자보고 clone()을 사용하라고 하라.
    - [x] 3안 그냥 풀어준다. C++ 대로 설계한다.

  - [] 문제3 되는건 컴파일시에 world문법상에서는 delegator들의 연산을 막아야 한다는 점이다.

    - void(void) a
    - void(void) b = obj.print
    - void A.(void) c
    - c = b 에러
    - a = c 에러
    - a = b ok
    - 이걸 컴파일타임에 할 수 있어야 한다. 즉 월드문법에서 중요시 생각하고 있는 건 타입리스트 + staitc여부 2개이다. closure는 고려하지 않는다는 걸 알 수 있다. 사용자의 입장에서 생각하고 있는 것이다.
    - [] 어떻게 할까?
      - [x] 1안 wygiwys로 간다.
        - [] static딜리게이터는 어느때건 closure화될 수 있으며 반대도 가능하다. 이말은 static딜리게이터는 closure 화되는 코드를 담고 있거나, 이걸 외부에서 주입할 수 있다는 것이다. 이대로 c++코드도 따라간다.
          - 이건 어떻게 할까? 중요한건 코드가 아니라 멤버변수다.
          - 캡처를 하려면 다량의 멤버변수를 요구하게 된다. Object Refer 1개와 캡쳐한 로컬스페이스 Array 1개. 막대한 비용이 든다. 이걸 매 static delegator마다 탑재하게 하자고?
        - 월드 코드에서 사용자가 딜리게이터에 closure냐 static딜리게이터냐를 결정하는 건 rhs에서 object의 유무로 판단된다.
          - class A
            - void print()
          - A a
          - void(void) fptr1 = A.print (그냥 static delegator)
          - void(void) fptr2 = a.print (클로져)
      - [v] 2안 Delegator::assign() 재정의
        - 같은 타입일뿐만 아니라 getParams()가 완전히 동일해야만 할당이 이루어지도록 한다.
        - 월드 컴파일러는

  - [x] 1안 Delegator > InstanceDelegator > Closure 순으로 상속

    - Delegator
      - // Method에 대한 Refer
      - InstanceDelegator
        - // thisptr를 method에서 추출해서
        - Closure

  - [] 2안 Delegator Slice 패턴

    유일하게 구현 가능한 안이지만, 너무 구현이 더럽다. 다른 방법은 없을까?

    - class Delegator : public TRefer<Method>, public Methodable
      - Delegator(Params&, bool is_static, Pattern& new_pattern)
      - Delegator(const Method& method) : _params(method._params), _is_static(method._is_static), _patt(InstancePattern) {}
      - Delegator(This& rhs) : _is_static(rhs._is_static), _params(rhs.params), _patt(rhs._patt) {}
      - TStrong<Params> _params; *// 월드컴파일러(=WC)는 Method의 것을 복제시킬것인지, 아니면 새로운 Params를 넣어줄 것인지 정할 수 있음. 생성자에서 주입되며, 주입되면 2번다시 변경안됨.*
      - virtual const Params& getParams() { return *_params; } *// WC는 변경할 수 있음.*
      - virtual Refer to(const Class& cls) {
        - if cls.isSubOf(Method)
          - return *this;
        - return Super::to(cls);
      - }
      - virtual assign(Thing& it) {
        - Method& casted = [it.to](http://it.to/)<Method>().get();
        - if(casted.isNull() || casted.getParams() != getParams() || isStatic() != it.isStatic())
          - return FAIL
        - if(Super::assign(it))
          - return FAIL
        - if(it.isSubOf(This))
          - Delegator& casted = it
          - _patt = casted._patt;
      - }
      - TStrong<Pattern> _patt;
      - bool _is_static;
      - virtual run(Msg& msg)
        - return _patt(this, msg);
      - virtual isStatic() { return _is_static; } *// Node::isStatic() { return false; }*
      - *// isStatic이 true이면 InstanceDelegator라는 뜻이 된다.*
      - virtual bind(Node& method) {
        - Method& casted = node.cast<Method>();
        - if casted.isNull() || isStatic() != casted.isStatic() || getParams() != casted.getParams()
          - return FAIL
        - if(Super::bind(method))
          - return FAIL
        - *// 메소드를 바인딩한다는 것은 closure가 아니게 되는 것이다.*
      - }
      - virtual Delegator capture(Scope& scope) *// from Methodable*
        - return *this;
      - class Pattern
        - ...
      - class StaticPattern
      - class InstancePattern
      - class ClosurePattern
    - }

  - [x] 3안 Delegator와 Refer<Delegator> 패턴

    Refer<Delegator>도 params를 들고있어야 하므로 Params는 총 3개가 된다. 실패.

    - class Binder
      - bool isBindable(const Node& obj) = 0;
    - class Refer
      - virtual bool isBindable(const Node& obj) {
        - return obj.isSub(_cls);
      - }
      - virtual assign(Thing& it) {
        - if( ! isBindable(it))
          - return FAIL
        - ...기존코드...
      - }
    - class Delegator : public Method
      - *// Params에 Thisptr를 넣고 is_static을 false로 가져가면 InstanceDelegator가 나오게 된다.*
      - Delegator(Params&, bool is_static)
      - Delegator(const Method& method) : _params(method._params), _is_static(method._is_static) {}
      - Delegator(This& rhs) : _is_static(rhs._is_static), _params(rhs.params), _patt(rhs._patt) {}
      - TStrong<Params> _params; *// 월드컴파일러(=WC)는 Method의 것을 복제시킬것인지, 아니면 새로운 Params를 넣어줄 것인지 정할 수 있음. 생성자에서 주입되며, 주입되면 2번다시 변경안됨.*
      - virtual const Params& getParams() { return *_params; } *// WC는 변경할 수 있음.*
      - TRefer<Method> _method;
      - *// delegator.assign(another_delegator)만 지원한다.*
      - *// delegator.assign(method)를 하고 싶다면 bind를 사용하라. assign은 같은 obj에 한해서만 지원이 되니까.*
      - *// isStatic이 true이면 InstanceDelegator라는 뜻이 된다.*
      - bool _is_static;
      - virtual isStatic() { return _is_static; } *// Node::isStatic() { return false; }*
      - virtual bool isConsumable(msg) {
        - if(_method.isBinded())
          - return _method->.isConsumable(msg);
        - return false;
      - }
      - virtual Refer run(Msg& msg)
        - if( ! isBinded())
          - return Refer();
        - return get().run(msg);
      - virtual isBindable(Node& it) const {
        - if( ! Super::isBindable(it))
          - return false;
        - const This& casted = (const This&) it;
        - return casted.isExist() && it.getParams() == getParams() && isStatic() == it.isStatic();
      - }
    - class Closure : public Delegator {
      - Chain _captures;
      - virtual Refer run(Msg& msg) {
        - if ! isBinded()
          - return Refer;
        - swap captures
        - Refer ret = get().run(msg);
        - swap origins
      - }
    - }



### Delegator의 capture 컨셉

- TEST
  - class A
    - void foo()
      - int a=3  // a가 주석처리되면 err
      - void _b()
        - _a() // ok
      - void _a()
        - print(a)
      - if a==5
        - int a = 11
        - _b() // 3이 찍힌다.
- Closure는 정의와 동시에 지역변수와 메소드를 바인딩한다.
  - 정의된 이후, 내부에서 참조하는 변수/메소드와 동명의 다른 식별자가 등장한 경우에도, closure는 정의된 시점의 바인딩을 따라간다.
- 고찰내용
  - [v] Closure는 지역변수 참조가 가능한 중첩메소드.
    - *[x] 만약 #지역변수-중복-되는-경우-scope는-어떻게-구현해야-하는가 이걸 동일한 인덱스가 나오도록 해결할수 있다면 closure는 캡쳐가 필요없게 된다. 왠냐하면 closure가 소지한 STMT들이 항상 언제 호출되건 동일한 scope[index]의 지역변수를 참조해버리면 되기 때문이다.*
      - [v] 반론 - 멤버변수 vs 지역변수로 총돌되는 경우는 여전히 안될 것 같다. 이런 상황을 봐라.
        - class A
          - int a = 3
          - void foo()
            - Console.out(a) *// 1*
            - int a = 5
            - Console.out(a) *// 2*
        - 1과 2는 당연히 결과가 다르며, 1의 a의 scope[인덱스]와 2의 a의 인덱스는 설사 *#지역변수-중복-되는-경우-scope는-어떻게-구현해야-하는가* 이걸 해결한다 해도, 풀리지 않는다.
    - [v] 지역변수 중복 문제
      - 문제정의 : closure는 함수. 함수내에서는 여러개의 변수를 둘 수 있다. scope당 1개. closure가 변수 a를 바인딩하는 경우, 이 a는 뒤에 여러개가 나올 수 있다. 이때 어떻게 world는 동작해야 하는가?
      - [v] 1안 closure 정의 == closure의 바인딩. 즉, 처음 정의시 등장한 a만 그대로 쭉 사용하게 된다.
    - [v] 함수는 뒤에 나온걸 미리 사용할 수 있다. 그러나 변수는 그렇지 못한데?
      - 예)
        - class A
          - void foo()
            - int a  // a가 주석처리되면 err
            - void _b()
              - _a() // ok
            - void _a()
              - print(a)
      - [v] 왜 a가 주석처리되면 err인가. _a는 뒤에 나와도 괜찮은데?
        - 변수는 함수내에서 사용된다. 함수는 절차적으로 수행된다. 따라서 변수의 정의는 "시간"이 중요해지기 때문이다. 시간에 의존되기 때문에 변수를 바인딩하려면 그 변수가 미리 나와야 한다. 이건 당연한 것으로 다음 예제를 보면된다. world만의 특징이 아니다.
          - class A
            - void foo()
              - print(str1) // err. str1이 존재하지 않는다.
              - str str1 = "hello" // str1의 값은 함수내의 "시간"에 의존된다.
              - boo() // boo함수는 유일하기 때문에 boo는 호출이 된다.
            - void boo()
            -

## MethodDelegation

- 생성
  - void A.foo(int) f1 = A.foo // ok
  - *//void(int) f2 = A.foo*
  - void(int) f2 = a.foo
  - Method f3 = A.foo // ok
  - void(int) f4 = a.foo1
  - *//void A.(int) f5 = a.foo1*
  - *//void(int) f3.capture(a) // f3은 타입정보를 다 잃어버린 상태이므로 capture를 사용할 수 없다.*
  - [] void(int) f22 = a.foo.capture(a) 가능해야 하나?
    - [] 가능하다고 한다면, capture는 당연히 void(int)를 반환해야만 한다. 모든 메소드의 공통 메소드로 빼게 되면 Delegator라는 객체를 반환형으로 할 수 밖에 없다. 어디선가는 타입 검사를 해야만 한다.
      - Delegator에도 내가 받을 수 있는 타입이 명시되어있다. 가지고 있다. 고로 런타임에는 판별할 수 있다.
      - 컴파일타임에 a.foo가 무슨 메소드인지 알고 있으며 여기서 반환한 capture는 native상에서는 Delegator로 나오지만 이 Delegator가 가지고 있을 타입이 무엇일지는 유추할 수 있다.
- 대입
  - f3 = f2
  - f3 = f1
  - *//f2 = f1*
  - *//f1 = f2*
- 호출
  - *// f1(3) err*
  - a.f1(3) // ok
  - f1.getName() // ok
  - f2(3) // ok
  - f2.getName() // ok
  - *// a.f2(3) err*
  - *// f3(3) err*
  - *//f3.call(3)  call은 invisible해야 한다. 재귀호출이 되버린다.*
  - f3.getName() // ok
  - node n = f3 // ok
  - n(3) // ok, but runtime err
  - a.n(3) // ok. and runtime success.







## 메소드는_어떻게_캡쳐가_이루어지는가_캡쳐_문법

- 문제 정의
  - \#람다메소드 에 의하면 결국은 closure가 지원이 되려면 일반메소드가 thisptr등을 모조리 싸안고 내적화 되어야 하며, 그것을 trigger하는 방법이 필요하다.  크게 3가지 방법으로 나뉘어진다.
    - \1. API화 시키며, 사용자에게 이 것을 강제하는 경우
      - 예) class A
        - void foo(int a, bool b)
      - A a
      - void(int, bool) closure1 = a.foo.capture(a)
    - \2. API로는 만들지만, 특정 상황이라면 syntactic sugar처럼도 동작하게 한다.
      - 예) class A
        - void foo(int a, bool b)
      - A a
      - void(int, bool) closure1 = a.foo // 실제 코드블럭은 a.foo.capture(a)로 변형한다.
      -  // 문제는 어떻게 이렇게 만들것인가? 와 모든 시나리오를 찾아낼 수 있는가?
- [v] 1안 외부 API로 두고, syntactic sugar로는  제공한다.
  - \#closure_syntactic_sugar
  - Method는 Object에 속한것이 아니다. Class에 속한 것이며 Object들은 Method들을 간접적으로 공유해야 한다. 이거는 fix된 사실이다.
  - 그런데 특정시점에서만 Method를 Object에 속한 것처럼 사용하고 싶다는 것이다. 여기까지는 좋다.
  - 문제는 특정시점이 순간이 아니라 경우에따라서는 늘어지게도 될 수 있어야 한다.
    - 예) Method fp = a.foo
    - ....do something...
    - fp.capture() *// Method.to<Delegator>()가 가능하려면 결과적으로 이렇게 인자를 받지 않는 capture를 정의할 수 있어야 한다.*
    - 예2) Method fp = .....;
    - ....do something at c++....
    - fp.capture();
  - 따라서 이거는 말이 되지 않는다. 순간적으로 Object에 속한것은 그나마 이해할 수 있어도 간격이 늘어나서도 Object에 속한 것이 유지가 되어야 한다면 Method*를 가지고 있는 수 밖에 없다. 그렇다고 늘어난 간격에서의 capture()는 허용되지 않고 오직 .으로 받고 나서 순간적으로만 capture()사용이 허용된다면 이것도 사용상에 문제가 있게 된다. 사용자는 capture()를 할때마다 매번 이걸 기억하고 있어야 한다. 또한 눈에 보이지 않는 의존성(시간에 대한)이 존재하게 되며 눈치채기 힘들다.
  - 대책
    - capture(Object&) 가 되어야 한다. 그리고 call(Msg) Msg에는 반드시 Thisptr가 들어가야만 한다. 다만 매번 월드코드에서 이렇게 작성하면 귀찮기 때문에 syntactic sugar를 추가한다. 그렇게 되면 월드코드로 부터 생성된 Expr 내부에서 위의 귀찮은 This를 넣는 작업이나 capture()안에다가 this object를 넣는 작업들을 대신하게 될 것이다.
    - Native 사용자들의 경우 Object에서 Method를 꺼내서 그 Object를 넣은 Msg를 만들어서 다시 Method에 떤지는 일련의 과정들이 매우 귀찮을 것이므로 이를 위한 편의함수 run(Msg&)를 Object에 넣어둔다. 코드는 이렇게 될 것이다.
      - Result& Object::run(Msg& msg) {
        - Method& m = getElement(msg).cast<Method>();
        - if(m.isNull())
          - return nulled;
        - msg[0] = *this; // Msg의 0번째 요소에 thisptr를 담는다. #Msg의_0번째_위치에_Thisptr를_넣는다 참고
        - m.run(msg)
      - }
- *[x] 2안 문법의 일반화를 유지하기 위해 어떻게든 Method.to<Delegator>()를 가능하게 한다.*
  - Method::to<StaticDelegator>()가 가능하도록 하겠다는 것이다.
    - object.call(getElement)를 한 경우, object는
    - void(int, bool) = a.foo
  - 개념적으로 접근하자.
    - 메소드는 Object의 것이 아니다. 다만 일시적인 상황에서만 Object가 누구인지 연관성을 가질 수 있다. 그리고 그 경우는 앞에 . 을 찍히는 경우이다.
      - 예1) a.foo --> 이 경우 foo는 a가 누구인지 일시적으로 알게 된다.
      - 예2) a.foo(5) --> foo와 a는 서로 관련이 없으나 이 경우에만 foo는 자신을 호출한 객체가 a 임을 알 수 있어야 한다.
      - 예3) void(int) fp = a.foo
      - fp(5) --> 객체정보가 없으므로 호출 될 수 없다. "." 이 메소드에 붙어서 효력을 볼려면 연속적으로 .이 찍힌 상황에서 메소드에게 최종 액션이 취해져야만 한다.
    - .은 이러한 의미를 갖고 있는데 반해, 현재 . 을 구현하는 방법은 msg 뒤에 thisptr를 붙이는 방법으로 오직 예2만 만족을 시키는 상황이라는 게 문제의 핵심이다. 다시 말하면 예1도 만족시킬 수 있는 . 을 구현하는 새로운 알고리즘을 만들어버리면 이문제를 해결 할 수 있다.
  - *[x] 1안 .이란 object.call()과 정확하게 시점이 일치한다. 이 시점에서 scope에다가 object를 등록해버린다.*
    - 문제는 이경우 scope에 등록된 object를 언제 해제시켜주느냐가 관건이된다. 시나리오를 여럿 생각해봐서 문제는 없는지 생각을 해봐야 한다.
    - 시나리오 검증
      - *[x] 문1*
        - 문제정의
          - [0] void A.(int) fp = a.foo
          - [1] fp(55)
          - [2] a.foo(55)
        - *[x] 1안*
          - 위의 코드를 AST로 풀면,
            - CallExpr { this <= Cstr로 생성된 객체.
              - .caller= defineDelegatorExpr --> 요때 MethodCstr 그러나 this는 갱신되지 않음.
                - .caller= "",
                - .msg={ "cstr"
                  - args="void", "int"
                - }
              - }
              - .msg={ "operator="
                - .args= CallExpr { --> this <= a object.
                  - .caller= callExpr {  --> this=null(scope가 this를 제거)
                    - .caller="scope"
                    - .msg={ "getElement"
                      - .args="a"
                    - }
                  - }



## Delegator와_Method의_관계

- \#월드문법 참고
- *[x] 1안 Delegator도 메소드의 일종으로 한다.*
  - 메소드란 -> 어떠한 방법으로든 주어진 인자를 통해서 아웃풋을 내뱉는 액션, 즉 execute를 가지고 있는 Object.  Delegator도 메소드의 일종이다. proxy로 하고는 있다만 메소드이긴 하다.
  - *[x] Native FRX에서 Method <- Delegator(or ConsumableMethod) 순으로 상속구조가 잡히는 것처럼 월드코드로부터 파싱된 MgdMethod나 Delegator나 모두 메소드의 일종이며, World코드 상에서 void(int) a를 Method b인 b에 할당하는 게 올바른 코드가 되는 걸 설명할 수 있게 된다.*
    - --> Delegator는 메소드가 아니다. Refer가 Object가 아니듯이 말이다. Delegator는 Method와 동일한 인터페이스를 갖고는 있지만 Method 특유의 고유성(stmt를 가지고 있는 등)을 지니지 못하며 흉내만 낸다.
- *[x] 2안 Object가 run()가지게 되었으므로 Delegator를 Object 밑에 둔다.*
  - Object
    - Method
    - Delegator
      - StaticDelegator
      - MethodDelegator
  - [x] Delegator는 Object 인가? Delegator클래스만의 고유한 메소드가 있는가?
- *[x] 2-1안 Object가 run()가지게 되었으므로 Delegator를 Object 밑에 둔다.*
  - Object
    - virtual Result& run(Msg& msg);
    - Method
      - MethodImpl(가칭?)
        - NativeWrapper
        - MgdMethod
      - Delegator
        - StaticMethodDelegator --> 더 좋은 이름은 없을까? 너무 길다
        - MethodDelegator
- [v] 3안 Delegator를 TRefer<Method>로 만든다.
  - 이는 Delegator의 요구사항인, "정의는 호환되지 않게, 사용은 호환되게"를 반영한 것이다.
  - Node
    - Refer
      - TRefer<Method>
        - Delegator (ADT) : public Methodable
          - vector<TWeak<Class> > _types; // [0] = ret, [1] = object, [2] = params...
    - Object
      - Method
        - Closure
          - LocalSpace
          - Bind<Object>
  - TEST [Native]
    - Delegator d = Method(..).capture(); // staticcatpure를 시도한다.
    - if( ! d) *// == d.isBind()*
      - return NotBind; // method는 nonstatic
    - d->run(args); *// Delegator::run() --> Method::run()으로 간다.*
    - *// d->run(args)에서 d는 nonstatic인지 static인지 중요하진 않다. 사용에 obj를 필요로 하지 않는다.*
    - *// d는 static이건, nonstatic이건 꼭 필요한 만큼의 데이터를 가지고 있다.*
    - d.getParams() *// d의 params는 d 의 생성자로 넣어진다. Bind로 원본을 가리킬 뿐이다. 용량이 절약하고 있다.*
    - d.bind(AnotherMethod); *// 만약 AnotherMethod.getParams()가 d의 getParams()와 다를 경우 에러가 된다.*
    - d->runs(args) *// d가 만약 InstanceMethod일때는 args에 반드시 thisptr가 들어가있어야 한다. 사용자는 이것을 바로 알기가 어려운데...? -->* #모든-것을-요청할-수-있다-그러나-동작을-보장하진-못한다. 참고
    - d.bind(new Closure()); // Delegator는 static인지 nonstatic인지 closure인지 신경쓰지 않는다.
    - d.bind(A::getClass().getMethods()[1]); *// err. 실행은 되나, thisptr가 처음에 지정한 클래스가 아니므로 reject 된다.*









## 람다메소드 (즉, Closure)

- [v] 전역변수는 어디서나 접근 가능하므로 별다른 조치를 하지 않아도 closure에서 접근이 가능하다.
- [v] 멤버변수는 ObjectSpace는 그 자체가 shallowcpy되므로 이 역시 똑 같다.
- [][v] 컴파일러는 어떤 외부 변수들을 closure가 참고하는지 알아내서 생성할 closure객체에 주입해야 한다.
  - 어떻게 알아내는가?
  - 1안 C++처럼 직접 사용자가 코드로 명시
  - [v] 2안 알아서 적당히 유추 -> scope 참조 알고리즘
    - scope 참조 알고리즘은 이름 중복이 된 경우 가장 최근에 정의된 걸 따라 가는 것이다. 이름 중복은 scope가 다를때만 허용된다. 같은 scope라면 이름이 중복되어서는 안된다. scope는 블록문을 기준으로 나뉘어진다.
    - 또 이 목록(참조할 외부변수 목록)은 컴파일시만 사용하는 것이다. 왜냐하면 컴파일이 완료되면 expr은 직접 vector<int>로 참조할 scope[n]을 다 들고있을 것이기 때문이다. 이 목록을 Closure가 또 들고 있을 필요는 없다. closure는 localspace 목록(정확히 말하면 closure가 가지고 있는 코드(=expr)에서 참조하는 외부변수에 대한 목록)만 가지고 있으면 된다.
      - 정리하면, "참조할목록" 은 컴파일에만 사용하므로 제외
      - "참조한 목록"은 현재 바인딩을 의미하므로 실행시 꼭 필요하므로 포함.
- [][v] capture시 로컬변수 바인딩 문제
  - class A
    - void foo()
      - void _boo() *// closure*
        - print(a)
      - int a = 3
      - _boo()
      - a = 5
      - _boo()
      - if 1
        - int a = 15
        - _boo()
      - _boo()
  - 1 // C/++       -> 3 5 15 5
  - 2 // Python/JS -> 3 5 15 15
  - 2안으로 따라간다. 1안은 너무 WorldFrx 코드가 지저분해진다.
  - 변수, 함수의 중복정의는 일체 허용하지 않는다. 고로, block scope라는 건 없다. BlockStatement는 scope를 갖는데, 이는 지역변수가 아니라 static이나 closure를 위한 것이다.
  - 정의부는 실행부보다 먼저 나와야 한다.
  - delegator가 capture()로부터 생성되는 시점에 capture이루어진다.
  - 링킹 최적화후
  - closure 및 delegator 정의부:
    - 해당 closure의 코드를 컴파일하면서(링킹이 아님) 사용하는 외부지역변수(member변수가 아니다)의 목록(localspace) 에 넣는다.
    - 그리고 해당 expr에 localspace[n==방금insert된 index] 을 참조하도록 바꿔준다.
    - 만약 컴파일 전이라면 localspace["변수명"]
  - 실행부:
    - 해당 closure가 들고있는 "capture 희망목록"에 접근할 수 있어야 한다.
    - 그 목록에 현재의 scope에 있는 것들을 줄 수 있는 지 확인한다. 안되면 링킹에러다.
    - 정의부에서 추려낸 지역변수 목록들만 capture 뜨는 명령어 ( Method.capture(1,5, 10) )를 사용해서 delegator를 만들도록 stmt를 정의한다.
    - 컴파일최적화 전이라면 Method.capture("변수명1", "변수명2", ...)
- [x][x] *closure 원격 native 생성 문제*
  - *[x] Native환경에서 원격지에 있는 closure() 해서 그걸 원격지의 객체 중 하나의 Refer에 할당한 경우, 이때 생성된 closure는 실제 동작과는 다르게 된다. 어떻게 하면 좋을까?*
    - 이해가 안간다. 뭐가 문제인가?
- [][v] closure의 생성자의 인자리스트에 scope를 명시해야 하는가?
  - closure는 생성되는 순간 scope를 반드시 참조해야 한다. 생성자에 인자로 두면 명시적으로 이걸 드러낼 수 있다. 다만 귀찮아질 것이다.
  - [v] 1안 네
    - 로컬 스페이스는 scope에 속한 것이며 각 object마다 고유의 것이 아니다.
    - 종속관계는 가능한한 드러내는 게 좋다.
- TEST Driven Development
  - TEST#1
    - class A
      - void(void) foo(int b)
        - void _boo()
          - Console.out(a)
        - int a = 5
        - _boo() *// "5" 출력*
        - if(b > 5)
          - int a = 7
          - return _boo *// Closure->Delegator 시에 capture 발생*
        - else
          - int a = 10
          - return _boo
    - A a
    - a.foo(6)() *// "7" 출력*
    - void(void)(int) fptr = a.foo *// InstanceMethod->StaticDelegator이므로 capture발생.*
    - fptr(3)() *// "10" 출력*
    - void(void)A.(int) foptr = a.foo *// InstanceMethod -> InstanceDelegator*
    - a.foptr(10)() *// "7" 출력*
  - TEST#2
    - class A
      - void(void) foo(int b)
        - *//void _boo()*
          - *//Console.out(a) --> 이 시점에는 아직 a가 정의되지 않았으므로 에러.*





## 컴파일 validation시 Delegator의 에러를 판단하는 방법은?

- 문제정의
  - Delegator는 params을 들고 있지 않으며 생성자에서 Method를 넣어줘야 이걸 proxy해서 params를 얻어낸다.
  - validation으로 Delegator를 돌릴려면 Delegator를 직접 method를 넣어서 변수를 생성해야 할것이다. 어떻게 하면 생성자에서 method를 물려줄 수 있을까.



## 클로져의 문법

```cpp
def app
    void print(str(int) func, int type)
        c.out("msg=$func(type)")
    void main()
        str foo(int code)
            with type
                is 1: "hello"
                default: "world"
        print(foo, 1)
        // or
        print(str foo(int code)
            with type
                is 1: "hello"
                  default: "world"
        , 1)
```



## 람다의 문법

```cpp
def app

    str f(int a)

    void print(f func, int type)
        c.out("msg=$f(type)")

    void main()
        // 1
        print(type ->
            with type
                is 1: "hello"
                default: "world"
        , 1) // 가능하다. 하지만,
        // 또는
        print(type -> with type: is 1: "hello": default: "world", 1)
        // 또는
        print(do, 1)
            out str do(int type): with type // out을 쓰지 않으면 에러다.
                is 1: "hello"
                default: "world"
```     



























# 예외처리

## [x] 1안
```cpp
import console
import file

Opener
	file f = null
	str path
		ret => set
			// 예외처리@res: @warn, @err, @res(exceptiontype identifier)
			// 다음의 규칙을 따른다.
			//	1.	예외가 발생하면, 자동으로 throw 처리된다.
			//	2.	예외exception을 return <변수> 를 하게 되면,
			//		해당 함수의 호출자에게로 돌아간다.
			//	3.	처리되지 않은 예외를 받은 호출자(메소드 또는 블록문)는 먼저
			//		자신을 콜스택에서 제거하고, 자신이 소유한 적절한 catch 멤버를
			//		찾아 호출한다. catch메소드는 @로 시작하는 특수 메소드 이며
            //          @res는 모든것을 개발자가 컨트롤하고
            //          @warn은 로그를 찍고 null을 return하며
            //          @err은 로그를찍고 프로그램을 종료하거나 breakpoint를 건다.
            //	    	(catch에서 다시 예외가 발생하면 호출자의 콜스택은 이미
			//		    제거되었으므로 무한 재귀는 일어나지 않는다.)
			//	4.	3에서도 찾지 못하면 자동으로 다시 return 처리된다.
			//	5.	최종적으로 처리되지않은 예외가 main()을 벗어나면
			//		프로세스를 중단한다.
			//	6.	catch에서 throw를 하지 않으면 예외처리를 처리consume했다고
			//		판단한다.
			f.close()
			f.open(new, "rw") // Rule#1, 2: 내부에서 fileexception이 발생한다.

			// Rule#3에 의해서 f.open()에서 발생한 익셉션은, path.set() 메소드가
			// 소유한 catch() 함수 중 가장 적절한 인자를 가진 catch(fileexcept)로
			// 넘겨진다.
			catch(rfile e)
			     console.out("fail to open " + ret)
			     f.open(new, "rw") // 다시 fileexcept가 발생한다.
			     // Rule#1, 2에 의해 str.set()을 호출한 foo()의 블록문으로 throw.

			catch(except e) // 눈치챘겠지만, 사실 catch 또한 클로져에 불과하다.
			     console.out("can't reach here.")
			     return ret // catch의 반환형은 외부메소드의 반환형(res ret)여야 한다.
			     // Rule#3: 여기서 return 되면 str.set()에서 return 되게 된다.

			console.out("path is " + new)
			f.open(new, "rw") // Rule#3: 여기 예외도 catch(fileexcept)로 간다.
			return ret

		ret => get
			consol.out("getting path(" res + ") from some Opener object.")
			return ret


app
    res foo()
		with Opener()
			it.path = "/usr/bin/bash" // 최종적으로 fileexcept가 발생한다.

			catch(except e) // 이 블록문에서 나온 예외는 여기서 catch된다.
				console.out("oh dear.")
				// 블록문이 종료된다.

			console.out("can't reach here.")

    	console.out("can you see this?")
    void main():foo()

/* 결과:
	fail to open /usr/bin/bash
	oh dear.
	can you see this?
*/
```

## [v] try-catch 같은 것은 반드시 있어야 한다. 좀 더 혁신적인 방법이나 혁신적인 표기법은 없을까?

- 1안 pythonstyle + 클래스 catch
  - class A
    - My _bean
    - result print()
      - try
        - int age = _bean.get()
      - catch(nullexcp e)
        - ret failed
      - ret success
    - catch(nullexcp e)
      - throw e;


## [v] 2안
* @res를 사용한다.
* @res는 블록문처럼 동작하며, 속한 scope에서 발생한 익셉션을 처리한다.
* 예외처리 블록문에서 retfun하면 함수가 끝나며, retfun으로 다시 예외를
  던지면 예외가 전파된다.
* 예외는 생성순간 콜스택을 기록해서 가지고 있다.
* with 문을 통해서 예외처리가 적용되는 블록을 제한 할 수 있다.

```namu
@res(rNull e)
    c.out("nullex!")
a.b.c.d.connectNetwork()
@warn(rNetwork) // automatically print logs and continue.
@err(rDivideZero) // print logs and exit func.
```

### 고찰
```namu
// 1. 자바의 경우
Manager mgr = getManager();
if (mgr == null) return;
Noder noder = mgr.getNoder();
if (noder == null) return;
Node[] nodes = noder.getNodes();
if (nodes == null) return;
Node n = nodes.get(0);

Moduler moduler = mgr.getModuler();
if (moduler == null) return;
PackageInfo info = moduler.getInfoFrom(2);
if (info == null) return;
int len = info.getModules().getLen()

// 2. 코틀린
Node n = getManager()?.getNoder()?.getNodes()?.get(0);
int len = getManager()?.getModuler()?.getInfoFrom(2)?.getModules().getLen();

// 1안
if !(mgr := getManager()): ret
noder := mgr.getNoder()
if !noder: ret
nodes := noder.getNodes()
if !nodes: ret
n = nodes.get(0)

moduler := mgr.getModuler()
if !moduler: ret
info := moduler.getInfoFrom(2)
if !info: ret
len := info.getModules().getLen()


// 2안
@err(nullErr): ret
n := (mgr := getManager()).getNoder().getNodes().get(0)
len := mgr.getModuler().getInfoFrom(2).getModules().getLen()

// 3안
Node n
len := int 0
with getManager()
    // 사용자는 res에서 상속할 수 있다.
    // getManager()를 포함해서 밑 부분에 더미 객체가 반환된 경우, 그에 적합한 @err 부분이 호출된다.
    // @err은 메소드 안에만 사용할 수 있다. 블록문에도 scope이 걸린다.
    // @err은 기본적으로 명시하지 않으면 브포가 걸린다. 브포를 걸수 없을 때는 프로그램을 종료한다.
    // null객체는 존재하지 않는다. 대신 더미 객체를 사용한다.
    @err(res): ret // nullErr를 걸지 않을 경우 브포가 걸린다.
    n = getNoder().getNodes().get(0)
    len = getModuler().getInfoFrom(2).getModules().getLen()


// [x] 3-1안
// 블록문은 별도의 scope을 가지지 않는다.
with getManager()
    @err(res): ret // 이것도 블록문에 속하지 않으므로, 매우 불편해질 것이다.
    n := getNoder().getNodes().get(0)
    len := getModuler().getInfoFrom(2).getModules().getLen()

// [v] 3-2안
// out 키워드를 앞에 붙이면 해당 변수는 블록문에서 벗어난다.
// len := 33 // 이걸 넣으면 out len쪽에 에러가 발생. len은 이미 이미있다.

with getManager()
    @err(nullRes): ret
    out n := getNoder().getNodes().get(0)
    out len := getModuler().getInfoFrom(2).getModules().getLen()

    out def A // [v]
    //def out A [x]

c.println("n=$n len=$len")

// 코틀린에 safe navigator에 비하면 코드는 더 길어졌지만 (라인수 4)
// try-catch 문법과 safe navigation을 하나로 합쳤다는 점이 큰 장점으로 느껴진다.
```

* [v] out의 문제.
* 위에서는 out을 블록문 안쪽에서만 사용하고 있으니 문제가 없어보이는데,
* 메소드 안에서 쓰는 경우는 문제가 될 수도 있다.

```namu
void foo(node[] nodes)
    out len := nodes.len
void boo()
    len *= 2

foo([node(), node()])
boo()
```
* [v] 왜 문제가 되는가?
* 우리는 수정을 메소드 1개 단위로 수정을 하는 경우가 많다.
* 그러므로 메소드 안쪽의 블록안의 변수를 out으로 해도 메소드 1개
  안쪽에서 벌어지는 일이므로 영향력이 적다.
* 또다른 문제는 없는가?
```namu
int foo(node[] ns)
    @warn(null): ret 0

    if ns.len > 0
        out len := ns.len
    else
        c.out("no way.")

    c.out("len=$len")
    ret len
```
* 위의 코드는 다음과 같다.

```namu
void foo(node[] ns)
    len := 0 // 추가됨
    if ns?.len > 0
        len = ns.len
    else
        c.out("no way")

    c.out("len=$len")
    ret len

* [v] 그러면 이름을 out이라고하지말고 메소드까지로 scope를 변경한다는 의미로 바꾸자.
```namu
// 현재안:
out len := 3

// 1안: 메소드의 변수로 올린다는 뜻을 강조해본다.
func len := 3 // 메소드 처럼 보인다.
funcval len := 3 // 너무 길다.
funv len := 3 // 유력
metv len := 3
tofuncv len
fl len // function local variable
flv len := 3
hoist len := 3 // [x] hoist가 아니라 블록 밖으로 꺼내는 것.

// 최종후보:
out len := 3 // ok.
funv len := 3 // X
```

* 결국은 out이다. 의미는 좀 헷갈릴 수 있지만, 간결하고 쉽게 사용하는 단어는
      out이 제일 적당하다고 본다.


```namu
// C++
void send()
{
    throw new NullPointerException();
    return;
}
void receive()
    try
    {
        send();
    }
    catch(NullPointerException ex)
    {
        do_something();
    }
}

// 자바
void send() {
    throw new NullPointerException();
    return;
}
void receive() {
    try {
        send();
    } catch(NullPointerException ex) {
        do_something();
    }
}

// 파이썬:
def send():
    nulled = None;
    nulled.age // == raise NullPointerException()

def receive():
    try:
        send()
    except NullPointerException:
        do_something()




// 1안: throw, try를 없애고 ret를 사용한다.
def foo
    void say()
foo send()
    ret null // res는 어떤 타입에서도 나갈 수 있다.

void receive()
    f := send()
    @err(nullAccessErr): do_something() // 호출한 메소드에서 res가 반환되면 @err중에서 분기된다.

    // null 반환시 do_something에서 처리를 하였기 때문에 null이 들어간 f는 계속 사용된다.
    f.say(); // null은 어떠한 메시지도 받을 수 있으며 null이 반환된다.

int receive2()
    send()
    // @err가 없는 경우, res를 return 한다

int main()
    receive2() // 여기서 @err가 없으므로 exception으로 프로그램은 종료/브포 가 걸린다.
```

* 다른 예제
```namu
def foo
    void say()
def app
    foo getFoo()
        ret networkRes() // res는 어떤 타입을 반환하는 메소드에서도 나갈 수 있다.

    void take1()
        f := getFoo() // f에는 networkRes를 가지고 있는 null객체가 들어있다.
                      // @err이 없으므로 f에는 null객체가 할당된 후, 반환한 err을 그대로 main()으로 넘긴다.
                      // main에도 @err이 없으므로 getFoo()로부터의 callstack이 찍힌다.

    void take2()
        with f := getFoo()
            @err(res r): r.calls.print() // 어떠한 res도 다 받는다.
            @err(networkRes r)
                r.calls.print()
                retfun; // err은 블록문이다. ret를 하게 되면 f.say()가 수행될 것이다.
        f.say() // f에는 null이 들어가있다. 이 라인을 수행하면 nullAccessErr가 반환된다.
                // take2에는 @err이 없다. getFoo() 안에만 @err이 있다. 따라서 err이 밖으로 반환된다.

    void take3()
        @err(networkRes r): r.calls.print() // 별다른 반환을 하지 않으면 "ret" 와 동일하게 동작한다.
        @err(nullAccessRes r): c.println("null Access!")

        f := getFoo()
        f.say();

    void main()
        take1()
        take2()
```

* 다른 예제

```namu
def app
    void main()
        f := getFoo()
        @res(networkRes r)
            doSomething()
            ret foo()

        @warn(nullAccessRes r) // 인자명은 없으면 안 된다.
        @err(divideZeroRes r)
        // @res: 에러가 반환되면 불려진다. 별다른 명시가 없으면 ret null을 한다.
        // @warn: @res동작을 수행하며, 추가로 로그를 찍는다.
        // @err: 별다른 @res, @warn 등이 없으면, 컴파일러는 메소드에 @err(res r)을 넣어둔다. 
        // @warn의 동작을 수행하며  메소드를 종료한다. 반환값은 이 res가 된다.
        // @quit: @err을 수행하고, 브레이크 포인트를 걸거나 프로그램을 종료한다.
        // res가 반환될때마다 컴파일러는 res에 콜스택을 pushBack으로 추가해놓는다. 
        // 브레이크 포인트가 걸렸을때 콜스택의 최상단은 처음 exception이 발생했던 곳으로 위치하도록 조정한다.

        // main()에는 별다른 명시가 없을 경우 @quit(res r) 를 추가한다.
```

* 잘못된 예제
```namu
@res(res r)
@quit(res r) // 이미 res로 지정이 되어있기 때문에 컴파일 에러다.

@res(res r)
@quit(nullAccessRes r) // 에러가 아니다.
```



























# 메타

```cpp
import console

Person
	void say(): console.out(" - I don't know my name.")

Person Chales
	void say(): console.out(" - My name is Chales Lee.")

Person Park
	void say(): console.out(" - My name is Hoon Park.")


app
	main()
		type[] cls = [Person, Chales, Park] // 사실 class 또한 타입에 불과하다.
		for type e in cls
			console.out("\n" + e.name + " has " + e.subs.len  " children.")
			for var child in e.subs
				console.out("\n - " + child.name)
				console.out(" - " + e.size + " bytes. nd is sub of " + e.name + " ? -> " + ...
				child.isSub(e))

			// 객체 정의: e.instance() | e() | e.new()
			// 모두 node타입의("?") 객체를 반환한다.
			? instance = e.instance()
			Person p = instance // 이것과 위. 2줄은 컴파일 될 수 없다.
			p.say() // 위의 3줄은 e().say()와 같다.


/* 결과:
Person has 2 children.

 - Chales
 - 24 bytes. and is sub of Person ? -> true
 - My name is Chales Lee.

 - Park
 - 24 bytes. and is sub of Person ? -> true
 - My name is Hoon Park.

Chales has 0 children.
Park has 0 children.
*/
```









# Language Binding

* Language Binding이란 서로 다른 언어를 묶어주는 것으로,
* 여기서는 C++ 코드를 worldlang에서 인식하게 하는 것을 목표로 한다.
* C++ 문법으로 worldlang bridge framework 라는 API에서 제공하는 매크로와 클래스들을 사용하면, 해당 C++ 클래스를 worldlang 문법으로도 사용이 가능하도록 하는 것이다.



## 바인딩의 큰 방향

* 타 언어가 worldlang에 맞춰야 한다. 그렇게 되면
    * worldlang bridge API가 단순해진다.
    * 자동 마샬링 등을 신경을 덜 써도 된다.
* 자동 마샬링은 반드시 그 언어에 포인터 연산이 추가되게 된다.
* 자동 마샬링/바인딩을 사용하지 않으므로 포인터연산과 관련된 부분이 제거된다.




## [x] 기본타입에 대해서는 mashalling이 지원되어야 한다.

- nbool Node::isConst() const 를 보니까 그런 생각이 드네.


## World개발자/모듈개발자가 함수내에서 사용가능한 predefined

- this : 이 인스턴스
- me : 이 클래스
- super : 부모클래스





## 묵시적형변환으로 인해 임시객체가 생성되므로 메소드 내부에서 set 된 값이 할당되지 않는다.

- 예)
  - NativeMethod void foo(Integer& mul); 이라는게 있다고 하자. 이는 mul을 2배로 하는 것이다.
  - 만약 mul에 Float을 넣게되면 [Float.to](http://float.to/)<Integer>()가 되고, 이 때 나온 Integer는 전혀다른 객체다. 그러므로 Integer가 foo() 내부에서 2배가 되더라도 외부의 Float은 2배가 되지 않는다.
  - c++은 이런경우 "int변수를 넣거나, mul을 const 로 선언해라" 라는 에러를 내보낸다.
- 결론 : 묵시적은 다운캐스팅과 World의 pretype에 한해서만 동작하는 경우 2종류가 있다. 뒤의 pretype은 명시적 캐스팅으로 동작하는 것으로, 이는 새로운 객체가 탄생하는 것이다. 새로운 객체는 당연히 return후에도 호출자 함수내의 코드에 영향을 줘선 안된다. pretype은 대부분 occupiable이기에 더욱 그렇다.
  - str은 occupiable이다. 밑에 예제를 보자.
  - class A
    - void foo()
    - void setname(str name)
      - _name = name
      - name="wow" *// _name은 wow가 아니여야 한다. 그게 맞는거다.*
  - *// 사용자가 명시적으로 sharable 클래스를 한 경우*
  - extend B
    - B(A a)
      -  ....
  - class A
    - void foo(B b)
      - b.setage(5)
  - B b(3)
  - A a
  - a.foo(B(a)) *// 자, 누가봐도 여기에 생긴 B는 임시적으로 생긴 객체구나, foo()가 끝나도 여기있는 B에는 영향을 주지 못하겠구나... 라는 걸 알 수 있다.*
  - B b1(a)
  - a.foo(b1) *// 이렇게 하면 foo는 여기있는 b1에 영향을 준걸 호출자가 확인할 수 있다.*
  - b1.getage() *// 이렇게.*



## IDE에서 실행하지 않는 STMT에 있는 지역변수을 어떻게 인식하게 하는가?

- 메소드 같은 경우는 파싱하면서 class에 실질적으로 추가가 되므로 이를 IDE도 인식할 수 있다.

- 그러나 지역변수는 실행하지 않는 이상 메모리 점거가 되지 않은 상황이므로 IDE에서는 이러한 지역변수를 만들려고 한다는 것은 string값으로 변수명을 알 수 있어도, 이후 등장하는 변수명이 어떠한 타입의 지역변수인지는 직관적으로 알 수 없다.

  - 예) // world code
  - class A
    - void print(int b)
      - int a = 5
      - print(a)
  - 위의 코드가 STMT로 만들어지면,
    - CallStmt("print", {args[0] = "a"})
  - 이런식이 되어있을 것이다. 여기서 IDE는 "a"라는 args[0]의 값만 보고도 아, 이게 int형 타입의 지역변수라는 걸 알 수 있어야 syntax highlight를 하던 뭘 하던 할 수 있을게 아니냐는 것이다.

- 1안 Stmt의 종류는 대개 할당연산, 초기화stmt 등등 정해져있다. 하나씩 IDE에서 처리를 하면된다.

- 2안 C-REPL을 지원하면 어짜피 수정한 라인들의 dependents들의 validation을 해야 한다. 이과정에서 정보가 나올것이다. 그걸 축적시켜가면 되지 않을까?

  - 2-1안 그 심볼정보를 "IDE에서만 정보 노출시키기"로, Source 객체에 삽입시킨다.



## WORLDLANG에서 C++의 operator+는 +()로 표현하도록 한다.

- 월드코드로 작성한 +() 함수를 만드는 건 해결했다. 문제는 Module개발자가 operator+()로 c++의 포맷으로 만들 걸 World에서도 visible하게 내보낼 수 있는가?

- operator+도 그냥 함수니까. C++에서 이거에 대한 fptr를 만들수 있다면 가능할것 같은데.  --> 테스트 해보니, 일반 함수처럼 fptr를 만들 수 있다. 문제없다.

- c++은 앞에 operator+를 붙인다. world에서는 +()로 할 수 있을까?

  - 파싱 문제가 있을 수 있다.

    - 아마 function 문법은 가운데 +()형태로 오는 경우도 있다 라고 정의하면 될것같다. 하지만 직접 해보지 않으면 모르겠네.

  - 모듈개발자가 operator+로 정의하면 이게 world는  +로 인식이 되어야한다.

    - 즉 매크로 안에 "operator+"로  입력한 경우에는 world에서 +()로 바꿔넣어야 한다. 하드코딩하면 될것이다.



## 사용자가_vector를_모듈의_메소드의_인자로_사용하고_싶을_경우는?

- [v] vector를 wrap 하는 Object를 상속해서 만든다



## 생성자도 C++에서 fptr가 안된다. 어떻게 할까

- 시나리오
  - class A : public Object {
  - public:
    - A()
    - A(int a)
    - void print(my_char_struct* s);
  - };
  - class NativeMethod__print {
    - static void(A::*_fptr)() = A::print;
    - virtual run(msg) {
      - A* this = scope.getThis();
      - (this->*_fptr)(msg[0].to<TClass<my_char_struct*>(), msg[1].to<Type2>());
    - }
  - }
  - class NativeMethod__A {
    - virtual run(msg) {
      - Refer ref(new A());
    - }
  - };
- 1안 매크로로 함수명 제공 + 함수명을 strcompare to 클래스명 + is_constructor<Args...>
  - 클래스명을 어떻게 함수 정의 매크로에게 전달할 것인가?
  - [v] 함수 정의 매크로는 어떻게 일반함수건 생성자이건 동작되도록 할까? 이 매크로를 어떻게 짜면 될까?
    - [v] 1안 그냥 2개 하자
      - [v] 그것이, 이 함수가 생성자인지를 판단하지 않아도 되고, 여러모로 편하다.





## World코드로 사용자가 native C++함수를 override하면 어떻게 되는가?

- C++코드 ---사용되어짐--> World는 지원하지만, 반대는 지원하지 않는다. 그럴 경우도 적고. 따라서 C++에서는 World코드로 생성된 클래스는 invisible하다.
- C++에서 World 함수를 호출하고 싶다면 파서가 파싱하면서 CustomClass 인스턴스의 내용물을 채우는 것이다. C++에서는 call("") 함수를 사용해서 함수를 호출하면 된다.
- 시나리오
  - World의 to함수와 native의 Bind<Node> to(Class&)의 경우
    - World코드의 to함수를 떠올려보자.
      - int a = 5
      - [a.to](http://a.to/)(string) + "world" // --> 5world가 된다.
    - 이때의 to 함수의 정의는 World에서 어떻게 될까?
      - node to(class)
      - node는 mutable인 unknown타입이므로 실제 타입은 Reference(node)다.
      - class는 type의 클래스를 상속받은 class클래스이고, 이건 mutable이므로 Reference(class) 다.
    - 모듈개발자는 어떻게 작성하나?
      - // 실제 함수
      - class Me {
        - DECLARE_FUNCTION(Node&, Node, to, Class, Class&)
        - Node& to(Class& rhs) {
          - ....
        - }
      - };
    - 어떻게 expand 되나?
      - to함수에 대한 RTTI Function 클래스 정의의 예시.
      - class __Node_to_Class_Function : public Function {
        - typedef Node& (This/*== class Me*/::*FunctionPtr)(Class&);
        - FunctionPtr _fptr;
        - This() {
          - // Node는 mutable이므로...
          - members.push(Reference(TClass<Node>())); // 반환형 정의
          - members.push(....); // thisptr 정의
          - members.push(Reference(TClass<Class>())); // 인자1 정의
          - // members는 반환형, thisptr다 정의되어있음
          - // args는 members의 대한 origin 배열로, 인자 + thisptr로 정의되어 있음.
          - _fptr = This/*== class Me*/::to
        - }
        - call(Member[] outs) {
          - // Reference는 Bind이므로 값이 보관된다.
          - if args.length != outs.length
            - return error
          - ((Reference&) args[0]/*static cast는 비용이 없다*/) = outs[0].to<THISPTR 타입>(); // to<T>()의 반환형은 Bind<T>()
          - // Reference는 Bind<Node>를 받을 수 있다. 따라서 T는 Node여야 한다.
          - // to()는 Bind로 나오고 이게 곧바로 Reference안의 Bind<Node>로 들어가므로 문제는 발생하지 않는다.
          - ((Reference&) args[1]) = outs[1].to<Class>();
          - if one of args[n] is null
            - return
          - return execute() // 모듈개발자는 members[0]에 반환값을 쑤셔넣는다. Node 타입으로 넣어놓았을 것이다. 반환형은 Reference. 즉, Bind<Node>와 동일하다.
          - // 이제 caller는 getResult()로 members[0]을 꺼내면 된다.
          - Q. Bind는 Node의 일종인가?
            - 아니다. (World의) Msg를 받을 수 없기 때문이다. World는 포인터를 전면에 내새울 수 없다.
          - Q. Bind는 World에 visible 한가?
            - 아니다.
          - Q. 그렇다면 모듈개발자는 반환형으로 Node 대신 Bind를 쓸 수 있는가?
            - 엄밀히 말하면 Reference(TClass<Bind>)가 된다. 예외처리를 하지 않으면 C++컴파일에러가 발생하지는 않는다.
        - }
      - }
- 고찰 내용
  - 예를들어보자.
    - class Node
      - virtual bool execute()
    - World코드에서
      - class MyClass
        - bool execute()
      - 파서는 "bool execute()"를 보고 CustomFunction의 데이터를 채워서 메타클래스에 삽입한다
      - class CustomFunction
        - Member[] arguments
          - [0]은 반환값
          - [1]은 thisptr
        - fptr* 없고, 대신 Statement[] codes
      - CustomFunction({Boolean(), TClass<MyClass>()}, {......})
    - 이제 World에서 만들어진 CustomClass는 CustomFunction 원소를 하나 가지고 있게 된다.
    - 이 클래스는 C++에서는 알려져 있지 않다. 굳이 호출하려면 C++에서 World의 문법을 흉내내어 접근하는 수밖에 없다.
    - 그리고 이는 문제가 되지 않는다. (C++ --사용되어짐--> World은 가능해도 World ---> C++은 요구사항이 없기 때문이다.



## 모듈식별

- id와 module명은 구분을 위해서 필수요소이다.  모듈을 만들때 DLL/SO파일에 헤더에 2가지 값을 입력해야 한다.
  - sigin이란 과정을 통해서 id/pw를 입력하면 key를 홈페이지나 툴에서 발급한다. 공개키로 이 key는 누구나 손쉽게 "validate"를 할수 있다.
  - World코드 라이브러리는 어떻게 되는가?
    - World코드 라이브리를 export(배포) 하는 과정도 모듈을 만들어 배포하는 과정과 동일해야 한다. 월드의 대 원칙중 하나는 "Native건 Managed건 사용자 입장에서는 차이가 없어야 한다" 이기때문이다. 따라서 World코드로 작성된 Library(클래스의 집합)은 단순히 Array<Class> 가 아니라, 헤더가 존재할 것이며 여기에 배포자, 날짜, 등등의 Native모듈을 배포하는 것과 동일한 데이터가 들어가게 될 것이다.
- 1안 - id.module명.클래스명
  - kukkulza3.console.ConsoleOut
- v 2안 - id.module명.패키지명.클래스명
  - [kukkulza3.my](http://kukkulza3.my/)_module1.ConsoleOut --> OK.
  - [kukkulza3.my](http://kukkulza3.my/)_module2.ConsoleOut --> OK.
  - [kukkulza3.my](http://kukkulza3.my/)_module1.consoles.ConsoleIn --> OK.
- 모듈식별자가 중복을 걱정하지 않아도 된다.
  - id는 World홈페이지에 유일하게 1개만 존재한다. 이걸 보장한다.
  - 같은 개발자가 동일한 모듈명을 배포할 수 없다.
  - 하나의 모듈은 하나의 프로젝트다. 당연히 여러개의 클래스가 있을 수 없다. C컴파일러가 이걸 보장한다.
  - 모듈식별자는 개발자가 각 클래스를 배포할때 정의한다. 정의하지 않을 경우에는 WorldFrk가 클래스이름을 가져와서 이걸 바탕을 만들어준다.
    - 만약 namespace가 다를 뿐, 클래스명이 같다면 어떻게 되는가?
      - demangle API (abi::__cxa_demangle()) 을 사용하면 NameSpace까지 다 찍혀서 나온다. 하지만 GCC API이므로 다른 컴파일러로는 실행이 안되겠지.
      - 함수 nested class 같은경우는 함수명(인자리스트)::클래스명 으로 찍히게 된다.
      - 클래스 nested class는 클래스명::클래스 로 찍히게 된다.
    - (~~~) 포함하여 ::를 .으로 고친다. (~~~)를 포함하는 이유는 당연히 함수가 오버로딩 될 수 있으니까.
  - 알다시피 인터프리터는 2pass로 돌아간다. 일단 컴파일과정으로 모든 코드를 읽어들이고 클래스로 등록한다. 그리고 validate과정을 거치면서 함수호출이 정당한가를 따진다. 이때 모듈식별자로 모듈을 접근할 수 있는가도 따지게 된다.
  - 원칙적으로는 코딩시 모듈식별자를 전부 기입하여야 한다.
    - class MySubClass : kukkulza3.console_module.interface.ConsoleOut
  - 이게 매우 성가시므로 줄여서 표현하는 방법을 제시한다. 이게 import다. 사용자는 어떤걸 줄여서 표현할 것인지를 앞에 명시할 것이기 때문에 모호성의 오류는 코드 생성시에 탐지 할 수 있다. 런타임 도중 모듈이 추가됨으로써 다른 모듈로 접근되는 사태는 발생하지 않는 다는 것이다. (이 특징이 매우 중요하다)



## Managed vs Native 네이밍 충돌 이슈 해결해야 함

- 네이밍 충돌은 가급적 사용자에게 책임을 떠넘기는 형태로 가기로 한다.  사용자는 Object 기본클래스에 어떠한 메소드가 있는지 사전에 알 고있어야 하며, 그것을 함부로 overriding할 수 없다는 사실도 알고 있어야 한다.
- 고찰내용
  - 문제 : WorldFRX 의 메소드들은 기본적으로 World에 visible하게 된다. 이렇다보니 WorldFRX에서 World개발자가 사용할만한 함수를 먼저 사용해버리는 상황이 생길 수 있다. (이를테면 getName()) 이럴경우 World개발자가 함수 호출할 때, World코드의 getName()이 아니라 Node::getName()이 대신 호출되게 될 것이다. 이문제를 해결하려면?
    - 1안 prefix붙인다.
      - @ 안으로 파고드는 모양이니까, internal이라는 뜻에서 프레임웤 함수들은 @getName 으로 적으라고 한다.
    - 2안 구체클래스의 것이 오버라이딩되게 한다.
    - v 3안 Java처럼 그냥 쓰라고 한다.
      - java.Object도 기본 함수들이 있고, 사용자도 잘 쓰고 있다.
        - toString()
        - equals()
        - clone()
        - finalize()
        - getClass()
        - hashCode()
        - notify()
        - wait()
      - World는
        - getClass()
        - getID()
        - getSerialID()
        - release()
        - clone()



## Array, Set, List 을 Native 바인딩과 연결하는 방법은?

- Wrapper를 개발자가 만들어야 한다. 값으로 반환 및 const T*는 자동화해서 한다고해도, T*는 native 개발자가 어떻게 사용할지 도저히 알 수 없기 때문에 결국은 개발자가 중간에서 마샬링을 해줘야한다. 고로 Wrapper개발자는 World visible한 타입으로 함수paramter를 선언하고, 그 함수 안에서 native 함수의 native 타입으로 데이터를 refine 하는 작업을 해줘야 한다.
  - char* gen_xml_parsed(char* buf, char* path);
  - class XMLParser : Object
    - static void onInflacture(List<Method>& tray)
      - DECL(String parse(String path)
    - Reference parse(String& node) // BEST OK
      - **char buf[65535] = {0, };**
      - **gen_xml_parsed(buf, node.to<char\*>());**
      - **return Reference<String>(new String(buf));**
    - //String parse(String path) --> OK
    - //Reference parse(Node& path) --> OK
    - //String& parse(const String& path) --> OK
      - return new String(buf);
- 고찰내용
  - 다른 건 괜찮은데 capi가 int[] 를 사용하는 경우가 문제다. 사용하는 쪽에서 const를 사용하는 거라면 괜찮은데 값을 쓸려고 한다면 배열의 크기가 어떻게 되는지 외부와 내부가 서로 입을 맞춰야 하기 때문이다. 왜냐하면 케이스에 따라서는 World는 Native가 원하는 int[]를 만들어 낼 수 없다.



## Native C++ 함수와 World 함수간의 바인딩

- 사용자는 C++ class를 만들면서 메소드중 World에 노출시키고싶은 함수에 대해 World매크로를 사용하여 메타정보를 생성하게 한다.
  - 예) "foo", "int"
- Function 메타클래스는 주어진 인자타입을 T로 삼는 TClass를 만들어 Member[]에 넣어둔다. 이게 인자의 타입이 된다. 동시에 origin 함수에 대한 pointer와 각 인자를 어떠한 C 타입으로 바꿔야 하는지도 알고 있다.
- Function의 타입으로 포인터는 존재하지 않는다. 일체 나올 수 없다. 포인터를 인자나 반환값으로 사용한 함수를 World로 노출시키고 싶다면 직접 래퍼를 작성해야 한다.
  - 이는, 어떠한 시나리오나, 경우의 수를 타고가도, 설령 완벽하게 월드가 포인터나 구조체도 자동으로 변환하도록 만들어도 결국 래퍼를 개발자가 작성해야 한다는 걸 고찰로 알았기 때문이다.
- 인자가 Member에 담겨서 Function에 넘겨오면 Function은 [Argument.to](http://argument.to/)()를 해서 자신이 들고있는 Member(== parameter)에 할당연산을 수행한다.
  - 할당연산은 Node 공통 연산이다. 그러므로 타입을 몰라도 가능하다.
  - 이 과정에서 고스트 인스턴스는 발생할 수 없다.
- call()은 들어온 msg와 msg의 인자로 실행할 진짜 함수의 분기를 결정하는 역할을 수행한다.
- execute()는 members에서 값을 꺼내서 실행을 한다. 매크로가 expand되면 사용자의 코드는 execute() 사이에 들어가게 된다.
- 마샬링을 하는 진짜 주체는 사람일 수 밖에 없다.
- 고찰내용
  - 이번엔 함수에 인자가 전달되는 과정을 놓고 문제를 기안한다.
  - class MyClass : public Node {
  - public:
    - void foo(int a) {
      - cout << a;
    - }
  - }
  - foo()함수는 World를 통해 호출할 수도, c++를 통해 호출할 수도 있다.
  - 문제는 여기에서 묵시적 캐스팅을 어떻게 해결할 것인가가 관건이다.
  - c++로 호출하는 경우에는 개발자와 C++ 컴파일러에게 맡기면 된다.
  - World에서가 문제다
    - World로 call("foo", {Integer(5)}) 가 들어왔을때, 이걸 해독하여 foo(int)를 호출할 수 있도록 해주는것이다.
    - Node::call(string name, args[])
      - for m in members
        - if m.getName() == foo
          - m에게 나머지 messgage를 맡긴다.
            - 만약 message가 foo.getName() 일 경우에는 m의 getName()이 호출되는 것이다.
            - 우리는 여기에서 message가 일종의 stack의 형태로 존재해야 한다는 걸 유추할 수 있다. 새로운 문제점으로 등록해서 고찰해봐야 하겠지.
            - 그 상세는 나중에 따로 다뤄보고 일단 여기에서는 동작한다고 가정하자.
          - m.call("", {Integer(5)})
    - m::call(string name, {Integer(5)})
      - m은 Function이므로 name이 "" 인경우 1개 밖에 없다. 자기자신을 execute() 한다.
      - if name == ""
        - m이 Binding하고 있는 function A는 int 인자1개를 받는 다는 것을 알고있어야한다.
          - Function이 가지고 있다. 사용자의 매크로를 통해서 메타정보를 받는다.
        - my_func(arg[0].to(int)
          - foo(int) 와 foo(int&)를 어떻게 구분하는가?
            - World에서는 참조자를 아무데다 막 붙일 수 없다. 그 클래스가 sharable인가 아닌가로 이미 결정되어진다. int는 항상 occupiable이다. int&라는 건 존재하지 않는다.
            - swap 문제를 참고해보라.
  - C++로 작성한 함수는 World에서 호출이 가능해야 하고, 반대로도 가능해야 한다.
  - 이 문제의 포인트는 3가지다.
    - 어떻게 하는가?
      - 경우의 수는 4가지다.
        - \1. C++ 함수를 C++에서 호출함
        - \2. C++ 함수를 World에서 호출함
        - \3. World 함수를 World에서 호출함
        - \4. World 함수를 C++에서 호출함
        - 이 중에서1, 3은 자연스러우므로 제외한다.
      - World함수를 C++에서 호출하는 방법은 비교적 자연스럽다. C++은 World를 포함하고 있으므로 개발자가 잘 만들면 불가능하지는 않기 때문이다. 어짜피 World는 메시지를 기반으로 하기 때문에 call()함수의 인자를 잘 주기만 하면 될것이다.
      - 따라서 이후로는 C++함수를 World에서 호출하는 방법을 중심으로 생각하고, 마지막에 검증하는 형태로 고찰한다.
        - 이 방법의 포인트는
          - 캐스팅은 새로운 Node의 생성을 의미하는 것이다. src가 sharable이라면 Reference만 생성이, ocuppiable이라면 Node 자체가 생성될 것이다.
          - sharable은 묵시적 형변환이 제한적으로 동작된다. occupiable은 타 타입간의 형변환이 적용될 수 있다. 왜냐하면 occupiable 타입은 함수의 parameter와 argument가 서로 다른 인스턴스 이기 때문이다.
            - C++의 경우
              - foo(int a);
              - boo(int& a);
              - foo(3.5f); // ok
              - boo(3.5f); // no.
            - World에서는 int, float은 sharable이 될 방법이 존재하지 않는다.
              - class WorldClass
                - result foo(int)
              - WorldClass().foo(3.6f) 는 이론상으로는 "변환이 될 가능성"이 있다. 자세한건 형변환 우선순위를 참고하자.
          - 위의 내용을 만족하면서 가급적이면 예외적으로 동작하지 않게 만들어야 한다.
        - 1안



## 매크로 간편화

- 사용자는 헤더파일만 혹은 헤더파일과 구현파일에 NAMU_DECL 매크로에 메소드 정보를 기입해야 World에 visible하게 된다.
- 메소드 정보 기입시 규칙은
  - \1. 반환형과 함수명, 함수명과 인자리스트 사이에 , 를 삽입해야한다.
  - \2. 인자명은 기입하지 않는다.
- 고찰 내용
  - DECL이 선언되야할 장소는?
    - 1안 - DECL 안에 wrapping을 수행하도록 한다?
    - 2안 - DECL과 method를 따로 내보내고 method안에서 필요시 wrapping하게 한다.
      - 조건1. DECL선언해야 한다.
      - 조건2. 함수를 DECL에서 선언한것과 동일하게 적어야 한다.
        - 이때 반환형 T가 Sharable인지 occupiable인지는 구분하지 않아도 일단 돌아는 간다. 퍼포먼스는 문제가 있겠지만.
      - 예제
        - char* gen_xml_parsed(char* buf, char* path);
        - class XMLParser : Object
          - static void onInflacture(List<Method>& tray)
            - DECL(String **parse(String path)**)
          - String parse(String& path)
            - char buf[256];
            - gen_xml_parsed(buf, [path.to](http://path.to/)<char*>());
            - return String(buf);
            - 따라서
          - --> type T=String은 sharable이나, 값으로 넘어왔다.
          - World는 다음과 같이 expand 한다.
          - \#if T==VALUE
            - T _result;
            - \#if RETURN_T==BY_VALUE
              - _result = (me.*_fptr)( *(args[0].to<String>()) );
            - \#if RETURN_T==BY_REF
              - 상동
          - \#else
            - Reference _result;
            - \#if RETURN_T==BY_VALUE
              - _result = (me.*_fptr)( *(args[0].to<String>()) ).clone();
            - \#if RETURN_T==BY_REF
              - _result = (me.*_fptr)( *(args[0].to<String>()) );
    - v 3안 - 어짜피 모든 클래스들은 W_DECLARE_CLASS가 있어야 한다. 여기에 같이 적으라고 한다면?
      - 이게 일단 가장 베스트 같다.
      - char* gen_xml_parsed(char* buf, char* path);
      - class XMLParserModule : Object
        - W_DECL_CLASS(XMLParserModule, Object, (
          - String parse(String Path)
        - ))
          - **FOR_EACH 매크로를 통해서 구현한다.**
        - Reference parse(const String& path) {
          - Reference ret = String::make();
          - ... do something ...
          - return ret;
        - }
  - Module의 Thisptr를 선언할 수 있는 방법은?
    - 3안으로 한다면 이것도 해결 가능하다.
  - 위의 코드가 있을때 DECLARE_FUNCTION(Node&, Node, to, Class, Class&) 이거 더 간단하게 하는 방법은?
    - 1안 - 매크로로 문자열 split을 하고, 이렇게 나온 문자열로 Class&를 가져오도록 할순 없을까?
      - 문제는 char* 을 타입으로 매칭시키는 부분이다. type_info::name()은 기본 mangling이 되어서 나오며, 컴파일러마다 다르며, "int *" 인지, "int*" 인지 다를 수 있기 때문이다.
        - 이론적으로 이러한 파싱 알고리즘을 짜는 것이 불가능한 것은 아니다.
        - 이 방법은 fptr를 지정할 수 없다.
    - x 2안 - const char*가 아니라 매크로 상태로 split을 할 수 있을까?
      - 문제를 작게 나눠서 해결해보자.
      - X(int a) --> int, a로 나눌 수 있어야 한다.
        - 불가능하다.
    - v 3안 - 사용자에게 , 로 구분하도록 한다.
      - 어쩔 수 없다. 3시간 고찰 한 결과가 이거다.



## Native로 작성한 것과 World코드로 작성한 것은 World 입장에서는 아무런 차이가 없다.

- 개발자 작성한 C++ 코드를 World에서 호출하도록 하는 것은 다른 언어에서도 당연히 되는 것이다. 여기서 말하고자 하는 핵심은 그게 아니라,
- C++ Native작성된 대부분의 World FRWK의 함수들을 그대로 World에서도 사용이 가능하다는 얘기다. World FRWK개발자는 거의 0에 가까운 비용으로 이걸 가능하게 한다.
- 어느 함수는 공개되어서는 안되는 경우도 존재한다. FRWK 개발자는 이걸 선택할 수 있다.





## World에 visible하다는 뜻은 무엇인가

- \1. Node 계층에 있어야 한다.
- \2. Scope에 등록이 되어야 한다.





## Statement, Call, Method의 연계

- 문제 : Statement --> Call --> Method ---> returnValue to Call --> ReturnValue  to Statement 까지 의 일련의 과정들을 잘 설계해야 한다.
- Statement
  - Arguments params // [0]은 target이다.
  - virtual execute()
    - Method.call(params)
- Method
  - virtual Node& getReturn() = 0
  - virtual Node& call(Messages& msg)
    - if(msg.getMessage() == "()")
      - return call(msg.getArgugments())
  - virtual Node& call(Arguments&) = 0;
- MyMethod
  - Integer _return; // or **Reference(MyClass) _return;**
  - virtual Node& getReturn() { return _return; }
  - virtual Node& execute(Arguments& args) {
    - setArguments(args);
    - execute();
    - return getReturn();
  - }
  - virtual Result& setArguments(args);
    - Bind<Integer> age = args[0].to<Integer>();
  - virtual Result& execute() {
    - Bind<MyClass> me = args[0]to<Integer>();
      - // 내부에서 call()을 거쳐서 Node&가 나옴. to()는 이걸 Bind로 묵어서 내보냄. 왜냐하면 값이 나올지, 참조자가 나올지 to는 알지 못하니까. 여기서도 bind로 받음. 이 Node&는 곧 사라질 수 있음.
    - return _return = (me->*_ftpr)(*age); // 컴파일러 접근제한자 무시함
      - // _return의 타입은 T가 값이면 T, 참조자이면 Reference(T)
      - // Bind::operator=(Reference&) 지원해줘야 함. 사실 같은것.
  - }
  - _fptr = &MyClass::myAdd;
- MyClass
  - Integer myAdd(Integer& add)
    - // myAdd(Integer add)도 ok. 그러나 값이 2번 복사됨.
    - this->age += add;
    - return age; // age가 1번 복사되고, 할당연산이 추가적으로 일어남. 총 2번.
- MyMethod2
  - Reference _return(View); // View는 Node의 일종.
  - virtual Node& getReturn() { return _return; }
  - virtual Node& call(Arguments& args) {
    - Bind<View> front = args[1].to<View>();
    - Bind<View> back = args[2].to<View>();
    - Bind<Integer> frame_count = args[3].to<Integer>();
    - Bind<MyClass2> me = args[0]to<MyClass2>();
    - return _return.bind( (me->*_ftpr)(*front, *back, *frame_count) );
    - // 참조자로 넘어온다는 것은 전역이거나, HEAP이거나 둘 중 하나로 간주한다. 지역변수를 참조자로 넘기는 짓을 World에서 탐지해서 경고해야할 만한 가치는 없다. 기본적인 개발자의 소양이 없는 거지.
  - }
  - _fptr = &MyClass2::myAdd;
- MyClass2
  - View& myAdd(View& a, View& b, Integer& add)
    - if(a.getFrame() < add)
      - return a;
    - return b;
- 고찰 내용
  - 동작 가능한가가 중요하지 않다. 좋은 설계를 찾는 것이 중요하다.
    - 중복된 코드가 없어야 하며,
    - 직관적이고,
    - 여러 관점에서 사용할 수 있어야 하고,
    - 속도가 합리적이야 한다.
    - 상속 트리를 잘 구성해야 한다.
  - v 1안
    - Statement
      - Arguments params // [0]은 target이다.
      - virtual execute()
        - Method.call(params)
    - Method
      - virtual Node& getReturn() = 0
      - virtual Node& call(Messages& msg)



## MDK로 모듈을 만들때 사용자는 반드시 Object에서 상속을 받아야 한다.

- 다음 2가지의 케이스도 되지 않냐고 착각할 지 모른다.
  - x 1. DEFINE 매크로를 사용하여 일반 클래스를 open시키기
    - 절대 안된다. 왜냐하면 이 일반 클래스가 무엇인지 월드는 전혀 알 수 없기때문에 이 일반클래스 안의 METHOD를 호출할 방법이 없게 된다. 객체를 만들어야 THISPTR가 나오기 때문이다.
    - 게다가 설령된다고 하더라도 C++ 함수 안에서 이 함수에 직접 호출한 것과 World가 이 일반 클래스와 매칭되는 객체라고 여기고 들고있는 Object와 연동이 안된다. 오로지 Object를 통해서 TClass로 들어간 경우에만 연동이 되는 것이다.
  - x 2. InterfaceClass/ConcreteClass 에서 상속을 받아서 직접 클래스정보를 기술하기
    - class Integer : public ConcreteClass {
      - virtual Bind<Node> call(Message& msg) {
        - if ([msg.name](http://msg.name/) == "get")
          - msg[0].get()
        - else if([msg.name](http://msg.name/) == "set")
          - msg[0].set(msg[1])
      - }
      - int get() { return _v; }
      - void set(int new_v) { _v = new_v; }
      - int _v;
    - }
    - 나도 위처럼 하면 되는거 아닌가 착각하는 바람에 이미 풀었던 문제를 30분동안 다시 생각했다.
    - 결론적으로 class는 "객체"가 아니기 때문에 안되는 것이다. Integer는 클래스의 정보를 나타내는 Class class로부터 상속을 받았기 때문에 원칙적으로 시스템에 1개만 존재해야 되는 개념을 갖게 된다.
    - 그리고 위의 코드에서 결정적인 잘못은 저 call안의 [msg.name](http://msg.name/) 비교 로직은 실제 구현은 저렇게 되면 안되고 배열같은 걸 써서 loop을 돌아야 할것이라는 것이다. 그러면 그 배열은 객체마다 존재해서는 안된다. 내가 C++ 모듈안에서 Integer 객체를 만들게 되면 그 배열을 매번 만드는 꼴이 된다. 물론 이것만 static을 써서 해결은 가능하지만, 그런 상황에 쓰라고 만든게 TClass 시리즈인데, 이걸 안쓰고 Class안에서 다시 static 배열을 쓴다? 이미 정상적인 설계가 아니라는 걸 감잡을 수 있다.
    - 게다가 Integer는 Class이기에 Type의 일종이지, Object의 일종이 아니게 된다. 아무리 member는 Node로 따지기 때문에 들어갈 수 있다고해도 월드코드로 생성된건 Object인데, c++로 만든건 Type에서 상속받은게 들어가면, 공통점이 없게 되고 관리나, 로직 수행에 있어서 특화처리가 나오게 될게 뻔하다. 월드는, 주어진 객체가 C++에서 코드로 만들어졌건, World의 소스코드로 만들어졌건, 구분할 필요가 없어야 하는게 이 설계의 핵심 포인트 중 하나다.
  - \3. 따라서 결론적으로 가능한 시나리오는 Object에서 상속을 받게 하는 것이다.
    - class Integer : pubilc Object {
      - DEFINE(Integer, Object, (
        - (int, get),
        - (void set(int)) //int는 MashallType<T>에 의해서 Integer로 변환된다.
      - ))
      - int _v;
      - int get() const { return _v; }
      - void set(int new_v) { _v = new_v; }
    - }
    - // in c++
    - Integer a;
    - a.set(3); // 을 한 경우 direct로 set()가 불린다.
    - // in world
    - class My
      - void main()
        - int a /* 코드블럭으로 다음과 같이 생성된다.
          - Object {
            - .class = Class<Integer>()
          - } */
        - a = 3 /* a.set(3)과 동일하며, 코드블럭으로,
          - Statement {
            - msg = {Object "a", "set", Integer(3)}
          - }
          - 가 들어있다. Statement::execute()가 되면 Object "a".call({"set", Object "a", Integer(3)}) 을 하게 되고,
          - Object "a"는 멤버변수 "set"이라는게 없으므로 class인 Class<Integer>::call({"set", Object "a", Integer(3)})을 호출한다.
          - Class<Integer>는 "set" Method에게 msg를 넘기고, "set" 메소드는 Object "a"를 Integer*의 thisptr로 casting하고, Integer(3)은 int(3)으로 바꾸어 Integer*->set(3)으로 호출하게 된다.
          - */ 보다 정확히 말하면 중간에 "()"가 execute()로 바뀌는 과정이 필요하나 생략한다.



## 모듈개발자가 모듈Method 내에서 Static 변수를 visible하게 하는 방법

- 로컬 바인딩의 지원으로 객체생성은 곧 binding 가능을 의미하게 되었다.
- 구버전
  - static int a = 5; // World에 보여지지 않는다. World에 넘길 수 없다.
  - static Integer a = 5; // 역시 World에 보여지지 않는다. HEAP이 아니기 때문이다.
  - static Reference a = Integer::make(); // HEAP에 있으므로 a를 넘길 수 있다.



## 모듈개발자가 클래스의 static 멤버변수를 visible하게 할 수 있는가?

- 현재로써는 멤버변수를 visible하게 할 순 없다. method만 가능하다.



## [v] Native wrapper 개선

* 알고리즘 1에서 2로 개선해보자.

### [x] 알고리즘1
```cpp
#define DEF_METHOD(RET, NAME, ARGS, STMT) \
  public: RET NAME ARGS { \
    Method& m = get(Msg(#NAME, {/*ARGS의 인자들(객체)을 Wrap해서 Object화 시킴*/}); \
    Refer r = m.run(ARGS);  \
    return r.cast<RET>(); \
  } \
  private: RET __real__#NAME() { STMT } \
  void onGetMethods(tray) { \
    tray.add(TNativeWrapper<__real__#NAME>());  \
  }

class My : public object {
  DEF_METHOD(void, sayMsg, (str, msg), (
    cout << msg.toStr() << "\n";
  ))
};
```

### [x] 알고리즘2
```cpp
// Boost코드를 참고함.
class My : public obj {
  void sayMsg(str msg) {
    cout << msg.toStr() << "\n";
  }
  DEF(
    TClass<My>::init()
      .func(My::sayMsg)
  )
};
```

### [v] 3안
* 제약조건
* 3rd개발자는 모든 메소드는 overridable, visible하게 해야 한다.
* worldfrx는 일부 메소드를 제외하고는 override 불가능하다.
* 함수명만 가지고도 반환형, 인자, 소속된 클래스명 모두 알 수 있다. 이걸로 NativeWrapper를 편하게 구성하자.
```cpp
#include <iostream>
#include "./projects/independentor.hpp"
using namespace std;

class Catcher {
public:
    template <typename R, typename... As>
    static void wrap(R (*f)(As...)) {
        cout << "catched!\n";
        // TODO: NativeWrapper 객체 만들어서 반환하기
    }
    template <typename R, typename T, typename... As>
    static void wrap(R (T::*f)(As...)) {
        cout << "catched T::*f\n";
		// TODO: NativeWrapper 객체 만들어서 반환하기
    }

};

#define __DEF_ADD_PREFIX(S) __NAMU_DEF_##S
#define __NAMU_DEF_FUNC(N) /*TODO: N이름의 함수를 정의한다. C++에서도 사용가능하게.*/
#define __NAMU_USE_SEAL(N)

#define __USE_ADD_PREFIX(S) __NAMU_USE_##S
#define __NAMU_USE_SEAL(N) __NAMU_USE_FUNC(N)
#define __NAMU_USE_FUNC(N) Catcher::wrap(&This::NAMU_VISIBLE(N));

#define NAMU_DEF(T, S, ...)  \
public: \
    typedef T This; \
    typedef S Super; \
private: \
	NAMU_EACH(__DEF_ADD_PREFIX, __VA_ARGS__) \
    static void onInit() { \
        NAMU_EACH(__USE_ADD_PREFIX, __VA_ARGS__) \
    }

#define NAMU_OVERRIDABLE(N) __namu_public_##N

class Object {};
class My : public Object {
    NAMU_DEF(My, Object,
        FUNC(sayAge)
        SEAL(foo) // worldfrx에서만 사용하는 비밀매크로.
    )

public:
    void NAMU_OVERRIDABLE(sayAge) (int age) {
        cout << "age=" << age << "\n";
    }
};

void foo(int, float, char*) {
    cout << "foo\n";
}

class A {
public:
    int foo(float a, const A& a2, A* b) {
        cout << "A::foo\n";
    }
    static void say() {
        cout << "A::say()\n";
    }
};

int main()
{
    Catcher::wrap(foo);
    Catcher::wrap(&A::foo);
    Catcher::wrap(&A::say);
    return 0;
}
```



## [v] non seal 매크로
### 요구사항
* native wrapper에 의해 공개된 origin객체를 mgd에서 상속받았을 경우 native에서 그 origin 객체를 받아 메소드를 호출했을때 overriding된 mgd의 메소드가 불려질 수 있어야 한다.
* wrapper을 할때 가능하면 메소드의 body를 매크로안에 집어넣지 않도록 하고 싶다.

```cpp
class myClass : public obj {
public:
	NAMU_CLASS(myClass, obj,
		FUNC(foo),
		FUNC(boo)
	)
	virtual void foo();
	void boo() {
		foo();
	}
};

def myObj := myClass
	=>void foo(): c.out("wow!")

m = myObj()
m.boo()
```

### [x] 1안 매크로안에 body를.

### [x] 2안 이름을 2개.
```cpp
class myClass : publc obj {
public:
	NAMU_CLASS(myClass, obj,
		FUNC(boo)
		OVERRIDE(_foo, foo)
	)
	void boo();
	virtual void _foo();
```

### [v] 3안 이름에 매크로를
* native 개발자는 virtual 이라고 하더라도 overridable을 지원할지 안할지 결정할 수 있다. (권장은 안함)
*

```cpp
class myClass : public obj {
	NAMU_CLASS(myClass, obj,
		SEAL(boo)
		FUNC(foo) // FUNC매크로는 static타임에 함수 NAMU_OVERRIDABLE(foo)가 존재할 경우 오버라이딩으로 판정.
	)

public:
	void boo();
	virtual void NAMU_OVERRIDABLE(foo);
```

#### [x] Q1. NAMU_CLASS안에서도 FUNC와 OVERRIDE를 구분해서 적어야하나? 그냥 FUNC로만 적도록 우리가 해줄 순 없을까?
* overriding을 할것인지는, 사용자가 NAMU_OVERRIDABLE을 이름에 붙였다는걸 보고 판단이 가능하다.
* 그런데 그 판단은 SFINAE를 통해서만 된다.
* SFINAE는 전처리 이후의 컴파일 타임이다. 즉 이시 점에서는 이미 매크로는 expanding이 되었다.
* 따라서, 판단은 가능하지만 판단할 시점에서 메소드를 추가하는건 도저히 불가능하다.

### [v] 다른 언어는 어떻게?
* 부스트 파이선의 경우 virtual 메소드를 지정했으면 개발자가 wraper 클래스를 만들것을 강제한다.
	* 이것보단 낫지.





## pointer를 wrapping 하는 방법은?

* sharable은 그냥 보통이 pointer다.
* occupiable은 pointer를 둔게 해줄 수 없다. 이런경우 별도의 wrapping 하는 C 함수를 따로 만들어서 처리행 ㅑ한다.
```cpp
TNativeWrapper<wrapper_c>();

class myStuct : public obj {
	NAMU_CLASS(myStruct, obj, FUNC(set))
	public void set(int new1) { _val = new1; }
	int _val;
}
//void wrapper_c(int* to_inc) {

//1:
void wrapper_c(myStruct& to_inc) {
	to_inc.set(1+to_inc.get());
}
arg := myStruct()
wrapper_c(arg)


//2:  나중에 우린 1번을 위한 Box<Int> 이런걸 만들어줄 수있을 것이다.
void wrapper_c(IntBox& to_inc) {
	to_inc++;
}
arg := IntBox()
wrapper_c(arg)

//3: 배열
void wrapper_c(Array<Int>& to_inc) {
	to_inc[0]++;
}

arg := [5]
wrapper_c(arg)
```



































# [..] annotation
* 프로그램 실행에는 영향을 주지 않는다.
* 객체에 대한 metadata 이다.
* 메타 프로그래밍이 아니다. 이는 프로그램 읽는 걸 어렵게 한다고 본다.

## [v] Q1. 어떻게 annotation을 구현할까?
* 요구사항
	* 상속이 되면 안된다.
	* 값을 바꿀 수 없어야 한다.
* 다른 언어들은 ?
	* ts, python 들은 decorator라고 해서 메타프로그래밍이 포함된 annotation.
	* c#, java는 단순 annotation
	* c, go는 없음.
## [x] 1안 member의 일종으로 생각한다.
* 상속이 되면 안되기 때문에 단순한 기존 문법대로 member로 하면 안된다.
* 이 경우, 상속이 안되게 하는 문법이나 방식을 추가해야 한다.

## [x] 2안 초기화 식은 덮어쓰기가 가능하다면?
```java
def Parent
	void foo(): ...
	age = 55

def Child = Parent()
	void foo(): ...
	age = 200; // 이 부분
```
### [x] Q1. Child.age는 과연 어떻게 받아들여야 하는가?
#### [x] 1안 허용하지 않는다

#### [x] 2안 덮어쓰기로 허용한다. 단, 객체는 중복되지 않는다. 객체의 overriding.

* 단, 다음의 조건을 갖는다.
	1. 타입은 같아야 한다.
	2. 부모가 const 였다면 자식은 새로 할당할 수 없다.
	3. 부모가 private 이라면 자식은 역시 새로 할당할 수 없다.

#### [x] 3안 객체가 중복으로 존재한다. 그리고 child.age가 우선된다. 객체의 overriding.
```java
Child a()
a.age
a.Parent.age
```
## [v] 3안 annotation은 static으로 선언된 것이다.
```java
@Child @Worker @NoOverride
def My
	...

class object {
private:
	sharedMembers.add(Tup("annotation",
		{"Child", "Worker", "NoOverride"}
	));
};
```

* Object.clone()시 sharedMembers는 shallow cpy, 기타 members를 deepcpy 된다.
* 파서는 annotations을 항상 sharedMembers로 넣는다.
	* annotations를 명시하지 않을 경우, Method는 default로 빈 배열을 반환한다.
* static은 원래 상속되지 않으며, 자식 클래스에서 부모클래스와 같은 이름의 변수를 만드는 것이 가능하다.

## [x] Q2. C-REPL 방법은?
* C-REPL에서 수정이 발생하면 그 이외에도 빌드를 전파해야 한다.
	* 메소드 내라면 메소드까지만.
	* 메소드 명세라면, 접근자를 구분한 뒤, 그 명세를 사용하는 모든 것을.
	* 이 과정에서 중복 빌드가 되지 않도록 mark도 필요c하며, 실행할때는 이 정보들은 필요가 없다.
* 어렵다.

## 결론
* Annotation이란 프로그램 로직에 영향을 주지 않는 것으로 한다.
* 컴파일러와 무관계한 것으로 한다.
* 추가적인 정보일 뿐이다.
* 이는 대부분 document 작성을 위해서 사용될 것이다.

## [..] Q3. annotation 의 상세한 구현 방법은?
* 파서가 static const 멤버인, 모든 Object가 가지고 있는 annotations 객체의 구성물을, 파서가  객체에 채워넣는 식으로 하자. (메소드 포함)
* 상세한 내용은 나중에 다시.




# 컴파일러

## 독특한 빌드 과정

- Text --파싱-->구문트리 --Generating--> 코드블럭 후보 --linking&validating --> 코드블럭(중간결과물)
- 코드블럭 --Optimization(최적화, 난독화)--> 실행가능 이진코드 ----로드---> 코드블럭
- 핵심은 IDE와 빌더가 코드블럭을 놓고 서로 공유한다는 점이다.  이부분이 World 가장 큰 차이점이며 이 부분을 통해서 시각적인 효과가 가능하게 되는 점이다.



## Validation의 기본 :  #Vistored_Validation_알고리즘

- 초안
  - compile()과정이 끝나면 Class목록을 들고있을 것이고, 이들을 루트클래스라고 한다.
  - 클래스 혹은 메소드(메소드도 클래스다)안에 클래스가 있는 것들을 nested class라고 하며 이것들도 owner클래스의 함수나, 변수처럼 member로써 할당이 되어있다. 그래서 이 클래스 안에서만 접근이 가능하도록 되어있다.
    - class A
      - class B
    - 자연스럽게, 월드문법은 위의 경우, A.B b 로 접근해야 한다.
  - 검증은 중앙집중적 visitor 형태다. 그 이유는 2가지가 있는데,
    - \1. Validator라는 외부모듈안에 검증을 위한 모든 코드가 들어있는데, 이는 실행only만 되는 kernel만 있는 경우에서는 validate코드가 필요 없기 때문이다.
    - \2. 어찌됐건 범용 Visitor 는 반드시 필요한 상황이다. 따라서 Vistor로 validation을 구현하면 상당히 재사용적인 측면에서 이득을 볼 수 있다.
  - validate는 고유의 알고리즘으로 statement, class, method를 vistor패턴으로 탐색하면서 자신이 주도적으로 검증한다.
  - C-REPL이 적용되지 않은 지금, 검증은 통째로 루트클래스 목록채로 이루어진다. 알고리즘은 이렇다.
  - \1. 루트클래스를 순회하면서 검증한다.
    - \2. 클래스의 검증이 먼저 이루어진다.
    - \3. 클래스는 자신의 멤버들을 검증한다.
      - **클래스를 scope에 reg 한다.**
      - \4. 멤버가 클래스일 경우는 2로 재귀된다.
      - \5. 멤버가 객체일 경우에는 Object 자체만 검증해야하지 Object가 가리키는 클래스는 검증하지 않는다.
      - \6. 멤버가 메소드일 경우에는 이를 검증한다.
        - 메소드를 scope에 reg한다.(member변수, method, 인자, 반환형, thisptr등이, ObjectSpace에 들어간다)
        - \7. member들을 검증한다. (메소드의 member는 메소드, 멤버변수, 인자, 반환형이 있다) 단, statement는 member가 아니므로 검증하지 않고, method(== closure)는 실행 시점이 중요하기 때문에 검증하지 않는다. closure는 owner의 지역변수를 공유하기 때문에 모든 실행시점에서 검증이 들어가야 한다.
        - \8. Statement들을 검증한다.
          - \9. 각 Statement는 symbol접근이 가능한지 scope를 놓고 검증한다.
            - 이때 심볼을 일치하는지 여부를 가리는 알고리즘은 --> 묵시적 형변환으로 통한 함수 바인딩 알고리즘 참고.
          - \10. statement가 만약 지역변수를 정의하는 statement라면 scope에 이 지역변수를 추가한다.
          - \11. statement가 closure를 호출하고 있다면 항상 6으로 재귀한다.
        - 메소드를 scope.unreg한다.
      - 클래스는 scope.unreg 한다.
  - 고찰내용
    - 이 문제는 컴파일 과정에서 "이 요청은 이 심볼에 접근하려고 하는데, 과연 접근 할 수 있는가 없는가"를 런타임 돌지 않고 사전에 탐지하는 것을 말한다. 이 과정은 validate에서 수행되어야 한다.
    - 심볼접근은 scope를 통해서 이루어지므로 compile시점에서는 scope가 실제로 이걸 들고있는지는 몰라도 된다.
    - 어떤식으로 scope와 method, statement, 심볼접근을 연동시키면 될까?
    - x 1안 - validate라는 것은 사실상 런타임을 미리 강제로 trigger 시키는 것이 아닌가?
      - 아니다. 실제 무슨 값이 나오는지 계산을 하는것이 아니다 호출 가능성이 있는가. 즉, 100% 성공하는가 여부만 검증하는데 있다. 이것은 주로, 이 객체가 이심볼을 가지고 있는가 아닌가만 따지게 된다.
    - 2안 - 케이스바이케이스로 나누어 생각해보자. 그러면 해결책이 보일 것이다.
      - 메소드를 호출 하는 경우 : 이 경우는 반드시 Class값이 존재한다. 따라서 쉽다.
      - 지역변수를 호출했던 경우.
    - v 3안 - validation()에서 execution처럼 scope를 구축해가면서 DFS로 검증해간다.
      - compile()과정이 끝나면 Class목록을 들고있을 것이고, 이들을 루트클래스라고 한다.
      - 클래스 혹은 메소드(메소드도 클래스다)안에 클래스가 있는 것들을 nested class라고 하며 이것들도 owner클래스의 함수나, 변수처럼 member로써 할당이 되어있다. 그래서 이 클래스 안에서만 접근이 가능하도록 되어있다.
        - class A
          - class B
        - 자연스럽게, 월드문법은 위의 경우, A.B b 로 접근해야 한다.
      - 검증은 중앙집중적 visitor 형태다. Validator라는 외부모듈안에 검증을 위한 모든 코드가 들어있는데, 이는 실행only만 되는 kernel만 있는 경우에서는 validate코드가 필요 없기 때문이다. validate는 고유의 알고리즘으로 statement, class, method를 vistor패턴으로 탐색하면서 자신이 주도적으로 검증한다.
      - C-REPL이 적용되지 않은 지금, 검증은 통째로 루트클래스 목록채로 이루어진다. 알고리즘은 이렇다.
      - \1. 루트클래스를 순회하면서 검증한다.
        - \2. 클래스의 검증이 먼저 이루어진다.
        - \3. 클래스는 자신의 멤버들을 검증한다.
          - **클래스를 scope에 reg 한다.**
          - \4. 멤버가 클래스일 경우는 2로 재귀된다.
          - \5. 멤버가 객체일 경우에는 Object 자체만 검증해야하지 Object가 가리키는 클래스는 검증하지 않는다.
          - \6. 멤버가 메소드일 경우에는 이를 검증한다.
            - 메소드를 scope에 reg한다.(member변수, method, 인자, 반환형, thisptr등이, ObjectSpace에 들어간다)
            - \7. member들을 검증한다. (메소드의 member는 메소드, 멤버변수, 인자, 반환형이 있다) 단, statement는 member가 아니므로 검증하지 않고, method(== closure)는 실행 시점이 중요하기 때문에 검증하지 않는다. closure는 owner의 지역변수를 공유하기 때문에 모든 실행시점에서 검증이 들어가야 한다.
            - \8. Statement들을 검증한다.
              - \9. 각 Statement는 symbol접근이 가능한지 scope를 놓고 검증한다.
                - 심볼 접근 체크는
              - \10. statement가 만약 지역변수를 정의하는 statement라면 scope에 이 지역변수를 추가한다.
              - \11. statement가 closure를 호출하고 있다면 항상 6으로 재귀한다.
- v 개선안
  - 요구사항
    - [추가] 1. validation은 scope에 의해서 이루어지므로 classmanager에서 수행되어야만 의미가 있다.
    - \2. validation 로직은 실행만하는 경우에는 필요가 없다.
    - [추가] 3. 각 class의 validate는 2가지 시나리오가 있는데, 그중 1가지는 call(msg)에서 execute를 안하는 것과 매우 흡사하다.
      - scope를 구성해야하며, 이 msg를 받을 놈이 누구인지 특정해야 하며, 그 놈에게 msg를 전달해서 재귀적으로 validation이 되도록 해야 한다.
      - ManagedMethod::Execute()는 실행되어야 하나, NativeMethod::execute()는 실행되지 않아야 한다.
    - \4. 또다른 validate는 자기의 멤버변수들을 모두 재귀적으로 validate() 하는 것이다.
  - 요구사항달성방향



## ValidCheck 문제

- 빌드 프로세스를 먼저 정의해야 이문제를 잘 해결 할 수 있다.
  - World코딩 --인터프리팅--> 코드블럭 --Validation--> 실행가능상태 --컴파일--> 최적화된 텍스트
  - 인터프리팅이 실패할 경우, 이는 인터프리트에러라고 하며, Parser가 주어진 텍스트 어느 위치에서 실패했다는 걸 명시해서 출력한다.
  - Validation에서 에러가 검출 된 경우, 논리에러라고 한다. 런타임 에러가 아니기 때문에 값이 NULL이여서 에러다, 이런걸 확인하는게 아니다. 어느 상황이건 간에, 항상 말이 안되는 걸 검출해 내야한다. 예를들면 [String.to](http://string.to/)<MyClass>() 이런걸 시도하는 경우 논리에러가 된다.
- 정리하자.
- 코드블럭이 생성조차 안된다 => 인터프리트 에러. 파서가 "몇번째줄에 오류 생성" 고지
- 이 코드블럭은 항상 100% 실패한다 혹은 금지된 행동을 한다 => 논리에러.
  - 에러를 고지하는 걸 TXT 창에서 하도록 할 수 있는가? 편집하는 곳은 TXT이기 때문에 여기서도 에러가 표시되어야 한다. 이렇게 되려면, 이 코드블럭은 무슨 라인과 매핑된다는 정보가 있어야 할 것 같은데?
    - 그게 바로 RawStatement다.
    - RawFile {
      - Array<RawStatmenet>
    - }
    - RawStatement {
      - String textcode;
      - List<Bind<Thing>> generated_by_me;
      - int getLineNumber() const;
    - }
    - Class {
      - List<Bind<Object>> generated_by_me;
    - }
    - RawFile이 사라지면 RawSTatement가 사라진다. RawStatement가 사라지면 generated_by_me가 사라진다. Thing는 Class가 될 수도 있고, statement가 될 수 도 있다. class가 사라지면 모든 Object가 사라진다.
    - 1안 - 파서가 논리에러를 탐지한다.
      - Parser가 에러체크의 주체인 경우는 에러여부와 함께 어느 라인에서 에러가 발생했다는 것도 알 수 있다.
    - v 2안 - 각 객체가 Thing::validate()로 탐지한다.
      - 이 경우 객체에서 에러를 여러개 리턴할 수 있어야 한다.
      - 1안 -  각 리턴을 통해서 #line #col 을 알아낼 수 있어야 한다.
      - 2안 - 객체가 리턴하면 파서는 객체와 <--> #line, #col 을 매핑시켜서 에러를 보고한다.
    - 다른 관점에서 바라보자. C++ 은 어떻게 할까?
      - C++은 1pass compile이다. linking이 따로 있기 때문에 2pass가되서 이런 문제를 해결한다.
- 이 코드블럭을 돌려봤을때 어떨때는 실패하기도 한다. => 런타임에러



## 컴파일러가 순환 참조 에러 회피를 위한 컴파일 알고리즘

- 문제정의
  - // A.namu
  - class A
    - B b
    - B foo(B b, int)
      - return b
  - // B.namu
  - class B
    - A a
    - A foo(A a, int)
      - return a
  - 일때 각 class의 멤버는 상대방 클래스를 참조하는 상황이므로 C++에서는 빼도박도 못하게 include 순환재귀 에러가 발생하게 된다. 어떻게 해결할까?
- *[x] 1안 - 컴파일태스크 큐 알고리즘*
  - 1패스: Tokenize
  - 2패스: 짜른 토큰들을 구문분석을 통해서 어떠한 요소(클래스명인지, 메소드명인지, 반환형인지)인지 식별해냄
  - 3패스: 파싱한 요소들을 가지고 바로 Class, Method 인스턴스를 생성해서 넣어버림. (중첩)메소드의 Stmt들은 ADT를 만들어서 나중작업으로 queue에 담아둠.
    - 각 ADT들은 자신들이 컴파일이 완료되면 어느 Node 밑에 들어가야 하는지 기억해두고 있어야 함.
    - 만약 메소드 헤더에 모르는 타입이(혹은 아직 파싱하지 않은) 존재하는 경우, 본래 메소드 인스턴스가 들어가야 자리에 DummyNode를 넣어둔다. 그리고 이 ADT를 3패스용 queue에 넣어두고, 모든 파싱을 수행 한다.
    - 파싱이 끝나면 3패스용 queue에 담겨둔 것들을, 각각 update()를 시키고 update()함수가 되면 아까 미뤄두었던 Method인스턴스를 생성해서 this인 DummyNode가 있는곳에 대체시킨다.
    - 이 과정을 각 queue의 원소들이 더이상 어떤것도 update()를 시도해도 변화가 없을때까지 무한 반복을 돈다. 루프가 끝났을때 원소가 queue에 잔류하고 있다면 그것들은 모두 알수없는 식별자를 사용한 것이다.
  - 4패스: 이 시점이면 모든 선언(=헤더)들은 존재가 확실시 된 상태. 그러므로 queue를 하나씩 꺼내면서 편하게 ADT를 분석해서 expr를 만들고 다니면 됨.
- [v] 2안 - ADT 작성후, BFS
  - 1패스 : tokenize
  - 2패스 : 구문분석을 해서 요소를 식별하고 ADT를 통째로 만든다.
    - 만들어진 ADT는 맨 앞에 class들이 나오고 class 들 안에 method들이 나오고 그 안에 epxress이나 중첩 메소드들이 나오는 구조일 것이다.
  - 3패스 : 만들어진 ADT를 BFS로 탐색하면서 실제 Method, Class 인스턴스를 생성해간다.
    - 이렇게 하면 일단, 껍데기만 있는 Class들이 생겨나고, -> 그 안에 껍데기 메소드들이 생겨나게된다.
      - 위의 예제를 들면 B A.foo(int) 메소드의 인스턴스를 생성하는 경우, B라는 클래스는 비록 껍데기지만 생성은 되어있는 상태이기 때문에 식별자를 분명히 참조할 수 있게 된다.
    - 루프를 돌 필요가 없다.
  - 4패스 : expr들을 돌면서 평가한다.



## World 반환형으로 Reference를 하는 모듈을 만든 경우, 컴파일에러가 잡아 낼 수 없다?

- 잡아낼 수 있다. 다음 2가지를 조합하면 된다.
- \1. static_assert가 그걸 한다.  이건 #ifdef 와 #error를 조합해서 구현/한것이다.
- \2. 컴파일타임에 "A는 B를 상속받았다"를 메타프로그래밍과 upcasting을 이용하면 간단히 짤 수 있다.
- 고찰 내용
  - Reference는 WorldFRWK에서는 유효하지만 World코드에서는 invisible이다. World는 포인터를 전면에 내세우지 않으므로.
  - 하지만 모듈개발자가 반환형을 Reference로 한 경우, 매크로 expanding시 컴파일 에러는 발생되지 않기때문에 즉각적인 피드백을 받기가 좀 어렵다.
  - 이런 경우, 반환형코드는 members[0].push(Reference(TClass<Bind>())가 되니까 컴파일에러는 발생하지 않는다. 해결방법은?
    - x 1안 파서를 통해서 논리적에러로 내보내게 한다.
    - v 2안 C++ 최신 표준에 컴파일에러를 체크해서 내보내는 기능이 있는가?
      - static_assert가 그걸 한다.  이건 #ifdef 와 #error를 조합해서 구현한것이다.
      - 컴파일타임에 "A는 B를 상속받았다"를 메타프로그래밍과 upcasting을 이용하면 간단히 짤 수 있다.





## C-REPL

### C-REPL은 Incremental Interpreting이라는 컨셉으로 변경한다.

- **C-REPL은 Incremental Interpreting으로 이름이 대체되며 목표는 코드 수정즉시 즉각적인 피드백(에러 noti)이다.**
- **정적바인딩과 정적타입과 강한타입(에러탐지를 위한) + 동적디스패치(다형성) + 인터프리터기반과 Incremental Interpreting(즉각적인 피드백을 위한) 이 최종 조합이된다. 인터프리터이면서 컴파일을 흉내내듯이 validation과 바인딩을 사전에 할 것이다.**
- **최종적으로 코드를 실행하면 다른 IDE와 마찬가지로 별도의 프로세스에서 작성된 프로그램이 실행되어야 한다.**
- 고찰내용
  - 파이썬과 world의 차이가 무엇일까 파이썬에다가 validation 기능 하는 플러그인을 하나 만들어서 코드 수정시마다 돌리게 하면 World처럼 코드의 검증이 바로바로 되게 할 수 있는거 아닌가
    - --> 아니다. 언어적 밑바침이 있어야 한다. 파이썬은 동적타이핑이 지원된다. 런타임의 함수의 추가와 삭제가 되는 것이다. 따라서 로직을 따라가지 않고서는 이 함수의 이 라인에서 과연 이 함수가 있을지 없을지는 보장할 수 없게 된다.
    - validation을 지원하기 위해서는 강한타입과 정적타입을 택해야만 한다.
  - 하지만 C-REPL이 되게 위해서는 컴파일 시간이 있어서는 안된다. 이는 정적바인딩을 할 수 없다는 것이다.
  - 정적바인딩을 해버리면 나중에 코드 1줄을 수정했을때, 그 코드를 사용하는, 영향을 받는 모든 부분들을 역추적해서, 그 부분들을 다시 링킹(=바인딩) 과 검증을 실시해야 한다. 매 코드 수정마다 말이다. 퍼포먼스 적으로 너무 안좋다.
  - 따라서 동적바인딩으로, 어떤 함수를 호출할것인가 같은 문제는 런타임에 결정해야 한다.
  - 반면 정적타입으로 런타임에 함수의 추가/클래스의 구성의 수정 같은 건 지원하면 안된다.
  - 그리고 강한타입으로 함부로 묵시적 형변환되지 않게 하여 명시적으로 사용자가 타입을 지정하게 함으로써 최대한 실수를 미리 걸러내게 해야 한다.
  - 동적바인딩(빠른 피드백을 위한) + 정적타입(에러발견을 위한) + 동적디스패치(다형성을 위한) + 강한타입(에러 발견을 위한) ... 이 최종선택이 된다.
  - 조금 변태적이라고볼 수도 있을 것 같다. 이에 따른 컨셉을 잘 정의하고, 문서화를 해서 다시는 이런 문제로 시간을 뺏기지 않도록 하자.
  - 이러한 방법은 안된다.
    - 왜냐하면 동적바인딩이라는 것은 결국, 바인딩 여부를 실제로 코드를 execute하기 전까지는 확정할 수 없다는 것이다. 이는 에러를 탐지할 수 없다는 것과 같다. 따라서의 위의 조합으로는 일부 바인딩(로컬변수 참조나, 클래스명이나..)에 대해서만 에러를 탐지할 수 있지, 함수와 그 함수에 들어가는 인자가 인자추론에 의한 오버로딩도 고려했을때 올바른가 아닌가와 같은 부분을 전혀 커버하지 못한다. 그래서 저 조합은 안된다.
    - 그리고, C++ 소스를 save 할때마다 자동으로 컴파일해서 결과를 display하는 것은 지금도 되고 있다. 즉, 이 기능을 차별화를 두려면 정말 코드를 작성하자마자 바로 피드백이 되어야만 의미가 있다.
    - 그리고 이것은 REPL이 아니다. 왜냐하면 코드를 Eval 즉 RUN이 아니기 때문이다. 인터프리팅을 위한 준비를 하는 것이므로 validation 및 컴파일에 가깝다.
    - 따라서 C-REPL 대신 Incremental Interpreting이라고 이름을 붙였다. 이것은 종래의 코드 작성 후 피드백을 받는 간격을 극한으로 줄이는 것을 타겟으로 한다. 그래서 코드를 작성하자마자 에러 여부를 피드백 받도록 하는 것이 목표다.
      - 상당히 달성하기 어려운 요구사항이 될것이다.
      - 그리고 잠깐 생각해봤는데, 이걸 달성하려면 diff를 계산해서 부분적으로 binding & validation을 해야 한다. 당연히. 따라서 수정사항이 존재하면, 그 수정사항이 영향을 미친 부분들을 역추적하여 바인딩 & validation을 수행하는 것이 옳을 것이다.
  - 결국에는 IDE와 별도의 프로세스로 코드가 실행되어야 한다.
    - 동일 프로세스의 스레드만 다르게 해서 실행하는 것은 결국 한계가 있다. IPC로 편집후 테스트, 증분해석(incremental interpreting)과 같은 것들을 구현해야만 한다.



## 인터프리팅시 Symbol 참조 에러시, report 알고리즘

- 문제정의 : 파싱을 할때, 주어진 심볼이 참조가능한지 아닌지 논리에러를 탐지하기 위한 과정을 말한다. 이는 문제가 생긴 World코드에 대해서 "검증"하는 로직과 "이 코드에 에러가 발생되었다"를 알리는 로직이 어떻게 연계해야하는지를 정의하는 것에 있다.
- 파서는 텍스트를 파싱하면서 코드블럭을 생성하면서 코드블럭(Statement, Calling, Method, Class, Object, ...)가 어떤 파일의 어떤 line, col에서 생성되었는지를 파서가 기록한다. 해당 정보는 Member로써 추가된다. member는 잘 알다시피 런타임에 데이터가 추가되는 것이다.
- 왜 이런형태를 취하냐면, 이 정보는 실행시에는 필요없는 정보이기 때문이다. 이 정보는 IDE에서 인터프리터와 연동하기 위한, 즉 편집을 위한 추가 정보다. 이러한 추가정보는 일단 빌드가 되고 바이너리가 나오고 나면 전혀 필요가 없다. (그리고 그것이 코드 난독화에도 도움을 준다)
- IDE는 코드블럭을 인터프리터와 공유하므로 사용자가 선택한 코드블럭이 어느 파일의 어느 line, col에서 나온것인지 바로 알 수있게 된다.
- 반대의 케이스는 어떻게 되는지 궁금할 것이다. 사용자가 텍스트에서 선택한 것이 코드블럭으로 참조될 수있는 방법에 대해서 말이다. 이것은 IDE에서 지원을 해줘야 할것이다. 근본적인 방법은 Context REPL로 해결해야 하나, 이 알고리즘은 만들기가 힘드므로 당장 지원이 어렵다. 자세한 내용은 해당 항목 참조.





## 클래스_Generating과_상속문제

- 클래스 생성과 함수 생성은 Generation단계에서 수행된다. 상속은 이후 Linking단계에서 수행되는데, 이를 클래스 스태킹업 알고리즘이라 한다.

  - class Class {
    - virtual initialize()
      - Parent& parent = getParent()
      - if(parent.isExist() && parent.isInitialized())
        - if(!getParent().isInitialized())
          - return ERROR
      - Members& members = getMembers()
      - TStrong<Members>& cloned = members.clone()
      - members = getParent().getMembers();
      - for(Node& m in *cloned)
        - windex idx = members.find([&m](Node& e) {
          - **// m가 함수이면 signature가 동일해야 하며,**
          - **// m가 값이라면 변수명 + 값이 동일하면 된다.**
          - return m == e; // if m == e then this returns true and find will return its index.
        - })
        -
  - }
  - void initClasses()
    - Class classes[] = ....;
    - bool has_differ = false;
    - while(has_differ)
      - for(Class& cls in classes)
        - if( ! cls.initiailze()) // 0 means success
          - has_differ = true // 누군가는 정상적으로 로드한적이 있다. 종속성에 변화가 있을수 있다.
    - for(Class& cls in classes)
      - if( ! cls.isInitialized())
        - "에러에러! " + cls + "가 초기화 안됐어!"
    - return success or fail.

- 복잡도는 O(N^2)로 다소 느리다. 나중에 개선은 필요할 것이다.

- 고찰 내용

  - 동적 디스패치를 달성하기 위한 알고리즘은 이렇다.

    - \1. 부모클래스가 명시되어 있다면 일단 부모클래스의 모든 member를 복제해서 이 클래스를 만든다.
    - \2. 새로 파싱된 자식클래스의 메소드 signature가 부모클랫의 것과 완전히 동일할 경우, 이 메소드는 append가 아니라 overwrite로써 기존의 것인 부모의 것을 덮어쓴다.

  - 여기서 문제가 되는 것은 자식클래스를 파싱하기전에 부모클래스를 파싱해야 한다는 점이다. 어떻게 달성하는가?

  - x 1안 어짜피 개발자는 상속을 하려면 자식클래를 import 해야만 한다. 이 import 키워드는 주어진 패키지들을 파싱함과 동시에 scope에 넣어두는 역할을 수행하도록 한다.

    - 그러면 C++ 의 include와 다를게 없다. 이는 순환include 문제를 야기한다. java의 import처럼 가야한다.
    - import로 작성하면, 이 클래스들을 먼저 로드해서 scope에 넣어두자고 하면 된다고 생각했으나, 실제로는 이러면 안된다. 왜냐하면,
      - \1. 이방식은 c++의 include 방식이다. 즉, 순환참조를 해결 할 수 없다.
        - import B
        - class A
          - B b;
        - \-----
        - import A
        - class B
          - A a;
      - \2. 클래스의 메소드목록이 확정되는 건 1단계인 generating이다. 이 시점에서는 각 파일을 순차적으로 읽어들이는 데다가, import 자체에는 어떠한 파일인지 명시되어있지 않으므로 "클래스를 먼저 로드한다"는 동작을 취할 수 없다.

  - v 2안 클래스 스태킹업 알고리즘

    빌드 단계를 하나 더 둬서, 1단계는 심볼인식을, 2단계는 심볼바인딩만 수행한다. 각 클래스를 로딩한 후, linking 단계에서 클래스 종속성을 위로 밀어올린다.

    - 클래스를 상속한다는 것은 클래스와 다른 클래스를 묶는 것으로 바인딩, 즉 링킹에 해당한다. 그러므로 상속처리도 링킹단계에서 하는게 맞다는 의견이다.
    - generation에서는 각 클래스를 그냥 생성한다. 다형성을 사용하든 오버로딩하든 메소드정보가 그대로 클래스에 들어가도록 한다.
    - 그리고 linking단계에 들어가면 클래스에 기록된 부모클래스정보(예, string)를 토대로 하여 종속관계를 맺어주기 시작하는데,
    - 여기서 중요한점은 메소드의 순서가 일정해야 한다는 것이다. 부모클래스의 addInfo()가 2번 이라면 자식클래스에서도 addInfo가 있어야 하며, 인덱스가 2번이 되어야 한다. 하지만 이 시점에서의 자식클래스의 2번 메소드는 전혀다른 메소드일 것이다.
    - 순서
      - class Class {
        - virtual initialize()
          - Parent& parent = getParent()
          - if(parent.isExist() && parent.isInitialized())
            - if(!getParent().isInitialized())
              - return ERROR
          - Members& members = getMembers()
          - TStrong<Members>& cloned = members.clone()
          - members = getParent().getMembers();
          - for(Node& m in *cloned)
            - windex idx = members.find([&m](Node& e) {
              - **// m가 함수이면 signature가 동일해야 하며,**
              - **// m가 값이라면 변수명 + 값이 동일하면 된다.**

## 동적디스패치시, 반환값은 고정되어야만 한다. 그렇지 않고는 컴파일에러를 탐지할 방법이 없다.

- 그렇다. 따라서 generating으로 method 객체를 생성하기전에 완전히 메소드signature가 동일하면 overwrite를 하도록 해야 한다.
- 고찰내용
  - 동적바인딩만 지원하게 되면 컴파일타임에 에러를 탐지해 낼 수 없다. 정적바인딩으로 해야 하는데 그러면 오버라이딩에서 반환값을 고정해야만 한다.
    - 만약 정적바인딩이라고 말하면서 오버라이딩에서 반환값을 신경쓰지 않는다면 어떻게 되는가?
      - class A
        - virtual int foo()
      - class B : A
        - virtual string foo()
      - A a = ....
      - float c = a.foo() 반환값이 무엇인지 알수 없다. 컴파일러는 이게 에러인지 알 수 없다. 일단 돌려보지 않고는 모를것이다.
  - 현재 월드 설계에서는 이러한 특성이 고려되지 않았다. 모든건 다 scope에 들어가 있기 때문에 A::foo()도, B::foo()다 같은 scope에 있다.
  - 따라서 generating시 반환값여부까지 따져서 완전히 메소드가 동일하면 overwrite를 함으로써 동적디스패치를 달성해야한다.



## 연산자 우선순위, 묵시적 형변환, 동적패치 종합판

- 헷갈리지 말라는 의미에서 종합적으로 프로세스를 정리한다.
- 먼저 빌드의 단계는 이렇다.
  - 1단계 : 코드 --> **Generating 단계** --> 코드블럭후보
    - 파서가 끊어주면 이 정보를 코드블럭후보로 생성한다. 이 과정에서 함수목록을 확정이 되지만, 함수 안에 statement들은 불완전한 상태가 된다. 즉 이게 식별자를 접근하기 위한 코드인지 함수를 호출하기 위함인지는 파악이 되지만 그 식별자가 무엇인지까지는 모른다. CandidateStatement 라는 걸로 생성된다.
    - 클래스 정보가 생성되고, 안에 메소드들을 채우기 시작한다. 부모클래스가 "있다" 라는 건 알지만 실제로 부모클래스의 메소드를 이어받는 "linking"은 일어나지 않는다. 그 과정은 오버라이딩에 의한 메소드 재배치 등이 일어나야 하기 때문에 여기서 묶을 순 없다.
    - 클래스 생성 알고리즘은 #어떻게_부모클래스를_먼저_읽도록_할_수_있을까 를 참조하자.
    - 생성에 실패하면 생성오류가 나가며, 다음 라인을 읽어들인다.
    - 파서가 알아서 연산자 우선순위 맞게 끊어서 우리에게 알려줄것이다.
  - 2단계 : 코드블럭후보 --> **Linking & Validation 단계 -->** 코드블럭 확정
    - 지금까지 생성된 코드블럭후보는 자기자신은 완전하지만 외부와의 관계성이 누락된 상태이다. 이부분을 채워나가는 게 이 Linking단계이며, Linking단계가 완성되면 완전한 코드블럭이 만들어진다. 따라서 루프를 2번 돌 필요없이 각 개체별로 Linking단계가 끝나면 바로 이어서 Validation을 돌리도록 구성했다.
    - Linking을 채워야하는 건 크게 2종류로,
      - \1. 클래스의 상속처리 --> #어떻게_부모클래스를_먼저_읽도록_할_수_있을까  참조
        - 코드내에서 상속을 선언한 클래스는 코드블럭화 되면서 부모클래스의 member를 다 assign 시켜놓은 상태에서 파싱이 시작된다.
        - 클래스의 함수를 파싱하면서 이미 상속받은 함수중에서 반환형, 인자리스트, 함수명이 정확히 일치하는 함수가 있다면 그 함수를 제거하고 그 함수가 있던 자리에 이제부터 구현될 statement들을 넣는다.
          지금 이 동작이 오버라이딩을 구현하고 있는 것이다.
      - \2. Statement들의 심볼 바인딩 --> Scope 기반 알고리즘으로 처리한다.
        - 각 statement들이 실제로 어떠한 함수들과 바인딩되어야 하는지를 결정한다.
        - 이때 묵시적형변환까지 고려되어 변환가능한 함수가 2개 이상인지 고려한다. 2개 이상이라면 모호성오류가 나온다. 함수가 결정되면 콜해야 하는 함수로 코드블럭을 고쳐쓴다. 오버로딩이 여기서 결정된다.
        - 이때 각 statement는
          - caller = Object
          - msg
            - name = "foo" --> 정확히 누가 이 메시지를 받을 것인지가 정해져있는 상태다. 오버로딩을 따질 필요가 없다.
            - args = {argument list}
        - 로 구성되어 있게 된다.
  - 3단계 -> validation을 돌린다. --> #Vistored_Validation_알고리즘. 인터프리터과정이 끝난다.
    - 중앙집중적 visitor 패턴으로 구현된다.
  - 4단계 -> 런타임.
    -  함수를 실행하게 되면 caller.call(msg)로 보내게 된다.
    - 정확히 누가 이메시지를 받아야하는지 안에서 따질 필요가 있다. 이는 동적디스패치를 위한 것이다.
    - 단, 오버로딩의 체크 여부는 이미 끝나있다. 이게 끝나지 않았다면 모호성이든 중복이든 에러가 나야 한다. 고로 무언가의 힌트를 줘서 Linking 이후에 오버로딩된 함수들을 다 재끼고 정확하게 특정 함수로 빠르게 전달되는 방법을 생각해야 한다 --> #함수_바인딩_퍼포먼스_알고리즘_최적화
    - Object는 생성시에 메타Class의 함수들을 전부 안고서 시작하게 된다. 따라서 object가 가리키는 메타Class로 다시 던질 필요없이 걍 Object가 지지고볶고 다하면 된다. (Chain으로 되어있기 때문에 그러면서도 메모리의 loss는 없다)
    - Object에 이 Method가 무슨 Method인가에 따라서 동적디스패치가 이루어진다.



## 재빌드 후, 인스턴스 데이터 변경 동기화 하는 방법

- IDE에서 그려지는 그래픽요소(임시로 글리프라하자)는 코드블럭과 별개의 인스턴이나 매우 관련이 많다. 코드블럭이 생성되면 IDE는 RawStatment의 member로 RawStatement에 의해서 생성된 코드블럭과 매핑되는 글리프들을 Bind한 것들을 넣어둔다. 이후 RawStatement가 삭제되면 관련된 글리프들도 같이 삭제 시킨다.
- 고찰내용
  - IDE 상에서 그려지는 그래픽 요소(이후 글리프라고 하자)는 코드블럭과는 다른 인스턴스다. 물론 이 둘은 매우 관련이 많을 것이다. 코드블럭은 파서에서 생성되며 IDE는 값을 readonly 상태이므로 이것을 글리프는 bind<>하고 있을 것이다.
  - C-REPL이건 풀빌드 방식이건간에 코드블럭이 제거된 경우, 새로 생성된 경우, 수정된 경우 3가지 케이스에 대해서 글리프를 어떻게 update할 것인지를 정해야 한다. 생성시와 소멸은 쉬울 것이다.
    - 생성된 코드블럭의 owner를 파악하여, 그것과 매칭되는 글리프 밑에 새로 글리프를 생성하면 된다.
    - 소멸은 단순히 지워버리면 되는 것이고.
  - 문제는 업데이트다. 간단한 질문으로부터 출발하자.
  - 텍스트가 약간 수정되었다고 하자. 코드블럭은 수정되는가, 아니면 새로 만들어져서 덮어씌워지는가?
    - 덮어씌워져야한다.  수정이라는 것은 없다. 삭제와 생성만 있을 뿐이다.
      - 1: abc.hello()
      - 2: def.add(abc.getAge() + ddd.grade)
      - 가,
      - 1: hello(abc, ddd)
      - 2: void hello(Abc a, Ddd d)
        - 3: print(a.getAge() + ddd.grade())
      - 이것처럼, 2번라인이 완전히 바뀌었다.
    - C-REPL을 한다고 하자. 사용자가 코드를 수정한 경우, 어떻게 이것이 인터프리터로 전달되고, 글리프가 업데이트 되는가?
      - 현재 예상되는 C-REPL API는 "한줄"에 대해서 수정,삭제를 할 수 있는 것 뿐이다. 삭제를 한다고 해보자. IDE는 자신이 삭제할 것이 어떠한 RawStatement인지 알고 있으며 이것들로부터 생성된 Thing들이 누구인지도 알 고있다. 이 Thing들을 wrap하고 있는 글리프들이 누구인지 어떻게 알지?
      - v 1안 인터프리터는 RawStatement에 대해서는 free하게 권한을 풀어준다고 볼 수 있다. 삭제와 삽입을 할 수 있으므로. 따라서 만약, RawStatement가 Node의 일종이 될 수 있다면 여기에 member로써 글리프의 대한 bind<T>도 넣을 수 있지 않을까?



## 수정시 재빌드 하는 방법

- C-REPL은 재빌드라는 게 없다. 굳이 한다고 해도 문제될 것은 없다. RawSTatement와 Class 를 비우고 들어가면 된니까. 다만, 코드블럭을 비울때 어떤걸 비울지 어떻게 결정할 수 있을까.
  - 모든 built-in도 하나의 class로써 일반화되서 들어가있다.
  - v 1안 RawStatement 기준으로 날린다. 파서가 RawStatement를 날리면서 이거로부터 생성된 Thing들을 다 delete시키면 되는거 아닌가.





## Validation & C-REPL

### 요구사항

* 오직 Shared memory로만 IPC를 수행한다.
  * 이유 : 가장 빠르다. 상시 debugging 상태이므로 예상컨데 수많은 객체들이  sync되어야 한다. 가뜩이나 빌드로 인해서 실시간성이 중요해지는 마당에 bytes 기반은 느릴 수 밖에 없다.
  * 하나의 reader와 하나의 writer 구조다. ide에서는 참조만 할뿐 데이터의 수정은 존재하지 않는다. read만 하는데 객체를 복제하는건 좋은 방향은 아니다.
  * 다만 문제가 생기면 디버깅이 심각한 수준으로 어렵다고 한다.
* 소스 파일의 저장도 interpreter가 role을 가져간다.
  * 소스코드 sync와 nodes sync 2가지가 있다. 이 중에서 소스코드 sync는 shell command로 한다.
    * 실제 파일을 기반으로 sync로 사용할 수도 있으나, 이렇게 하면 실수로 IDE에서 텍스트를 Ctrl+A, DEL 한 순간 저장이 되어버릴 것이다.
    * 이걸 막으려면 IDE에서 임시파일을 만들어서 이걸로 빌드로 돌리도록 하는 꼼수를 해야 하는데, 차라리 role을 interpreter가 가져가는게 나을 것 같다.
    * 게다가 사용자는 interpreter만 가지고도 코드 작성이 가능해야 한다. 컴파일러가 아니다. REPL이 있으니까, 작성/저장도 가능해야 한다.

### Usecases

#### Actors

* core[corelib] : dll. world의 모든 기능이 포함된 핵심파일
  * indep : sharedmem API를 wrapping한다, Sharemem wrapper class(세마포어 포함)
  * world : sharedmemory에 싱글톤을 만드는 API와 Heap에 만드는 API 2종류가 있어야 한다. sharedmemory에 만드는 경우, nodes structure를  생성하는 코드는 모두 shared memory에 만들어져야 한다.
* worldlang[interpreter] : core를 바탕으로 작성된 shell 기반 프로그램. socket, sharememory, pipe, commandline등이 input.
  * start process
    * 컴파일러가 아니라 REPL기반이다. REPL은 한번 프로그램이 시작되면 계속 실행되는 모드다. 파일을 지정한 경우, 파일을 1회 실행후 자동 종료한다.
    * 모드(REPL이냐 파일 실행이냐)에 따라 싱글톤을 shared에 생성해야 할지, local 생성해야 할지를 결정한다. option으로도 받는다.
  * edit codes
  * compile
  * linking
  * show errors/warnings
  * show src files
  * show current src file
  * save src file
* simple ide : interpreter를 back-end로 둔 front-end. commandline, sharemem를 사용해서 interpreter와 ipc.
  * createProcess API로 process invisible로 만들고, Pipe를 달아두면 cin, cout을 넣고 받을 수 있음.
    * 출처 : https://stackoverflow.com/questions/8576035/open-cmd-and-read-and-write-into-it
  * 가장 빨리 이 IDE를 구현하는데에만 초점이 맞춰져 있음. 뭐로 만들지는 미정.
    * 오픈소스 짜집기 허용
    * 다른 툴이나 엔진 채용 가능
    * 무료 리소스 적용 가능
    * 빨리 만들자 무조건 빨리.
  * 꼭 필요한 편의기능만 탑재.
    * 네트워크 연동 기능 필수.
    * 편집기 기본 기능
    * 게임 UI적인 이펙트 필수
  * 언젠가는 버려질 프로그램.
  * 이 언어의, 프로그램의 방향성과 가능성을 보기 위한 프로그램.
* yggdrasil ide : 진정한 최종 목표.
  * worldlang으로 제작
  * world 모듈을 붙일 수 있음.
  * 3D를 포함한 시각적 요소 지원.
* worldlang user : worldlang 개발자.
* cpp user : cpp 개발자.

#### Tasks

* Start process
  * worldlang user ==프로그램시작==> ide ==shellcmd : start=proc with sharedmem option==> interpreter==linking==>corelib
  * ide==linking==>corelib
  * interpreter==>indep을 이용해서 sharemem 생성
  * interpreter==world==> sharemem에 싱글톤 생성
  * ide==>indep을 이용해서 sharemem 접속 ==실패시==> retry
* Compile
  * ide
    * worldlang user ==타이핑으로 코드수정==> ide ==shellcommand로 source-code sync==> interpreter ==C-REPL==> 컴파일 ==결과반환==> ide
  * interpreter
    * 사용자 ==shell command: edit==> interpreter ==> save  ==> file && compile ==에러시, 결과shell로 반환==> user
* Link
  * in ide
    - 타이핑이 완료후, 일정 시간이 흘렀으며, 컴파일 오류도 없을 경우,
      ide ==shellcommand:linking current codes==> interpreter ==> 링킹 ==결과를 shellcommand로 반환==> ide [결과 success일 경우, interpreter ==sharemem==> nodes structure 갱신, ide==visualization==> sharemem]
  * in interpreter
    - 사용자 ==shell command: linking==> interpreter ==> linking ==에러시, 결과 shell로 반환==> user [성공시, interpreter 내부 데이터는 갱신되나 별도의 출력은 없음]
* Error resulting
  * 개요
    * 에러 정보는 compile 1개 분의 대한 내용이 Interpreter.Erros 같은 별도의 장소에 쌓인다.
      * ide <==pipe==> interpreter
      * error msg를 string을 pipe로 전달하는 방식은, ide가 파싱해야 하므로 적합하지 않다.
    * shared mem option으로 interpreter가 동작하면 cerr로 메시지 보내지 않는다.
      * 사용자가 interpreter를 직접 조작하는 경우는 -silent 옵션이 켜져서 cerr로 메시지가 나가지 않게 된다.
    * 1개의 에러는 다음처럼 구성됨
      * 에러 종류(코드나 객체)
      * 에러 메시지
      * 발생시킨 코드
      * Params
  * 방법



## C-REPL 설계 초안

- 핵심

  - origin객체 명세가 바뀌면, 복제 객체들은 어떻게든 쓸모가 없어진다. 어떠한 방법으로도 기존 복제 객체들을 그 값의 유용성을 유지한 채로 새로운 명세의 객체로 보완할 수 없다.
    - 무슨말인고 하니,
      - def Person
        - age = 20
      - p1 = Person()
      - 일때,
        - age = 19
      - 로 바뀌었다고 하자. 그럼 단순히,
        1. Person을 다시 검증, 생성해서 orign을 교체한다.
        2. Person origin로부터 생성되었던 p1의 값을 새로운 Person의 객체로 교체한다.
      - 면 될 것 같을 것이다. 그러나 이건 잘 못된건데,
        - p1 = Person()
        - p1.age = p1.age + 30 // 49
      - 위와 같을때 Person의 age의 초기값이 20으로 바뀌었다. 가장 올바른 값은 p1.age가 20으로 초기화된 상태에서 수식을 다시 돌린 p1.age == 50이 답이다. 그러나 이를 유추할 수 있다면 이미 현세대 언어가 아니다. 불가능하다.
    - 따라서, 애초에 100%가 불가능 하므로 이걸 limitation으로 앉고 간다. 일체 지원하지 않는 쪽으로 한다.
    - origin객체에 변경이 일어나면 관련 복제 객체들은 모두 제거하거나, 그냥 놔둔다.
      - [디폴트] 항상 제거 옵션을 선택하면, 최신 코드/명세가 적용된 객체만 HEAP에 있게 된다. 안심할 수 있다.
      - 옵션을 끄면,
        - 임의의 값이 할당되었다고 가정하고 테스트를 해볼 수 있다. 그러나 실제로는 가능성이 없는 값일 수 있다.
        - 코드상 존재하지도 않는 객체를 놓고 씨름할 수 있다.
    - 객체의 생성은 전적으로 사용자를 통해서 이뤄줘야 한다. 생성자에 복잡한 파라메터가 들어가야 할때가 있기 때문이다.
  - 메소드 안쪽이 변경된 경우는 구현만 교체하므로 복제 객체는 사라지지 않는다.

- 알고리즘

  - SMART방식

    - 사용자가 수정한 code line을 text로 인터프리터에게 알려준다.

    - 인터프리터는 코드 자체를 대조해서 어느 라인이 변경했는지 diff 한다.

    - 컴파일단계

      - 인터프리터는 해당 변경점에 영향을 받는 최소한의 객체범위를 탐지한다.
        - 예)  1: def Part
          - 2: age = foo(20, 30, // 30이 20으로 변경한경우
          - 3:     getText())
      - 2, 3번 라인이 객체 생성 가능한 최소한의 코드 범위다.
        - 예) stmt 1줄, origin 명이나 상속구조를 수정했다면 그거 자체.
      - 인터프리터가 파싱 후, 객체(메소드/origin객체/멤버변수) 생성한다.

    - 링킹단계

      - 사전에 외부에 영향을 갖는 "인터페이스 객체"(= origin객체의 메소드와 멤버변수, 전역변수)와 "origin 객체" 간의 관계를 매핑해두고 있다.
      - 그 매핑테이블로 해당 객체와 연관이 있는 모든 객체에 문제가 없는지 validation을 돌린다.
        - 사전에, 연관 정보를 다 기록해둬야 한다.
        - 이 정보는 C-REPL 시에만 필요하다.
      - 이상이 없다면 origin 트리에 병합한다.

    - 정합성 단계

      - C-REPL시 origin객체는 또한 복제객체들을 모두 알고있다.

      - 수집해둔 변경된 인터페이스 객체들 목록을 순회하면서 각 원소별로 매핑테이블의 관련 origin객체들의 모든 복제객체들을 싸그리 제거한다.

        1. 검증1: 다음 같은 시나리오는 문제가 되지 않는다

        ```cpp
        1: def Part
        2: def Part Body
        3: def Part Mouse
        4:       body = Body()
        5: // 에서 Body가 BBody로 이름 변경된 경우
        ```

        이 경우, 바뀐건 2번 라인이지만, 4번 라인에 body = BBody()로 바꾸지 않을 경우 링킹단계에서 실패하게 된다.

        사용자가 4번 라인을 바꾸게 되면 멤버변수 body가 바뀐것이므로 2번 라인과 4번 라인은 서로 병렬적으로 돌게 된다.











































# IDE와 연동

## Interpreter가 IDE에게 에러를 고지 하는 방법

- v 1안 각 Thing에서 validate()를 수행한다.
  - 파서는 코드블럭을 생성되면 member로써 filename, col, line을 넣어둔다.
  - 빌드과정에서는 저 데이터는 빠진다.
  - IDE는 text를 input으로 interpreter에게 넣어줄때, IDE가 compile, validate를 모두 하게 된다. interpreter가 자동으로 해주지 않는다. 이는, build된 바이너리도 IDE가 원한다면 validate를 할 수 있도록 해주기 위함이다.
  - validate()의 반환은 List<Exception> 다.
    - Exception에는 메시지와 함께 어느 Thing에서 에러가 났는지 bind되어있음. Thing은 파서가 생성시 col, line, 파일이름을 member로써 끼워둠.
  - 만약 C-REPL을 적용되었을때도, 이러한 프로세스가 사용 가능한가?
    - col, line의 숫자가 변경되어야 한다. 이것을 어떻게 연동할 것인가?
    - 아래에 나와있는 RawStatement를 사용하면 된다.
    - 단, line계산은 그때그때 해주는 수 밖에 없다. 하지만 에러라인은 그렇게 많지 않고. 한 파일안에 라인수는 많아봤자. 10000줄 정도다. 100라인정도가 에러났을경우, 10000*100이 되니까. n^2이긴 하나 이 무식한 방법이 당장 못써먹을 정도는 아니다.
- x 2안 Parser::validate()  Visitor패턴
  - 에러 번호와 col은 파서가 알고 있으므로 알려주는데 무리가 없으며, 이 정보는 편집시에만 제공되므로 메모리 퍼포먼스도 만족한다.
  - standalone에서는 텍스트가 검증되었다고 판단한다. 여기에서는 변수에 특문이 있다는 식의 것은 검증하지 않을 것이다. standalone은 컴파일이 모두 끝난 상황에서 돌아간다는 걸 가정으로 한다.
  - 즉, 개발 과정은 진화된 대화식 개발방법으로 된다. 기존 인터프리터의 대화형 도구(한줄 한줄 읽는 형태가 아니라 "텍스트 에디터" 자체가 대화식 개발방법으라고 가정한다. 이는 인터프리터와 "문맥"을 함께 대화할 수 있는 수단이 된다.
  - validate과정은 논리에러를 찾아낸다. 컴파일에러는 실행자체가 100% 불가능한 경우(정확히는 코드블럭이 생성 불가능한 경우), 논리에러는 실행을 할 수 있을 것이나, 심볼을 못찾는 등으로 인하여 런타임에 실행이 100% fail될 경우다. 런타임오류는 인터프리터가 판단할 수 없는, 사용자에 의도와 어긋나는 동작을 수행하는 오류들을 말한다.
  - text를 input하게 되면, 인터프리터는 compile --> validate 과정을 거친다. compile과정은 validate한걸, 한번 더 최적화시켜서 구조를 바꾼뒤 바이너리파일로 저장하고 여기까지의 과정을 빌드라고 한다.
  - 바이너리파일을 input하게 되면 인터프리터는 execution만 거치며, 이것이 standalone으로 동작할때의 구성이다. compile이 완료된 바이너리는 검증이 끝났다는 걸 기본으로 하며, 이진으로 작성되어 난독화시키고, 최적화가 들어가며(예를들면 심볼을 탐색할때 getMember(string) 대신 getMember(index)를 사용) 코드블럭을 바로 생성하여 실행만 수행한다.
  - 따라서 일반적인 IDE를 통해서 개발될때는 input으로 텍스트를 주게 되며, compile, validate로 논리에러와 컴파일에러를 noti 하게 된다.



## IDE에서 선택한 코드가 코드블럭을 선택하도록 하는 방법은?

- C-REPL이라면 인터프리터가 아마도 텍스트도 들고 있어야 한다. 그때 텍스트를 통짜로 구성하는 것이 아니라 RawStatement 라는 클래스를 만들어서, 요게 텍스트 1줄을 가리키도록 한다.
- RawStatement {
  - string one_line_code;
  - public int getLineNumber() const;
  - Bind<RawFile> owner;
  - List<Weak<Thing>> generated_by_me;
- }
- Thing은 파서로 생성된 경우, 파서가 member로
  - Weak<RawStatement> owner,
  - int column;
- 2가지를 만들어 놓는다.





## 어떻게 IDE와 인터프리터가 통신하는가. 위의 모든 것들을 구현하기 위해서.

- C-REPL일때는 대화형 인터페이스라는 점을 들어서, parser.InsertStatment("~~~~~") 같은 API를 사용하도록 한다. --> C-REPL은 아직 도입되지 않았으니까 다루지 말자.
- 풀빌드 시스템에서는
  - \1. 시스템을 초기상태(built-in 클래스만 들어있으며, Object도 없는 상황)로 되돌리는 API
    - 사용자는 클래스는 날리되 Object는 남겨야하는 상황이 있을 수 있는가? -->
      - 아니 없다. 따라서 클래스를 날리면 인터프리터는 Object도 다 날려줘야 한다. 마찬가지로 코드는 날리면서 클래스는 놔두는 것도 없다. 코드 == 클래스 == 코드블럭이므로 이들은 정확하게 항상 싱크가 맞아야한다.
    - v 1안 RawStatement를 날리면 저것들 다 날아가게?
      - 외부에서 인터프리터와의 소통은 텍스트로 수행한다. 바이너리 클래스로 삽입하는 것은 사실상 소통의 흐름을 단절시키고 폐쇄된 공간에서 빠르게 작업을 수행하는 것과 같다. 편집이 허용되지 않으므로. 따라서 클래스의 편집은 텍스트로만 허용이 되어야 한다. 사용자가 직접 인터프리터의 클래스의 내용을 쥐잡듯이 휘저어 대면 안된다. 마찬가지로 ClassBase의 member들은 const로써 공개가되어야 한다. 값을 확인하고, 데이터를 보고, 흐름이 어떻게 흘러가는지는 언제든지 IDE가 지켜볼 수 있지만 이미 파싱되어서 생성된 Class정보를 IDE가 직접 쑤셔대면 안된다.
      - 따라서, 유일한 의사소통 통로인 RawStatement를 IDE가 삭제요청을 하면 나머지 관련된 것들이 싸그리 날아가는 방식은 합리적이라고 볼 수 있다.
  - \2. compile API(== parse)
    - getParser().parse(filepath)를 여러번 호출하기만 하면 되는 것인가?
    - 이미 로드되었는지는 어떻게 알지?
    - 파일이 변경되었을때는 같은 path가 오더라도 다시 로드를 수행하는게 맞다. 이건 어떻게 체크하지?
      - 1안 RawSTatement를 저장하는 "RawFile" 같은게 있어서 얘는 자신이 성공적으로 로드한 파일의 날짜를 기록해놓는다. 이걸로 대조해서 다를경우에는 RawFile을 날리고(== RawStatement도 날아가고 ==> 관련 Class도 날아가고 => 관련 Object도 다 날아가고) 다시 넣게 한다.
      - 2안 IDE가 알아서 해야지. 중복되지 않게. IDE가 알아서 interpreter의 클래스 정보도 해제해주고.
  - \3. validate API
  - \4. compile API
  - \5. execute API
- 빌드만 놓고 봤을때 5가지만 만족되면 될것이다.





## SharedMemory의 IDE 연동

- IDE는 유니티가 아니라 cocos2d로 간다. C#은 marshalling을 비롯해서 무리가 있다.
- cocos2d는 ide, module 양쪽 모두 창모드 경우에는 문제가 없었다. 하지만 module 전체화면시에는 DirectXDevice를 만들지 못한다. 이것은 아마 시스템제약일 가능성이 크다.
- 장기적으로는 shared memory 같은 걸 사용해서 메모리 공유하는 방향으로 가야 할 것이다. 일단은 창모드만 ㅏ나올 수있다고 공지하는 방향으로 가도록 하자.

































 구현과 디자인

# backbone

## prefix는 NE_ 대신 NAMU를 사용한다.



## Msg

### Msg클래스는 NAMU_CLASS를 써야한다.

- Thing에서 상속받은 구체클래스다.
- instantiate()는 반환형이 Instance부터 가능하다.
- **[v] 1안 값으로 반환하는 경우에도 전방선언은 유효하다.**
  \#include <iostream> using namespace std;  // A.hpp class B; class A { public:     B foo(); };  // A.cpp class B { public:     int age; };  B A::foo() {     return B(); }  int main() {     A a;     a.foo();     return 0; }  // compile ok.



### [v] Msg의_마지막_위치에_Thisptr를_넣어야_한다?

- 결론
  - [v] 2안 thisptr은 배열에 넣지 않는다. 모든 Msg는 별도의 TStrong<Object> thisptr라는 멤버변수를 갖게 된다.

- 고찰내용
  - Msg Args의 첫번째 위치에 넣는 방법도 생각해볼 수 있겠지만 그래서는 안된다. 이유는 이렇다.
    - \1. thisptr는 도중에 변경된다. 런타임에서만 확정된다.
    - \2. 아무 생각없이 thisptr를 msg에 넣게 되면 msg가 resize가 일어나면서 매번 퍼포먼스 로스가 발생한다.
    - \3. 그러므로 thisptr를 msg에 넣어야하는 주체인 Expr인 Msg를 만들면서 미리 thisptr를 넣기 위한 여분의 공간을 1개 끝에 더 만들어서 넣는다. 그리고 Expr은 이 부분을 실행시킨다.
  - 고찰을 통한 요구사항 추출
    - \1. args와 thisptr가 하나의 배열에 같이 담겨져 있어야 한다. 다시말하면 thisptr또한 arg로써 다뤄줘야 한다.
    - \2. static메소드에 thisptr가 포함된 msg가 들어가도 동작이 가능해야 한다. 즉, static 메소드는 args와 thisptr가 서로 구분이 가야한다. thisptr는 args의 일부로써 취급받지만 때로는 평범한 arg와는 선을 그어야 한다.
    - \3. 런타임에 thisptr가 추가되거나 set 될 수 있다. 이때 resize가 발생하지 않도록 해야 한다.
    - \4. 사용자는 Msg를 Object.run()에게 던질경우, 이 결과가 InstanceMethod에게 도달할 것인지,  static메소드에게 갈것인지 몰라도 되야 한다. 따라서 Msg는 런타임에 thistpr가 추가될 수 있게 된다.
  - [x] 1안 thisptr도 배열에 넣는다.
    - thisptr 조차 하나로 arg로 판단하므로 static메소드는 thisptr가 없으면 에러를 내뱉는다.
    - 마찬가지로 InstanceMethod도 thisptr가 없으면 에러가 된다
    - 사용자는 Object.run(Msg)를 보낼때 미리 이 Msg는 thisptr를 필요로 하는지 아닌지를 알고 있어야 한다. 안 그러면 resize가 발생한다.
      - Msg는 기본적으로 항상 thisptr을 위한 size+1를 만들어놓는 다면?
        - 되기야 하겠지. 하지만 근본적으로 배열에 하나로 담았을때의 merit이 없다는 걸 알게되었다. 2안 참조. 그리고 resize+1 하는 것보다 차라리 그럴바에야 물리적으로는 다른 멤버변수로 나뉘어져 있어도 가상적인 배열에서는 하나로 묶여져있게끔 하는 것도 방법이 될 수 있다.
    - [x] 1안 thisptr을 배열의 앞에 넣는다.
      - 만약 thisptr가 앞에 있게 된다면 이 msg가 static 메소드에 도달한 경우 에러가 발생하게 된다. 무슨 말이냐면 굳이 앞에 넣을 거라면 내가 msg를 보낼 메소드가 static인지 아닌지를 매번확인해야 한다는게 된다.
        - [v] 반론: 그 말은, 보낼 메소드가 static인지 아닌지 상관없이 일단 thisptr 넣고 보겠다는 이야기로 들린다. 그러나 생각해보자. 만약 static 메소드에 thisptr를 넣어서 보내게 된다면 static 메소드는 이걸 thisptr가 아니라 추가된 인자로써 받아들일 것이다. 결과적으로 함수 호출이 실패된다. 왜냐하면 static메소드 입장에서는 자기가 알지 못하는 인자가 뒤에 하나더 붙어있는 것이기 때문이다.
        - 이 말은 managed에서의 메소드 호출은 항상 이 함수가 static인지 , 어떠한 인자를 가지고 있는지를 if-else,로 판단해야 한다는 것이다. 사용자가 항상 이렇게 판단해서 올바른 msg를 구성해서 보내야지만 메소드가 호출된다.
        - 또한 일반 메소드들은 별다른 언급및 코드가 없어도 인자리스트 맨 앞에 thisptr가 들어가있게 만들어야 한다.
        - [x] Object.run(Msg)를 하는 경우에는, 알아서 thisptr를 넣도록 했었다. 만약 thisptr를 args[n]으로 바꾼다면 native 환경에서 Object.run()을 하는 경우에는 사용자는 static인지 아닌지 구분을 할 필요가 없게 된다.
          - [v] 그러나 이 편의방법을 사용하는 경우, 어쨌거나 args.resize()가 일어날 가능성이 있다. 이걸 막기 위해서는 처음부터 Object.run()을 호출하기 전에 사용자는 static인지를 확인 한 뒤, static이 아닐 경우에는 resize(args.size() + 1)을 해야만 하는 것이다.
  - **[v] 2안 thisptr는 배열에 넣지 않는다.**
    - 모든 메시지는 thisptr을 소유한다. 특별취급한다. args에 들어가지 않는다. 모든 Msg는 thisptr 만큼 메모리가 늘어난다.
    - 이 방법을 택한 근본적인 이유는 thisptr를 배열에 넣게 됨으로써 가지는 merit이 없기 때문이다.
      - thisptr가 배열에 들어가게끔 하는 이유는 뻔하다. 인자의 하나로써 일반적인 로직 하나로 해결하겠다는 것.
      - 주된 사용처는 Method에서 인자리스트가 제대로 들어있는지 to<T>()를 통해서 validation을 하는 곳일 것이다.
      - 하지만 thisptr가 워낙에 특이한변수이다보니 이곳에서조차, thisptr일 경우에는 thisptr->func(args)처럼 특수한 처리를 해줘야만 한다.
      - Thisptr != Object& 이다. args 배열은 Object&라는 관점에서만 바라보기 때문에, thisptr로써 주어진 object&인지, 인자로써 주어진 object& 인지 구분이 쉽지 않고, 대부분의 상황에서 이 구분을 필요로 했다. 다시말하면 그 일반적인 로직의 다양성이 적다는 것이다. (기껏 하나의 배열로 합쳐봤자 쓸데가 없다는 얘기)
      - 되려 분리시켰을때의 편의성이나 static/instance메소드를 특정하지 않고도 메소드를 보낼 수 있는 점등 장점이 더 많다.


### Scope, 객체와 메소드 간의 메시지 전달 체계

#### [x] 1안 
- 상당히 까다로운 문제였다.
- \#Message는_name_thisptr_args를_모두_하나의_Array로_구성한다
- **thisptr은 Object와 관련이 없다.**
- **Method.call(msg)에서 Method가 static Method가 아니라면 msg 마지막에 thisptr를 넣어둬야한다.**
- CallStmt나 Method를 굳이 Native환경에서 쓰고 싶다는 변태적인 개발자는 직접 msg를 생성할때 args를 size+1한 뒤에 끝에다가 this로 사용할 object를 넣어둬야 한다. Method::run(msg)에다가 Method::run(thisptr, msg)로 하자는 의견도 있었다. 그러나 Method에는 StaticMethod도 나올 수 있으며 이 경우 thisptr는 완전히 필요없는 인자가 된다. Method라는 클래스에는 Static메소드도 포함된 상태이기 때문에 특정 자식클래스에서만 사용한는걸 공통클래스로 끌어올리는데는 조금 석연찮다.
- **Msg는 모두다 인자로써만 취급하기에 자신의 마지막 arg가 thisptr인지 아닌지는 알 도리가 없다. 메소드가 마지막 인자를 thisptr로써 취급하는 것 뿐이다.**
- **Scope.stack(Object&)는 ObjectSpace를 등록하며, scope의 localspace의 "this" 라는 변수를 만들어(이미 있다는 덮어써서) 주어진 object로 assign한다.**
- **Object는 call할때 scope에 대해서 아무런 동작을 하지 않는다. 그저 자신의 member들만 뒤진다.**
- **NativeMethod 역시 scope에 대해서 아무런 동작을 할 필요가 없다.**
- **StaticMethod는 Object관련된 scope 조작이 없다. LocalSpace만 add한다.**
- 왜냐하면 Method::stack을 보면 다른 모든것들은 scope에서 나오고 있기 때문이다.
- 이 둘을 모두 scope에서 출발하도록, Method&origin도 그렇게 만들면 _stack의 args를 scope만 받도록 만들 수 있다.
- 그렇게 되면 object와 method 모두 같은 함수인 _stack을 두도록 할 수 있다.
- 왜 msg에 뒀을까? 이유가 있을 것이다. --> #Message는_thisptr를_어떻게_다뤄야_할까
- **일반 nonstatic ManagedMethod는 외부로부터 this에 사용할 Object가 msg 뒤에 담겨있다는 걸 안다. nonstatic ManagedMethod는 this로 사용할 object를 꺼내서 scope.objectSpace.push() 한다. 함수가 끝나면 objectspace.pop()을 한다.**
- ManagedMethod가 자신이 static인지 아닌지 아는 방법은 isStatic()을 사용하면 된다.

#### [v] 2안
* Msg에는 thisptr는 args와는 별도로 취급한다.
* Msg.thisptr는 Object.call()이 불린순간, Object가 thisptr를 채워넣는다.
    * 참고로 world에는 static 메소드는 존재하지 않는다. 클로저 조차도 사실은 thisptr를 채워놓은 Msg와 Scope를 이용하는 것이다.
* Object 안쪽에서 채워지므로 Native 개발자는 그냥 Msg에 args만 넣어서 호출하면 된다.





### Msg의인자는Method에const로넘어가면안된다

- \#복사연산_시나리오 를 참고.
  - 요약하면 Refer는 생성시에 const 여부가 결정되며, const 타입의 일부이므로 한번 const Refer이면 계속 const Refer여야 한다.
- 일반적으로 생각했을때는 msg의 내용이 변하면 안된다고 볼것이다. 그러나 msg가 처리되는 시나리오와 method로 넘어가는 과정, refer클래스와 const 정책을 모두 고려하면 const로 가면안되고, 각 인자가 const Refer인지 아닌지를 정하게끔 해야 한다.
- 먼저 const 정책문서를 보면 알겠지만 Refer는 2가지 형태의 const를 갖는다. 하나는 native에서만 들어나는 const고, 하나는 managed,nateve모두 들어나는 const인, isConst()다. 둘중 하나라도 const가 되어있다면 get() const를 호출했을때만 유의미한 값이 나온다. const를 결정하는 것은 사실상 Refer클래스가 담당하는 것이며, 원본은 const가 아니라도 Refer는 그것을 const 취급할 수 있다. Refer는 const여부는 생성자에서 정해지며, 소멸될때까지 const는 계속 유지된다. 따라서 const라는 건 궁극적으로는 const ptr라고 불러야 한다.
  - class A
  - class B : A
  - Refer<A> a = new B()
  - const Refer<B> b // b는 C++적인 const만 적용되어있다. b.isConst()는 false다.
  - const Refer<A>& a1 = a; // ok
  - b = a1; // err. b는 c++ const객체이므로 assign이 안된다.
  - Refer<B> b1 = (const B*) new B();
  - b1.isConst() // true
  - b1 = a1; // B가 sharable인가 occupiable인가 따라 다르다.
- occupiable sharable 문서를 또 보면 알겠지만 isOccupiable은 metaclass에 저장되어있고, pretype을 제외하면 사용자 클래스는 모두 sharable이다. occupiable이냐 sharable이냐의 동작상 차이는 오직 Refer클래스에 복사생성 및 operator=()에만 존재한다. sharable이면 Refer객체인 rhs를 그대로 복사하며(isConst()여부도) occupiable이면 deepcopy를 시전한다. 그것뿐이다.
- msg의 args는 Node에 대한 배열이다. 이 Node에는 다른 expr이 들어갈 수도있고 Integer가 그대로 박혀있을 수도 있다. 후자를 프로그래밍 언어에서는 리터럴상수라고 한다. **리터럴상수로 된 경우는 얼마나 메소드를 수행하던 그 인자값이 항상 동일해야한다.**
- 메소드는 주어진 인자를 최종적으로 cast()함수를 사용한다. cast의 반환값은 refer로, 바로 반환이 가능한 케이스(업캐스팅, 다운캐스팅)은 Refer객체를 바로 만들어보내고, 그게 아닐 경우는 생성자를 호출하여 객체를 복사한다.
- 이 문제가 생각하기 까다로운 이유는 2가지 상태값을 갖는 4가지 팩터들을 각각 모두 고려해야하기 때문에 총 16가지 케이스가 나오기 때문이다. 4가지 팩터는 앞서 설명한 1. const인가 2. occupible인가 3. 메소드안에서 write를 하는가 4. 인자가 리터럴상수인가
- 먼저, 본격적으로 시나리오들을 검토하기 전에 요구사항들을 추려보겠다.
  - \1. 모든 케이스에서 가능한가 아닌가를 따지는 것이 아니다. 어떤 케이스는 연산이 불가능해야한다. (예, 인자를 const로 줬는데 메소드는 write를 하는 케이스) 이 경우, 불가능하다는 것이 사용자에게 고지(컴파일에러등)될 수 있으면 문제는없다.
  - \2. 다른 프로그램과 비교했을때 예상범위 내의 결과가 나와야 한다.



### Message는_name_thisptr_args를_모두_하나의_Array로_구성한다

- Message안에 mutable로 들어간다.
- \#Method는_ThisPtr이_꼭_필요하다_어떻게_얻을_수_있을까  참고
- 모든 Object는 call()안에서 expr.thisptr이 비어있다면 자신의 것으로 채워넣고, call()이 끝나기 직전에 다시 비워놓아야 한다.
- me는 항상 자신으로 갱신 한다.
- 고찰내용
  - 핀포인트 물음
    - Method는 Object에게 소유한 것인가? Class에게 소유한 것인가?
    - Object 소유가 아니라면 과연 Method가 thisptr를 반환할 당위성이 있는가?
    - Object 안에 멤버변수인 Object는 과연 Object의 소유인가?
  - 고찰을 통한 팩트 도출
    - \1. thisptr가 필요한 순간은 Object에서 Method로 call을 redirection 하는 순간일 뿐이다. 왜냐하면 Method는 Object에 속한것이 아니며, call()은 인자리스트가 fix되어있기 때문에 Method에게 Object자신의 thisptr를 전해줘야만 하기 때문이다.
    - \2. Method의 thisptr는 실행중인 상태에서만 조회가 가능하다. 당연히 왜냐하면 Method는 모든 객체의 것이니까.
    - \3. 콜스택에 함수가 들어가있는 모든 함수는 자신의 thisptr를 알려줄 수 있어야 한다.
      - 예) A함수 실행 -> 안에서, B객체의 C함수를 호출한 상황일때, C함수 안에서 A함수의 getObject()를 했을때
  - v 1안 모든 Message 객체는 .thisptr라는 멤버변수를 두고 거기에 담아둔다.
    - 반대의견
      - Message는 Expression이 하나씩 소유하고 있음을 생각해보면 답이 나온다. Expression은 Method가 가지고 있으며 Method는 시스템에 1개다. Expression도 한개다. 고로 그 안의 Message도 한개다. 그런데 thisptr는 클래스는 같아도 여러개의 객체가 나오므로 Message에 넣어질 thisptr는 여러개가 된다. 따라서 모든 Message마다 thisptr를 갖고 있는 것은 낭비일 것이다.
      - 만약 World에서 Object가 아닌 Method.getName()을 한다고 해보자. 이 알고리즘이 제대로 될것인가?
        - Method도 Object이다. 따라서 Expr이 처음 call로 전달되기 직전에 만나는 Object가 자신의 thisptr를 채워넣으면 된다.

시나리오

- 작성
  - IDE에서 사용자가 메소드를 작성한다. 컴파일되고 Wrd는 이 메소드가 static인지 아닌지, 인자는 뭐가 필요한지 알게된다. IDE에게 그것을 고지하고 IDE는 인식한 뒤, 사용자에게 그것을 고지한다. 사용자가 잘못된 인자를 Method에 넣거나, 일반메소드를 static메소드처럼 사용한 경우, IDE는 그것을 컴파일러에게 넘기고, 컴파일러는 CREPL로 이걸 처리하면서 에러를 뿜어낸다. 사용자는 에러를 보고 올바르게 고친다. 사용자가 제대로 작성한 메소드호출 코드를 작성하면 Wrd는 메소드를 호출하기 위한 msg를 생성할때 이 Method가 static이 아니라는 사실을 알게된 순간 첫번째 element를 this를 위해 추가로 size+1하여 생성하고 앞에서부터 인자를 채워넣는다. (this는 맨 뒤에 위치하게 된다)
- 실행
  - Managed
    - Wrd는 Object에 먼저가서 사용자가 어떤 member를 가져가길 원하는지 질의해서 찾아낸다. 그리고 methodcallstmt는 msg 인자 맨 뒤에 caller(= this)를 넣고 Method.call(msg)을 수행한다. 수행이 끝나도 msg 맨 뒤의 thisptr는 그대로 유지한다.
  - Native
    - 사용자는 들고있는 Method가 isStatic()으로 확인 한 후, Msg를 생성하여 인자를 채워넣고 Method에 대한 Object를 맨 뒤에 넣은 뒤, call(msg)를 호출하거나
    - call(thisptr, msg) 버전을 호출한다.

- 고찰내용
  - Msg는 const가 되어서는 안된다. --> #Msg의인자는Method에const로넘어가면안된다
  - 따라서 모든 msg 마다 추가적은 thisptr를 담아야한다는 메모리감소만 감수한다면 이렇게 할 수 있다. 장단점을 비교해보자.
  - 장점
    - this도 msg의 한 인자로써 일반적으로 취급할 수 있다는 점
    - this를 method에 주입하는 방법이 밖으로 들어났으므로 native에서도 Method에다가 호출이 가능하다는 점
  - 그럴 필요가 있는가?
    - Msg가 전달될때 첫번째 인자는 thisptr이 되어야 할까?
  - 1안 Message : public Array {
    - [0] : thisptr
    - [1] : name
    - [2] : arg[0]
    - [3] : arg[1]....
    - 그러나 이렇게 하면 getArguments() 같은 걸 만들 수 없다. 고로 Chain이 되어야 하며, 추가적인 비용으로 될 것이다.
  - 2안 그대로 유지한다.
    - class Message
      - string name
      - TStrong<Node> thisptr
      - Array args
  - 실패한다. 애초에 msg에 thisptr가 들어갈 수 없다.
    - v Msg는 외부에서 주어지는 것이다. 그러니 call(const Msg&) 로 들어갈 가능성이 있다?
      - 모듈안에서 인자의 값이 수정되어야하는 경우는 어떠한가?? 예를들면
        - class MyModule : public Object {
          - Integer& foo(Integer& origin) {
            - origin++;
            - return origin;
          - }
        - }
        - class Wrapper : public Func {
          - void execute() {
            - thisptr->fptr(args[0].to<Integer>()); // args[0]에는 Expr이 들어있을것이고, 그것은 scope["origin"] 을 수행할 것이다.
          - }
        - }
      - 따라서, 모듈안에서 인자가 수정되는 경우에도 msg자체가 변경되는 것은 아니다. 따라서 call(const Msg&)는 정당한 설계라고 봐야 할것이다. 따라서 msg안에는 thisptr가 들어가서는 안된다.
  - 단점
    - 메모리 사용량 증가

### 메시지를 받을 수 있는 모든 것은 World에 visible 하다.

- 모든 것은 객체다. 하지만 World에서 더 중요한 것은 Message다.

- Message란 함수호출을 위한 의지를 의미한다.

- 객체는 함수와 자기의 변수를 가지고 있다.

- Object는 객체다. 고로 함수가 존재하고 메타클래 Class<Object>는 각 함수에 대한 Function을 가지고 있으므로 이걸 통해서 호출이 가능하다.

- 하지만 Object 자체는 메시지를 받을 수 없다.

- 이말은, World 개발자는 Object의 함수를 간접적으로 사용하는 것은 가능할지라도(Class<Object>().call("")을 통해서..) Object를 직접 Reference로 가리키던가 Node화 시키는 것은 불가능하다는 것이다.

- 클래스, 함수도 Message를 받을 수 있다. 그러므로 World개발자가 조작할 수 있다.

  - class A

    - void foo(int b)

  - A.foo.getName()

  - A a

  - a.foo(3) // a.foo.call("foo", [int(3)]) 의 축약버전이다.



### 하위 Node로의 매시지 전파

- World로 call("foo", {Integer(5)}) 가 들어왔을때, 이걸 해독하여 foo(int)를 호출할 수 있도록 해주는것이다.

- Node::call(string name, args[])

  - for m in members
    - if m.getName() == foo
      - m에게 나머지 messgage를 맡긴다.
      - 만약 message가 foo.getName() 일 경우에는 m의 getName()이 호출되는 것이다.

- 월드 코드 "foo[0].getManager().getName()" 가 있을 경우, 어떤식으로 진행되는가?

  - 파서가 코드블럭을 만들어내면 끝나는 작업이다.
  - foo, [0], getManager (), getName () 이렇게 끊는다.
  - Statment[]를 생성한다.
    - Statement6
      - Statement5
        - Statement4
          - Statement3
            - Statement2
              - Statement1
                - this
                - "foo"
              - "[]"
              - {0}
            - "getManager"
          - "()"
        - "getName"
      - "()"
  - 위의 statement가 실행한다" --> 안되면 에러, 되면 반환형이 손에 쥐어질 것이다.

- 메소드 또한 Class의 일종으로, Method를 가질 수 있다. 따라서 World코드 마지막에는 Method.call() 대신 Method.execute()를 하지 않으면 무한 재귀를 돌게 된다.

- 인터프리터는 파싱한게 함수호출임을 알 수 있으며, 마지막에는 반드시 Method.execute(msg)로 끝날 수 있도록 코드블럭, 즉 Expression을 구성해야한다.

- 고찰내용

  - call("()") 로 체크한다는 것인데, 이게 redirect하는 native함수는 무엇인가? 만약 그게 만약 execute()라면 World코드로 call("execute")를 한경우는 어떻게 되는가

    - World에서 작성한 함수는 C++에서 호출하려면 "World"의 방법대로 호출해야 한다.
      - 즉 call("execute")를 하면 ExecuteFunction()이 실행된다는 것이다.
    - 논리적으로 불가능하지 않다. 다만 Native개발자는 "()"와 매칭되는게 execute라는 사실을 인지하고 있어야 한다.

  - 재귀가 발생한다

    - Method는 객체가 되어야 한다. 이게 나중에는 함수포인터 내지는 콜백으로 기능하게 될 것이기 때문이다. Reference(Method) 같은게 반드시 있어야 한다.

    - 하지만 그렇게 되면 문제가 되는데 Method에도 함수가 존재하게 될 것이고, execute()는 메소드를 실행시킬 함수가 될 것이다. 그렇게되면 메소드를 실행하는 순간 Method->executeMethod->executeMethod->...가 반복되게 된다.

      - 1안 종말메소드 를 만든다.

        - 종말메소드는 객체가 아니다. 주어진 인자를 무조건 사용해서 동작1개를 수행한다.
        - 이들은 일반적인 method와 다르게 주어진 msg를 판독하는 기능이 존재하지 않는다.
        - 문제점
          - 이후 TClass<T> 매크로로부터 생성되는 모든 메소드들은 자신 안에 Member로 또하나의 종말메소드들을 다 갖게 되버린다.
          - 그리고 함수가 실행되는 절차도 길어지게 된다.

      - 2안 위와 같은 문제를 야기시키는게 execute 뿐이라면, 해당 코드만 특화시킨다.

      - v 3안 재사용된 종말메소드

        - Method 클래스에 execute를 종말메소드로 만든다. 종말메소드는 일반적인 메소드 클래스와 달리 어떠한 자식Node도 없다.

        - execute종말메소드는 call()시, msg를 판독하지 않고, 바로 execute(Args&)를 부른다.

        - Native함수가 실행되는 최소시작점은 execute(Args&) or execute() 다.

        - 매크로로 expand된 클래스들은 execute(Args&)를 override해서 주어진 인자들을 풀어서 최종 메소드로 redirect 하는 코드를 만든다. --> _onExecute(Integer&, String&)

        - 장점

          - 종말메소드는 구현파일 안쪽에 감출 수 있다.

          - 기존 로직 수정이 거의 없고 예외처리가 존재하지 않는다.



### Msg의인자는Method에const로넘어가면안된다

- \#복사연산_시나리오 참고
- \1. Native(Wrd Frx)에서는 const Refer나 Refer<const T>나 동일하다.
- \2. nonconst -> const 는 ok이지만 const -> nonconst는 안된다.
- 고로, const msg&로 넘어오게 되면 msg의 모든 인자에 대해 to<T> const()만 써야 하며, const Refer로만 받을 수 있다.











# 코딩 컨벤션














# 작성 예제
